
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00003564  000035f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001aa  008001aa  00003742  2**0
                  ALLOC
  3 .stab         0000231c  00000000  00000000  00003744  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f8  00000000  00000000  00005a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000054 <str_inf.1428>:
      54:	69 6e 66 00 49 4e 46 00                             inf.INF.

0000005c <str_nan.1427>:
      5c:	6e 61 6e 00 4e 41 4e 00 00 40 7a 10 f3 5a 00 a0     nan.NAN..@z..Z..
      6c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      7c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      8c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      9c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      ac:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      bc:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      cc:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
      dc:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
      ec:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
      fc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     10c:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     11c:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     12c:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     13c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     14c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     15c:	3d 27                                               ='

0000015e <__c.1971>:
     15e:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf e5       	ldi	r28, 0x5F	; 95
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e6       	ldi	r26, 0x60	; 96
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e4 e6       	ldi	r30, 0x64	; 100
     17e:	f5 e3       	ldi	r31, 0x35	; 53
     180:	02 c0       	rjmp	.+4      	; 0x186 <.do_copy_data_start>

00000182 <.do_copy_data_loop>:
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0

00000186 <.do_copy_data_start>:
     186:	aa 3a       	cpi	r26, 0xAA	; 170
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <.do_copy_data_loop>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	aa ea       	ldi	r26, 0xAA	; 170
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a0 3b       	cpi	r26, 0xB0	; 176
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <main>
     1a0:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <__fixunssfsi>:
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	7b 01       	movw	r14, r22
     1b2:	8c 01       	movw	r16, r24
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	5f e4       	ldi	r21, 0x4F	; 79
     1bc:	0e 94 80 04 	call	0x900	; 0x900 <__gesf2>
     1c0:	88 23       	and	r24, r24
     1c2:	8c f0       	brlt	.+34     	; 0x1e6 <__fixunssfsi+0x3e>
     1c4:	c8 01       	movw	r24, r16
     1c6:	b7 01       	movw	r22, r14
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	5f e4       	ldi	r21, 0x4F	; 79
     1d0:	0e 94 4c 02 	call	0x498	; 0x498 <__subsf3>
     1d4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fixsfsi>
     1d8:	9b 01       	movw	r18, r22
     1da:	ac 01       	movw	r20, r24
     1dc:	20 50       	subi	r18, 0x00	; 0
     1de:	30 40       	sbci	r19, 0x00	; 0
     1e0:	40 40       	sbci	r20, 0x00	; 0
     1e2:	50 48       	sbci	r21, 0x80	; 128
     1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <__fixunssfsi+0x4a>
     1e6:	c8 01       	movw	r24, r16
     1e8:	b7 01       	movw	r22, r14
     1ea:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fixsfsi>
     1ee:	9b 01       	movw	r18, r22
     1f0:	ac 01       	movw	r20, r24
     1f2:	b9 01       	movw	r22, r18
     1f4:	ca 01       	movw	r24, r20
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	08 95       	ret

00000200 <_fpadd_parts>:
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	e6 e0       	ldi	r30, 0x06	; 6
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__prologue_saves__>
     20c:	dc 01       	movw	r26, r24
     20e:	2b 01       	movw	r4, r22
     210:	fa 01       	movw	r30, r20
     212:	9c 91       	ld	r25, X
     214:	92 30       	cpi	r25, 0x02	; 2
     216:	08 f4       	brcc	.+2      	; 0x21a <_fpadd_parts+0x1a>
     218:	39 c1       	rjmp	.+626    	; 0x48c <_fpadd_parts+0x28c>
     21a:	eb 01       	movw	r28, r22
     21c:	88 81       	ld	r24, Y
     21e:	82 30       	cpi	r24, 0x02	; 2
     220:	08 f4       	brcc	.+2      	; 0x224 <_fpadd_parts+0x24>
     222:	33 c1       	rjmp	.+614    	; 0x48a <_fpadd_parts+0x28a>
     224:	94 30       	cpi	r25, 0x04	; 4
     226:	69 f4       	brne	.+26     	; 0x242 <_fpadd_parts+0x42>
     228:	84 30       	cpi	r24, 0x04	; 4
     22a:	09 f0       	breq	.+2      	; 0x22e <_fpadd_parts+0x2e>
     22c:	2f c1       	rjmp	.+606    	; 0x48c <_fpadd_parts+0x28c>
     22e:	11 96       	adiw	r26, 0x01	; 1
     230:	9c 91       	ld	r25, X
     232:	11 97       	sbiw	r26, 0x01	; 1
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	98 17       	cp	r25, r24
     238:	09 f4       	brne	.+2      	; 0x23c <_fpadd_parts+0x3c>
     23a:	28 c1       	rjmp	.+592    	; 0x48c <_fpadd_parts+0x28c>
     23c:	ad e7       	ldi	r26, 0x7D	; 125
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	25 c1       	rjmp	.+586    	; 0x48c <_fpadd_parts+0x28c>
     242:	84 30       	cpi	r24, 0x04	; 4
     244:	09 f4       	brne	.+2      	; 0x248 <_fpadd_parts+0x48>
     246:	21 c1       	rjmp	.+578    	; 0x48a <_fpadd_parts+0x28a>
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	a9 f4       	brne	.+42     	; 0x276 <_fpadd_parts+0x76>
     24c:	92 30       	cpi	r25, 0x02	; 2
     24e:	09 f0       	breq	.+2      	; 0x252 <_fpadd_parts+0x52>
     250:	1d c1       	rjmp	.+570    	; 0x48c <_fpadd_parts+0x28c>
     252:	9a 01       	movw	r18, r20
     254:	ad 01       	movw	r20, r26
     256:	88 e0       	ldi	r24, 0x08	; 8
     258:	ea 01       	movw	r28, r20
     25a:	09 90       	ld	r0, Y+
     25c:	ae 01       	movw	r20, r28
     25e:	e9 01       	movw	r28, r18
     260:	09 92       	st	Y+, r0
     262:	9e 01       	movw	r18, r28
     264:	81 50       	subi	r24, 0x01	; 1
     266:	c1 f7       	brne	.-16     	; 0x258 <_fpadd_parts+0x58>
     268:	e2 01       	movw	r28, r4
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	89 23       	and	r24, r25
     272:	81 83       	std	Z+1, r24	; 0x01
     274:	08 c1       	rjmp	.+528    	; 0x486 <_fpadd_parts+0x286>
     276:	92 30       	cpi	r25, 0x02	; 2
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x7c>
     27a:	07 c1       	rjmp	.+526    	; 0x48a <_fpadd_parts+0x28a>
     27c:	12 96       	adiw	r26, 0x02	; 2
     27e:	2d 90       	ld	r2, X+
     280:	3c 90       	ld	r3, X
     282:	13 97       	sbiw	r26, 0x03	; 3
     284:	eb 01       	movw	r28, r22
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	9b 81       	ldd	r25, Y+3	; 0x03
     28a:	14 96       	adiw	r26, 0x04	; 4
     28c:	ad 90       	ld	r10, X+
     28e:	bd 90       	ld	r11, X+
     290:	cd 90       	ld	r12, X+
     292:	dc 90       	ld	r13, X
     294:	17 97       	sbiw	r26, 0x07	; 7
     296:	ec 80       	ldd	r14, Y+4	; 0x04
     298:	fd 80       	ldd	r15, Y+5	; 0x05
     29a:	0e 81       	ldd	r16, Y+6	; 0x06
     29c:	1f 81       	ldd	r17, Y+7	; 0x07
     29e:	91 01       	movw	r18, r2
     2a0:	28 1b       	sub	r18, r24
     2a2:	39 0b       	sbc	r19, r25
     2a4:	b9 01       	movw	r22, r18
     2a6:	37 ff       	sbrs	r19, 7
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <_fpadd_parts+0xb2>
     2aa:	66 27       	eor	r22, r22
     2ac:	77 27       	eor	r23, r23
     2ae:	62 1b       	sub	r22, r18
     2b0:	73 0b       	sbc	r23, r19
     2b2:	60 32       	cpi	r22, 0x20	; 32
     2b4:	71 05       	cpc	r23, r1
     2b6:	0c f0       	brlt	.+2      	; 0x2ba <_fpadd_parts+0xba>
     2b8:	61 c0       	rjmp	.+194    	; 0x37c <_fpadd_parts+0x17c>
     2ba:	12 16       	cp	r1, r18
     2bc:	13 06       	cpc	r1, r19
     2be:	6c f5       	brge	.+90     	; 0x31a <_fpadd_parts+0x11a>
     2c0:	37 01       	movw	r6, r14
     2c2:	48 01       	movw	r8, r16
     2c4:	06 2e       	mov	r0, r22
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <_fpadd_parts+0xd0>
     2c8:	96 94       	lsr	r9
     2ca:	87 94       	ror	r8
     2cc:	77 94       	ror	r7
     2ce:	67 94       	ror	r6
     2d0:	0a 94       	dec	r0
     2d2:	d2 f7       	brpl	.-12     	; 0x2c8 <_fpadd_parts+0xc8>
     2d4:	21 e0       	ldi	r18, 0x01	; 1
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <_fpadd_parts+0xe6>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	6a 95       	dec	r22
     2e8:	d2 f7       	brpl	.-12     	; 0x2de <_fpadd_parts+0xde>
     2ea:	21 50       	subi	r18, 0x01	; 1
     2ec:	30 40       	sbci	r19, 0x00	; 0
     2ee:	40 40       	sbci	r20, 0x00	; 0
     2f0:	50 40       	sbci	r21, 0x00	; 0
     2f2:	2e 21       	and	r18, r14
     2f4:	3f 21       	and	r19, r15
     2f6:	40 23       	and	r20, r16
     2f8:	51 23       	and	r21, r17
     2fa:	21 15       	cp	r18, r1
     2fc:	31 05       	cpc	r19, r1
     2fe:	41 05       	cpc	r20, r1
     300:	51 05       	cpc	r21, r1
     302:	21 f0       	breq	.+8      	; 0x30c <_fpadd_parts+0x10c>
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	79 01       	movw	r14, r18
     30e:	8a 01       	movw	r16, r20
     310:	e6 28       	or	r14, r6
     312:	f7 28       	or	r15, r7
     314:	08 29       	or	r16, r8
     316:	19 29       	or	r17, r9
     318:	3c c0       	rjmp	.+120    	; 0x392 <_fpadd_parts+0x192>
     31a:	23 2b       	or	r18, r19
     31c:	d1 f1       	breq	.+116    	; 0x392 <_fpadd_parts+0x192>
     31e:	26 0e       	add	r2, r22
     320:	37 1e       	adc	r3, r23
     322:	35 01       	movw	r6, r10
     324:	46 01       	movw	r8, r12
     326:	06 2e       	mov	r0, r22
     328:	04 c0       	rjmp	.+8      	; 0x332 <_fpadd_parts+0x132>
     32a:	96 94       	lsr	r9
     32c:	87 94       	ror	r8
     32e:	77 94       	ror	r7
     330:	67 94       	ror	r6
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <_fpadd_parts+0x12a>
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	04 c0       	rjmp	.+8      	; 0x348 <_fpadd_parts+0x148>
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	44 1f       	adc	r20, r20
     346:	55 1f       	adc	r21, r21
     348:	6a 95       	dec	r22
     34a:	d2 f7       	brpl	.-12     	; 0x340 <_fpadd_parts+0x140>
     34c:	21 50       	subi	r18, 0x01	; 1
     34e:	30 40       	sbci	r19, 0x00	; 0
     350:	40 40       	sbci	r20, 0x00	; 0
     352:	50 40       	sbci	r21, 0x00	; 0
     354:	2a 21       	and	r18, r10
     356:	3b 21       	and	r19, r11
     358:	4c 21       	and	r20, r12
     35a:	5d 21       	and	r21, r13
     35c:	21 15       	cp	r18, r1
     35e:	31 05       	cpc	r19, r1
     360:	41 05       	cpc	r20, r1
     362:	51 05       	cpc	r21, r1
     364:	21 f0       	breq	.+8      	; 0x36e <_fpadd_parts+0x16e>
     366:	21 e0       	ldi	r18, 0x01	; 1
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	59 01       	movw	r10, r18
     370:	6a 01       	movw	r12, r20
     372:	a6 28       	or	r10, r6
     374:	b7 28       	or	r11, r7
     376:	c8 28       	or	r12, r8
     378:	d9 28       	or	r13, r9
     37a:	0b c0       	rjmp	.+22     	; 0x392 <_fpadd_parts+0x192>
     37c:	82 15       	cp	r24, r2
     37e:	93 05       	cpc	r25, r3
     380:	2c f0       	brlt	.+10     	; 0x38c <_fpadd_parts+0x18c>
     382:	1c 01       	movw	r2, r24
     384:	aa 24       	eor	r10, r10
     386:	bb 24       	eor	r11, r11
     388:	65 01       	movw	r12, r10
     38a:	03 c0       	rjmp	.+6      	; 0x392 <_fpadd_parts+0x192>
     38c:	ee 24       	eor	r14, r14
     38e:	ff 24       	eor	r15, r15
     390:	87 01       	movw	r16, r14
     392:	11 96       	adiw	r26, 0x01	; 1
     394:	9c 91       	ld	r25, X
     396:	d2 01       	movw	r26, r4
     398:	11 96       	adiw	r26, 0x01	; 1
     39a:	8c 91       	ld	r24, X
     39c:	98 17       	cp	r25, r24
     39e:	09 f4       	brne	.+2      	; 0x3a2 <_fpadd_parts+0x1a2>
     3a0:	45 c0       	rjmp	.+138    	; 0x42c <_fpadd_parts+0x22c>
     3a2:	99 23       	and	r25, r25
     3a4:	39 f0       	breq	.+14     	; 0x3b4 <_fpadd_parts+0x1b4>
     3a6:	a8 01       	movw	r20, r16
     3a8:	97 01       	movw	r18, r14
     3aa:	2a 19       	sub	r18, r10
     3ac:	3b 09       	sbc	r19, r11
     3ae:	4c 09       	sbc	r20, r12
     3b0:	5d 09       	sbc	r21, r13
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <_fpadd_parts+0x1c0>
     3b4:	a6 01       	movw	r20, r12
     3b6:	95 01       	movw	r18, r10
     3b8:	2e 19       	sub	r18, r14
     3ba:	3f 09       	sbc	r19, r15
     3bc:	40 0b       	sbc	r20, r16
     3be:	51 0b       	sbc	r21, r17
     3c0:	57 fd       	sbrc	r21, 7
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <_fpadd_parts+0x1d4>
     3c4:	11 82       	std	Z+1, r1	; 0x01
     3c6:	33 82       	std	Z+3, r3	; 0x03
     3c8:	22 82       	std	Z+2, r2	; 0x02
     3ca:	24 83       	std	Z+4, r18	; 0x04
     3cc:	35 83       	std	Z+5, r19	; 0x05
     3ce:	46 83       	std	Z+6, r20	; 0x06
     3d0:	57 83       	std	Z+7, r21	; 0x07
     3d2:	1d c0       	rjmp	.+58     	; 0x40e <_fpadd_parts+0x20e>
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	81 83       	std	Z+1, r24	; 0x01
     3d8:	33 82       	std	Z+3, r3	; 0x03
     3da:	22 82       	std	Z+2, r2	; 0x02
     3dc:	88 27       	eor	r24, r24
     3de:	99 27       	eor	r25, r25
     3e0:	dc 01       	movw	r26, r24
     3e2:	82 1b       	sub	r24, r18
     3e4:	93 0b       	sbc	r25, r19
     3e6:	a4 0b       	sbc	r26, r20
     3e8:	b5 0b       	sbc	r27, r21
     3ea:	84 83       	std	Z+4, r24	; 0x04
     3ec:	95 83       	std	Z+5, r25	; 0x05
     3ee:	a6 83       	std	Z+6, r26	; 0x06
     3f0:	b7 83       	std	Z+7, r27	; 0x07
     3f2:	0d c0       	rjmp	.+26     	; 0x40e <_fpadd_parts+0x20e>
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	44 1f       	adc	r20, r20
     3fa:	55 1f       	adc	r21, r21
     3fc:	24 83       	std	Z+4, r18	; 0x04
     3fe:	35 83       	std	Z+5, r19	; 0x05
     400:	46 83       	std	Z+6, r20	; 0x06
     402:	57 83       	std	Z+7, r21	; 0x07
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	93 83       	std	Z+3, r25	; 0x03
     40c:	82 83       	std	Z+2, r24	; 0x02
     40e:	24 81       	ldd	r18, Z+4	; 0x04
     410:	35 81       	ldd	r19, Z+5	; 0x05
     412:	46 81       	ldd	r20, Z+6	; 0x06
     414:	57 81       	ldd	r21, Z+7	; 0x07
     416:	da 01       	movw	r26, r20
     418:	c9 01       	movw	r24, r18
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	a1 09       	sbc	r26, r1
     41e:	b1 09       	sbc	r27, r1
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	9f 4f       	sbci	r25, 0xFF	; 255
     424:	af 4f       	sbci	r26, 0xFF	; 255
     426:	bf 43       	sbci	r27, 0x3F	; 63
     428:	28 f3       	brcs	.-54     	; 0x3f4 <_fpadd_parts+0x1f4>
     42a:	0b c0       	rjmp	.+22     	; 0x442 <_fpadd_parts+0x242>
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	33 82       	std	Z+3, r3	; 0x03
     430:	22 82       	std	Z+2, r2	; 0x02
     432:	ea 0c       	add	r14, r10
     434:	fb 1c       	adc	r15, r11
     436:	0c 1d       	adc	r16, r12
     438:	1d 1d       	adc	r17, r13
     43a:	e4 82       	std	Z+4, r14	; 0x04
     43c:	f5 82       	std	Z+5, r15	; 0x05
     43e:	06 83       	std	Z+6, r16	; 0x06
     440:	17 83       	std	Z+7, r17	; 0x07
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	80 83       	st	Z, r24
     446:	24 81       	ldd	r18, Z+4	; 0x04
     448:	35 81       	ldd	r19, Z+5	; 0x05
     44a:	46 81       	ldd	r20, Z+6	; 0x06
     44c:	57 81       	ldd	r21, Z+7	; 0x07
     44e:	57 ff       	sbrs	r21, 7
     450:	1a c0       	rjmp	.+52     	; 0x486 <_fpadd_parts+0x286>
     452:	c9 01       	movw	r24, r18
     454:	aa 27       	eor	r26, r26
     456:	97 fd       	sbrc	r25, 7
     458:	a0 95       	com	r26
     45a:	ba 2f       	mov	r27, r26
     45c:	81 70       	andi	r24, 0x01	; 1
     45e:	90 70       	andi	r25, 0x00	; 0
     460:	a0 70       	andi	r26, 0x00	; 0
     462:	b0 70       	andi	r27, 0x00	; 0
     464:	56 95       	lsr	r21
     466:	47 95       	ror	r20
     468:	37 95       	ror	r19
     46a:	27 95       	ror	r18
     46c:	82 2b       	or	r24, r18
     46e:	93 2b       	or	r25, r19
     470:	a4 2b       	or	r26, r20
     472:	b5 2b       	or	r27, r21
     474:	84 83       	std	Z+4, r24	; 0x04
     476:	95 83       	std	Z+5, r25	; 0x05
     478:	a6 83       	std	Z+6, r26	; 0x06
     47a:	b7 83       	std	Z+7, r27	; 0x07
     47c:	82 81       	ldd	r24, Z+2	; 0x02
     47e:	93 81       	ldd	r25, Z+3	; 0x03
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	93 83       	std	Z+3, r25	; 0x03
     484:	82 83       	std	Z+2, r24	; 0x02
     486:	df 01       	movw	r26, r30
     488:	01 c0       	rjmp	.+2      	; 0x48c <_fpadd_parts+0x28c>
     48a:	d2 01       	movw	r26, r4
     48c:	cd 01       	movw	r24, r26
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	e2 e1       	ldi	r30, 0x12	; 18
     494:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__epilogue_restores__>

00000498 <__subsf3>:
     498:	a0 e2       	ldi	r26, 0x20	; 32
     49a:	b0 e0       	ldi	r27, 0x00	; 0
     49c:	e2 e5       	ldi	r30, 0x52	; 82
     49e:	f2 e0       	ldi	r31, 0x02	; 2
     4a0:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__prologue_saves__+0x18>
     4a4:	69 83       	std	Y+1, r22	; 0x01
     4a6:	7a 83       	std	Y+2, r23	; 0x02
     4a8:	8b 83       	std	Y+3, r24	; 0x03
     4aa:	9c 83       	std	Y+4, r25	; 0x04
     4ac:	2d 83       	std	Y+5, r18	; 0x05
     4ae:	3e 83       	std	Y+6, r19	; 0x06
     4b0:	4f 83       	std	Y+7, r20	; 0x07
     4b2:	58 87       	std	Y+8, r21	; 0x08
     4b4:	e9 e0       	ldi	r30, 0x09	; 9
     4b6:	ee 2e       	mov	r14, r30
     4b8:	f1 2c       	mov	r15, r1
     4ba:	ec 0e       	add	r14, r28
     4bc:	fd 1e       	adc	r15, r29
     4be:	ce 01       	movw	r24, r28
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	b7 01       	movw	r22, r14
     4c4:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     4c8:	8e 01       	movw	r16, r28
     4ca:	0f 5e       	subi	r16, 0xEF	; 239
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	ce 01       	movw	r24, r28
     4d0:	05 96       	adiw	r24, 0x05	; 5
     4d2:	b8 01       	movw	r22, r16
     4d4:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     4d8:	8a 89       	ldd	r24, Y+18	; 0x12
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	89 27       	eor	r24, r25
     4de:	8a 8b       	std	Y+18, r24	; 0x12
     4e0:	c7 01       	movw	r24, r14
     4e2:	b8 01       	movw	r22, r16
     4e4:	ae 01       	movw	r20, r28
     4e6:	47 5e       	subi	r20, 0xE7	; 231
     4e8:	5f 4f       	sbci	r21, 0xFF	; 255
     4ea:	0e 94 00 01 	call	0x200	; 0x200 <_fpadd_parts>
     4ee:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__pack_f>
     4f2:	a0 96       	adiw	r28, 0x20	; 32
     4f4:	e6 e0       	ldi	r30, 0x06	; 6
     4f6:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__epilogue_restores__+0x18>

000004fa <__addsf3>:
     4fa:	a0 e2       	ldi	r26, 0x20	; 32
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	e3 e8       	ldi	r30, 0x83	; 131
     500:	f2 e0       	ldi	r31, 0x02	; 2
     502:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__prologue_saves__+0x18>
     506:	69 83       	std	Y+1, r22	; 0x01
     508:	7a 83       	std	Y+2, r23	; 0x02
     50a:	8b 83       	std	Y+3, r24	; 0x03
     50c:	9c 83       	std	Y+4, r25	; 0x04
     50e:	2d 83       	std	Y+5, r18	; 0x05
     510:	3e 83       	std	Y+6, r19	; 0x06
     512:	4f 83       	std	Y+7, r20	; 0x07
     514:	58 87       	std	Y+8, r21	; 0x08
     516:	f9 e0       	ldi	r31, 0x09	; 9
     518:	ef 2e       	mov	r14, r31
     51a:	f1 2c       	mov	r15, r1
     51c:	ec 0e       	add	r14, r28
     51e:	fd 1e       	adc	r15, r29
     520:	ce 01       	movw	r24, r28
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	b7 01       	movw	r22, r14
     526:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     52a:	8e 01       	movw	r16, r28
     52c:	0f 5e       	subi	r16, 0xEF	; 239
     52e:	1f 4f       	sbci	r17, 0xFF	; 255
     530:	ce 01       	movw	r24, r28
     532:	05 96       	adiw	r24, 0x05	; 5
     534:	b8 01       	movw	r22, r16
     536:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     53a:	c7 01       	movw	r24, r14
     53c:	b8 01       	movw	r22, r16
     53e:	ae 01       	movw	r20, r28
     540:	47 5e       	subi	r20, 0xE7	; 231
     542:	5f 4f       	sbci	r21, 0xFF	; 255
     544:	0e 94 00 01 	call	0x200	; 0x200 <_fpadd_parts>
     548:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__pack_f>
     54c:	a0 96       	adiw	r28, 0x20	; 32
     54e:	e6 e0       	ldi	r30, 0x06	; 6
     550:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__epilogue_restores__+0x18>

00000554 <__mulsf3>:
     554:	a0 e2       	ldi	r26, 0x20	; 32
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	e0 eb       	ldi	r30, 0xB0	; 176
     55a:	f2 e0       	ldi	r31, 0x02	; 2
     55c:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__prologue_saves__>
     560:	69 83       	std	Y+1, r22	; 0x01
     562:	7a 83       	std	Y+2, r23	; 0x02
     564:	8b 83       	std	Y+3, r24	; 0x03
     566:	9c 83       	std	Y+4, r25	; 0x04
     568:	2d 83       	std	Y+5, r18	; 0x05
     56a:	3e 83       	std	Y+6, r19	; 0x06
     56c:	4f 83       	std	Y+7, r20	; 0x07
     56e:	58 87       	std	Y+8, r21	; 0x08
     570:	ce 01       	movw	r24, r28
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	be 01       	movw	r22, r28
     576:	67 5f       	subi	r22, 0xF7	; 247
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     57e:	ce 01       	movw	r24, r28
     580:	05 96       	adiw	r24, 0x05	; 5
     582:	be 01       	movw	r22, r28
     584:	6f 5e       	subi	r22, 0xEF	; 239
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     58c:	99 85       	ldd	r25, Y+9	; 0x09
     58e:	92 30       	cpi	r25, 0x02	; 2
     590:	88 f0       	brcs	.+34     	; 0x5b4 <__mulsf3+0x60>
     592:	89 89       	ldd	r24, Y+17	; 0x11
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	c8 f0       	brcs	.+50     	; 0x5ca <__mulsf3+0x76>
     598:	94 30       	cpi	r25, 0x04	; 4
     59a:	19 f4       	brne	.+6      	; 0x5a2 <__mulsf3+0x4e>
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	51 f4       	brne	.+20     	; 0x5b4 <__mulsf3+0x60>
     5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__mulsf3+0x56>
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	29 f4       	brne	.+10     	; 0x5b0 <__mulsf3+0x5c>
     5a6:	92 30       	cpi	r25, 0x02	; 2
     5a8:	81 f4       	brne	.+32     	; 0x5ca <__mulsf3+0x76>
     5aa:	8d e7       	ldi	r24, 0x7D	; 125
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	c6 c0       	rjmp	.+396    	; 0x73c <__mulsf3+0x1e8>
     5b0:	92 30       	cpi	r25, 0x02	; 2
     5b2:	49 f4       	brne	.+18     	; 0x5c6 <__mulsf3+0x72>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b8:	8a 89       	ldd	r24, Y+18	; 0x12
     5ba:	98 13       	cpse	r25, r24
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	2a 87       	std	Y+10, r18	; 0x0a
     5c0:	ce 01       	movw	r24, r28
     5c2:	09 96       	adiw	r24, 0x09	; 9
     5c4:	bb c0       	rjmp	.+374    	; 0x73c <__mulsf3+0x1e8>
     5c6:	82 30       	cpi	r24, 0x02	; 2
     5c8:	49 f4       	brne	.+18     	; 0x5dc <__mulsf3+0x88>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ce:	8a 89       	ldd	r24, Y+18	; 0x12
     5d0:	98 13       	cpse	r25, r24
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	2a 8b       	std	Y+18, r18	; 0x12
     5d6:	ce 01       	movw	r24, r28
     5d8:	41 96       	adiw	r24, 0x11	; 17
     5da:	b0 c0       	rjmp	.+352    	; 0x73c <__mulsf3+0x1e8>
     5dc:	2d 84       	ldd	r2, Y+13	; 0x0d
     5de:	3e 84       	ldd	r3, Y+14	; 0x0e
     5e0:	4f 84       	ldd	r4, Y+15	; 0x0f
     5e2:	58 88       	ldd	r5, Y+16	; 0x10
     5e4:	6d 88       	ldd	r6, Y+21	; 0x15
     5e6:	7e 88       	ldd	r7, Y+22	; 0x16
     5e8:	8f 88       	ldd	r8, Y+23	; 0x17
     5ea:	98 8c       	ldd	r9, Y+24	; 0x18
     5ec:	ee 24       	eor	r14, r14
     5ee:	ff 24       	eor	r15, r15
     5f0:	87 01       	movw	r16, r14
     5f2:	aa 24       	eor	r10, r10
     5f4:	bb 24       	eor	r11, r11
     5f6:	65 01       	movw	r12, r10
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	e0 e0       	ldi	r30, 0x00	; 0
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	c1 01       	movw	r24, r2
     606:	81 70       	andi	r24, 0x01	; 1
     608:	90 70       	andi	r25, 0x00	; 0
     60a:	89 2b       	or	r24, r25
     60c:	e9 f0       	breq	.+58     	; 0x648 <__mulsf3+0xf4>
     60e:	e6 0c       	add	r14, r6
     610:	f7 1c       	adc	r15, r7
     612:	08 1d       	adc	r16, r8
     614:	19 1d       	adc	r17, r9
     616:	9a 01       	movw	r18, r20
     618:	ab 01       	movw	r20, r22
     61a:	2a 0d       	add	r18, r10
     61c:	3b 1d       	adc	r19, r11
     61e:	4c 1d       	adc	r20, r12
     620:	5d 1d       	adc	r21, r13
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	a0 e0       	ldi	r26, 0x00	; 0
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	e6 14       	cp	r14, r6
     62c:	f7 04       	cpc	r15, r7
     62e:	08 05       	cpc	r16, r8
     630:	19 05       	cpc	r17, r9
     632:	20 f4       	brcc	.+8      	; 0x63c <__mulsf3+0xe8>
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	a0 e0       	ldi	r26, 0x00	; 0
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	ba 01       	movw	r22, r20
     63e:	a9 01       	movw	r20, r18
     640:	48 0f       	add	r20, r24
     642:	59 1f       	adc	r21, r25
     644:	6a 1f       	adc	r22, r26
     646:	7b 1f       	adc	r23, r27
     648:	aa 0c       	add	r10, r10
     64a:	bb 1c       	adc	r11, r11
     64c:	cc 1c       	adc	r12, r12
     64e:	dd 1c       	adc	r13, r13
     650:	97 fe       	sbrs	r9, 7
     652:	08 c0       	rjmp	.+16     	; 0x664 <__mulsf3+0x110>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	a0 e0       	ldi	r26, 0x00	; 0
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	a8 2a       	or	r10, r24
     65e:	b9 2a       	or	r11, r25
     660:	ca 2a       	or	r12, r26
     662:	db 2a       	or	r13, r27
     664:	31 96       	adiw	r30, 0x01	; 1
     666:	e0 32       	cpi	r30, 0x20	; 32
     668:	f1 05       	cpc	r31, r1
     66a:	49 f0       	breq	.+18     	; 0x67e <__mulsf3+0x12a>
     66c:	66 0c       	add	r6, r6
     66e:	77 1c       	adc	r7, r7
     670:	88 1c       	adc	r8, r8
     672:	99 1c       	adc	r9, r9
     674:	56 94       	lsr	r5
     676:	47 94       	ror	r4
     678:	37 94       	ror	r3
     67a:	27 94       	ror	r2
     67c:	c3 cf       	rjmp	.-122    	; 0x604 <__mulsf3+0xb0>
     67e:	fa 85       	ldd	r31, Y+10	; 0x0a
     680:	ea 89       	ldd	r30, Y+18	; 0x12
     682:	2b 89       	ldd	r18, Y+19	; 0x13
     684:	3c 89       	ldd	r19, Y+20	; 0x14
     686:	8b 85       	ldd	r24, Y+11	; 0x0b
     688:	9c 85       	ldd	r25, Y+12	; 0x0c
     68a:	28 0f       	add	r18, r24
     68c:	39 1f       	adc	r19, r25
     68e:	2e 5f       	subi	r18, 0xFE	; 254
     690:	3f 4f       	sbci	r19, 0xFF	; 255
     692:	17 c0       	rjmp	.+46     	; 0x6c2 <__mulsf3+0x16e>
     694:	ca 01       	movw	r24, r20
     696:	81 70       	andi	r24, 0x01	; 1
     698:	90 70       	andi	r25, 0x00	; 0
     69a:	89 2b       	or	r24, r25
     69c:	61 f0       	breq	.+24     	; 0x6b6 <__mulsf3+0x162>
     69e:	16 95       	lsr	r17
     6a0:	07 95       	ror	r16
     6a2:	f7 94       	ror	r15
     6a4:	e7 94       	ror	r14
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	a0 e0       	ldi	r26, 0x00	; 0
     6ac:	b0 e8       	ldi	r27, 0x80	; 128
     6ae:	e8 2a       	or	r14, r24
     6b0:	f9 2a       	or	r15, r25
     6b2:	0a 2b       	or	r16, r26
     6b4:	1b 2b       	or	r17, r27
     6b6:	76 95       	lsr	r23
     6b8:	67 95       	ror	r22
     6ba:	57 95       	ror	r21
     6bc:	47 95       	ror	r20
     6be:	2f 5f       	subi	r18, 0xFF	; 255
     6c0:	3f 4f       	sbci	r19, 0xFF	; 255
     6c2:	77 fd       	sbrc	r23, 7
     6c4:	e7 cf       	rjmp	.-50     	; 0x694 <__mulsf3+0x140>
     6c6:	0c c0       	rjmp	.+24     	; 0x6e0 <__mulsf3+0x18c>
     6c8:	44 0f       	add	r20, r20
     6ca:	55 1f       	adc	r21, r21
     6cc:	66 1f       	adc	r22, r22
     6ce:	77 1f       	adc	r23, r23
     6d0:	17 fd       	sbrc	r17, 7
     6d2:	41 60       	ori	r20, 0x01	; 1
     6d4:	ee 0c       	add	r14, r14
     6d6:	ff 1c       	adc	r15, r15
     6d8:	00 1f       	adc	r16, r16
     6da:	11 1f       	adc	r17, r17
     6dc:	21 50       	subi	r18, 0x01	; 1
     6de:	30 40       	sbci	r19, 0x00	; 0
     6e0:	40 30       	cpi	r20, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	59 07       	cpc	r21, r25
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	69 07       	cpc	r22, r25
     6ea:	90 e4       	ldi	r25, 0x40	; 64
     6ec:	79 07       	cpc	r23, r25
     6ee:	60 f3       	brcs	.-40     	; 0x6c8 <__mulsf3+0x174>
     6f0:	2b 8f       	std	Y+27, r18	; 0x1b
     6f2:	3c 8f       	std	Y+28, r19	; 0x1c
     6f4:	db 01       	movw	r26, r22
     6f6:	ca 01       	movw	r24, r20
     6f8:	8f 77       	andi	r24, 0x7F	; 127
     6fa:	90 70       	andi	r25, 0x00	; 0
     6fc:	a0 70       	andi	r26, 0x00	; 0
     6fe:	b0 70       	andi	r27, 0x00	; 0
     700:	80 34       	cpi	r24, 0x40	; 64
     702:	91 05       	cpc	r25, r1
     704:	a1 05       	cpc	r26, r1
     706:	b1 05       	cpc	r27, r1
     708:	61 f4       	brne	.+24     	; 0x722 <__mulsf3+0x1ce>
     70a:	47 fd       	sbrc	r20, 7
     70c:	0a c0       	rjmp	.+20     	; 0x722 <__mulsf3+0x1ce>
     70e:	e1 14       	cp	r14, r1
     710:	f1 04       	cpc	r15, r1
     712:	01 05       	cpc	r16, r1
     714:	11 05       	cpc	r17, r1
     716:	29 f0       	breq	.+10     	; 0x722 <__mulsf3+0x1ce>
     718:	40 5c       	subi	r20, 0xC0	; 192
     71a:	5f 4f       	sbci	r21, 0xFF	; 255
     71c:	6f 4f       	sbci	r22, 0xFF	; 255
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	40 78       	andi	r20, 0x80	; 128
     722:	1a 8e       	std	Y+26, r1	; 0x1a
     724:	fe 17       	cp	r31, r30
     726:	11 f0       	breq	.+4      	; 0x72c <__mulsf3+0x1d8>
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	8a 8f       	std	Y+26, r24	; 0x1a
     72c:	4d 8f       	std	Y+29, r20	; 0x1d
     72e:	5e 8f       	std	Y+30, r21	; 0x1e
     730:	6f 8f       	std	Y+31, r22	; 0x1f
     732:	78 a3       	std	Y+32, r23	; 0x20
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	89 8f       	std	Y+25, r24	; 0x19
     738:	ce 01       	movw	r24, r28
     73a:	49 96       	adiw	r24, 0x19	; 25
     73c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__pack_f>
     740:	a0 96       	adiw	r28, 0x20	; 32
     742:	e2 e1       	ldi	r30, 0x12	; 18
     744:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__epilogue_restores__>

00000748 <__divsf3>:
     748:	a8 e1       	ldi	r26, 0x18	; 24
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	ea ea       	ldi	r30, 0xAA	; 170
     74e:	f3 e0       	ldi	r31, 0x03	; 3
     750:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__prologue_saves__+0x10>
     754:	69 83       	std	Y+1, r22	; 0x01
     756:	7a 83       	std	Y+2, r23	; 0x02
     758:	8b 83       	std	Y+3, r24	; 0x03
     75a:	9c 83       	std	Y+4, r25	; 0x04
     75c:	2d 83       	std	Y+5, r18	; 0x05
     75e:	3e 83       	std	Y+6, r19	; 0x06
     760:	4f 83       	std	Y+7, r20	; 0x07
     762:	58 87       	std	Y+8, r21	; 0x08
     764:	b9 e0       	ldi	r27, 0x09	; 9
     766:	eb 2e       	mov	r14, r27
     768:	f1 2c       	mov	r15, r1
     76a:	ec 0e       	add	r14, r28
     76c:	fd 1e       	adc	r15, r29
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	b7 01       	movw	r22, r14
     774:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     778:	8e 01       	movw	r16, r28
     77a:	0f 5e       	subi	r16, 0xEF	; 239
     77c:	1f 4f       	sbci	r17, 0xFF	; 255
     77e:	ce 01       	movw	r24, r28
     780:	05 96       	adiw	r24, 0x05	; 5
     782:	b8 01       	movw	r22, r16
     784:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     788:	29 85       	ldd	r18, Y+9	; 0x09
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	08 f4       	brcc	.+2      	; 0x790 <__divsf3+0x48>
     78e:	7e c0       	rjmp	.+252    	; 0x88c <__stack+0x2d>
     790:	39 89       	ldd	r19, Y+17	; 0x11
     792:	32 30       	cpi	r19, 0x02	; 2
     794:	10 f4       	brcc	.+4      	; 0x79a <__divsf3+0x52>
     796:	b8 01       	movw	r22, r16
     798:	7c c0       	rjmp	.+248    	; 0x892 <__stack+0x33>
     79a:	8a 85       	ldd	r24, Y+10	; 0x0a
     79c:	9a 89       	ldd	r25, Y+18	; 0x12
     79e:	89 27       	eor	r24, r25
     7a0:	8a 87       	std	Y+10, r24	; 0x0a
     7a2:	24 30       	cpi	r18, 0x04	; 4
     7a4:	11 f0       	breq	.+4      	; 0x7aa <__divsf3+0x62>
     7a6:	22 30       	cpi	r18, 0x02	; 2
     7a8:	31 f4       	brne	.+12     	; 0x7b6 <__divsf3+0x6e>
     7aa:	23 17       	cp	r18, r19
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <__divsf3+0x68>
     7ae:	6e c0       	rjmp	.+220    	; 0x88c <__stack+0x2d>
     7b0:	6d e7       	ldi	r22, 0x7D	; 125
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	6e c0       	rjmp	.+220    	; 0x892 <__stack+0x33>
     7b6:	34 30       	cpi	r19, 0x04	; 4
     7b8:	39 f4       	brne	.+14     	; 0x7c8 <__divsf3+0x80>
     7ba:	1d 86       	std	Y+13, r1	; 0x0d
     7bc:	1e 86       	std	Y+14, r1	; 0x0e
     7be:	1f 86       	std	Y+15, r1	; 0x0f
     7c0:	18 8a       	std	Y+16, r1	; 0x10
     7c2:	1c 86       	std	Y+12, r1	; 0x0c
     7c4:	1b 86       	std	Y+11, r1	; 0x0b
     7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <__divsf3+0x88>
     7c8:	32 30       	cpi	r19, 0x02	; 2
     7ca:	21 f4       	brne	.+8      	; 0x7d4 <__divsf3+0x8c>
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	89 87       	std	Y+9, r24	; 0x09
     7d0:	b7 01       	movw	r22, r14
     7d2:	5f c0       	rjmp	.+190    	; 0x892 <__stack+0x33>
     7d4:	2b 85       	ldd	r18, Y+11	; 0x0b
     7d6:	3c 85       	ldd	r19, Y+12	; 0x0c
     7d8:	8b 89       	ldd	r24, Y+19	; 0x13
     7da:	9c 89       	ldd	r25, Y+20	; 0x14
     7dc:	28 1b       	sub	r18, r24
     7de:	39 0b       	sbc	r19, r25
     7e0:	3c 87       	std	Y+12, r19	; 0x0c
     7e2:	2b 87       	std	Y+11, r18	; 0x0b
     7e4:	ed 84       	ldd	r14, Y+13	; 0x0d
     7e6:	fe 84       	ldd	r15, Y+14	; 0x0e
     7e8:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ea:	18 89       	ldd	r17, Y+16	; 0x10
     7ec:	ad 88       	ldd	r10, Y+21	; 0x15
     7ee:	be 88       	ldd	r11, Y+22	; 0x16
     7f0:	cf 88       	ldd	r12, Y+23	; 0x17
     7f2:	d8 8c       	ldd	r13, Y+24	; 0x18
     7f4:	ea 14       	cp	r14, r10
     7f6:	fb 04       	cpc	r15, r11
     7f8:	0c 05       	cpc	r16, r12
     7fa:	1d 05       	cpc	r17, r13
     7fc:	40 f4       	brcc	.+16     	; 0x80e <__divsf3+0xc6>
     7fe:	ee 0c       	add	r14, r14
     800:	ff 1c       	adc	r15, r15
     802:	00 1f       	adc	r16, r16
     804:	11 1f       	adc	r17, r17
     806:	21 50       	subi	r18, 0x01	; 1
     808:	30 40       	sbci	r19, 0x00	; 0
     80a:	3c 87       	std	Y+12, r19	; 0x0c
     80c:	2b 87       	std	Y+11, r18	; 0x0b
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	ea 14       	cp	r14, r10
     824:	fb 04       	cpc	r15, r11
     826:	0c 05       	cpc	r16, r12
     828:	1d 05       	cpc	r17, r13
     82a:	40 f0       	brcs	.+16     	; 0x83c <__divsf3+0xf4>
     82c:	28 2b       	or	r18, r24
     82e:	39 2b       	or	r19, r25
     830:	4a 2b       	or	r20, r26
     832:	5b 2b       	or	r21, r27
     834:	ea 18       	sub	r14, r10
     836:	fb 08       	sbc	r15, r11
     838:	0c 09       	sbc	r16, r12
     83a:	1d 09       	sbc	r17, r13
     83c:	b6 95       	lsr	r27
     83e:	a7 95       	ror	r26
     840:	97 95       	ror	r25
     842:	87 95       	ror	r24
     844:	ee 0c       	add	r14, r14
     846:	ff 1c       	adc	r15, r15
     848:	00 1f       	adc	r16, r16
     84a:	11 1f       	adc	r17, r17
     84c:	6f 5f       	subi	r22, 0xFF	; 255
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
     850:	6f 31       	cpi	r22, 0x1F	; 31
     852:	71 05       	cpc	r23, r1
     854:	31 f7       	brne	.-52     	; 0x822 <__divsf3+0xda>
     856:	da 01       	movw	r26, r20
     858:	c9 01       	movw	r24, r18
     85a:	8f 77       	andi	r24, 0x7F	; 127
     85c:	90 70       	andi	r25, 0x00	; 0
     85e:	a0 70       	andi	r26, 0x00	; 0
     860:	b0 70       	andi	r27, 0x00	; 0
     862:	80 34       	cpi	r24, 0x40	; 64
     864:	91 05       	cpc	r25, r1
     866:	a1 05       	cpc	r26, r1
     868:	b1 05       	cpc	r27, r1
     86a:	61 f4       	brne	.+24     	; 0x884 <__stack+0x25>
     86c:	27 fd       	sbrc	r18, 7
     86e:	0a c0       	rjmp	.+20     	; 0x884 <__stack+0x25>
     870:	e1 14       	cp	r14, r1
     872:	f1 04       	cpc	r15, r1
     874:	01 05       	cpc	r16, r1
     876:	11 05       	cpc	r17, r1
     878:	29 f0       	breq	.+10     	; 0x884 <__stack+0x25>
     87a:	20 5c       	subi	r18, 0xC0	; 192
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	4f 4f       	sbci	r20, 0xFF	; 255
     880:	5f 4f       	sbci	r21, 0xFF	; 255
     882:	20 78       	andi	r18, 0x80	; 128
     884:	2d 87       	std	Y+13, r18	; 0x0d
     886:	3e 87       	std	Y+14, r19	; 0x0e
     888:	4f 87       	std	Y+15, r20	; 0x0f
     88a:	58 8b       	std	Y+16, r21	; 0x10
     88c:	be 01       	movw	r22, r28
     88e:	67 5f       	subi	r22, 0xF7	; 247
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	cb 01       	movw	r24, r22
     894:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__pack_f>
     898:	68 96       	adiw	r28, 0x18	; 24
     89a:	ea e0       	ldi	r30, 0x0A	; 10
     89c:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__epilogue_restores__+0x10>

000008a0 <__gtsf2>:
     8a0:	a8 e1       	ldi	r26, 0x18	; 24
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	e6 e5       	ldi	r30, 0x56	; 86
     8a6:	f4 e0       	ldi	r31, 0x04	; 4
     8a8:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__prologue_saves__+0x18>
     8ac:	69 83       	std	Y+1, r22	; 0x01
     8ae:	7a 83       	std	Y+2, r23	; 0x02
     8b0:	8b 83       	std	Y+3, r24	; 0x03
     8b2:	9c 83       	std	Y+4, r25	; 0x04
     8b4:	2d 83       	std	Y+5, r18	; 0x05
     8b6:	3e 83       	std	Y+6, r19	; 0x06
     8b8:	4f 83       	std	Y+7, r20	; 0x07
     8ba:	58 87       	std	Y+8, r21	; 0x08
     8bc:	89 e0       	ldi	r24, 0x09	; 9
     8be:	e8 2e       	mov	r14, r24
     8c0:	f1 2c       	mov	r15, r1
     8c2:	ec 0e       	add	r14, r28
     8c4:	fd 1e       	adc	r15, r29
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     8d0:	8e 01       	movw	r16, r28
     8d2:	0f 5e       	subi	r16, 0xEF	; 239
     8d4:	1f 4f       	sbci	r17, 0xFF	; 255
     8d6:	ce 01       	movw	r24, r28
     8d8:	05 96       	adiw	r24, 0x05	; 5
     8da:	b8 01       	movw	r22, r16
     8dc:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     8e0:	89 85       	ldd	r24, Y+9	; 0x09
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	40 f0       	brcs	.+16     	; 0x8f6 <__gtsf2+0x56>
     8e6:	89 89       	ldd	r24, Y+17	; 0x11
     8e8:	82 30       	cpi	r24, 0x02	; 2
     8ea:	28 f0       	brcs	.+10     	; 0x8f6 <__gtsf2+0x56>
     8ec:	c7 01       	movw	r24, r14
     8ee:	b8 01       	movw	r22, r16
     8f0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fpcmp_parts_f>
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <__gtsf2+0x58>
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	68 96       	adiw	r28, 0x18	; 24
     8fa:	e6 e0       	ldi	r30, 0x06	; 6
     8fc:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__epilogue_restores__+0x18>

00000900 <__gesf2>:
     900:	a8 e1       	ldi	r26, 0x18	; 24
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	e6 e8       	ldi	r30, 0x86	; 134
     906:	f4 e0       	ldi	r31, 0x04	; 4
     908:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__prologue_saves__+0x18>
     90c:	69 83       	std	Y+1, r22	; 0x01
     90e:	7a 83       	std	Y+2, r23	; 0x02
     910:	8b 83       	std	Y+3, r24	; 0x03
     912:	9c 83       	std	Y+4, r25	; 0x04
     914:	2d 83       	std	Y+5, r18	; 0x05
     916:	3e 83       	std	Y+6, r19	; 0x06
     918:	4f 83       	std	Y+7, r20	; 0x07
     91a:	58 87       	std	Y+8, r21	; 0x08
     91c:	89 e0       	ldi	r24, 0x09	; 9
     91e:	e8 2e       	mov	r14, r24
     920:	f1 2c       	mov	r15, r1
     922:	ec 0e       	add	r14, r28
     924:	fd 1e       	adc	r15, r29
     926:	ce 01       	movw	r24, r28
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     930:	8e 01       	movw	r16, r28
     932:	0f 5e       	subi	r16, 0xEF	; 239
     934:	1f 4f       	sbci	r17, 0xFF	; 255
     936:	ce 01       	movw	r24, r28
     938:	05 96       	adiw	r24, 0x05	; 5
     93a:	b8 01       	movw	r22, r16
     93c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     940:	89 85       	ldd	r24, Y+9	; 0x09
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	40 f0       	brcs	.+16     	; 0x956 <__gesf2+0x56>
     946:	89 89       	ldd	r24, Y+17	; 0x11
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	28 f0       	brcs	.+10     	; 0x956 <__gesf2+0x56>
     94c:	c7 01       	movw	r24, r14
     94e:	b8 01       	movw	r22, r16
     950:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fpcmp_parts_f>
     954:	01 c0       	rjmp	.+2      	; 0x958 <__gesf2+0x58>
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	68 96       	adiw	r28, 0x18	; 24
     95a:	e6 e0       	ldi	r30, 0x06	; 6
     95c:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__epilogue_restores__+0x18>

00000960 <__ltsf2>:
     960:	a8 e1       	ldi	r26, 0x18	; 24
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	e6 eb       	ldi	r30, 0xB6	; 182
     966:	f4 e0       	ldi	r31, 0x04	; 4
     968:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__prologue_saves__+0x18>
     96c:	69 83       	std	Y+1, r22	; 0x01
     96e:	7a 83       	std	Y+2, r23	; 0x02
     970:	8b 83       	std	Y+3, r24	; 0x03
     972:	9c 83       	std	Y+4, r25	; 0x04
     974:	2d 83       	std	Y+5, r18	; 0x05
     976:	3e 83       	std	Y+6, r19	; 0x06
     978:	4f 83       	std	Y+7, r20	; 0x07
     97a:	58 87       	std	Y+8, r21	; 0x08
     97c:	89 e0       	ldi	r24, 0x09	; 9
     97e:	e8 2e       	mov	r14, r24
     980:	f1 2c       	mov	r15, r1
     982:	ec 0e       	add	r14, r28
     984:	fd 1e       	adc	r15, r29
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     990:	8e 01       	movw	r16, r28
     992:	0f 5e       	subi	r16, 0xEF	; 239
     994:	1f 4f       	sbci	r17, 0xFF	; 255
     996:	ce 01       	movw	r24, r28
     998:	05 96       	adiw	r24, 0x05	; 5
     99a:	b8 01       	movw	r22, r16
     99c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     9a0:	89 85       	ldd	r24, Y+9	; 0x09
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	40 f0       	brcs	.+16     	; 0x9b6 <__ltsf2+0x56>
     9a6:	89 89       	ldd	r24, Y+17	; 0x11
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	28 f0       	brcs	.+10     	; 0x9b6 <__ltsf2+0x56>
     9ac:	c7 01       	movw	r24, r14
     9ae:	b8 01       	movw	r22, r16
     9b0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fpcmp_parts_f>
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <__ltsf2+0x58>
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	68 96       	adiw	r28, 0x18	; 24
     9ba:	e6 e0       	ldi	r30, 0x06	; 6
     9bc:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__epilogue_restores__+0x18>

000009c0 <__floatsisf>:
     9c0:	a8 e0       	ldi	r26, 0x08	; 8
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	e6 ee       	ldi	r30, 0xE6	; 230
     9c6:	f4 e0       	ldi	r31, 0x04	; 4
     9c8:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__prologue_saves__+0x12>
     9cc:	9b 01       	movw	r18, r22
     9ce:	ac 01       	movw	r20, r24
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	da 01       	movw	r26, r20
     9d6:	c9 01       	movw	r24, r18
     9d8:	88 27       	eor	r24, r24
     9da:	b7 fd       	sbrc	r27, 7
     9dc:	83 95       	inc	r24
     9de:	99 27       	eor	r25, r25
     9e0:	aa 27       	eor	r26, r26
     9e2:	bb 27       	eor	r27, r27
     9e4:	b8 2e       	mov	r11, r24
     9e6:	21 15       	cp	r18, r1
     9e8:	31 05       	cpc	r19, r1
     9ea:	41 05       	cpc	r20, r1
     9ec:	51 05       	cpc	r21, r1
     9ee:	19 f4       	brne	.+6      	; 0x9f6 <__floatsisf+0x36>
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	3a c0       	rjmp	.+116    	; 0xa6a <__floatsisf+0xaa>
     9f6:	88 23       	and	r24, r24
     9f8:	a9 f0       	breq	.+42     	; 0xa24 <__floatsisf+0x64>
     9fa:	20 30       	cpi	r18, 0x00	; 0
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	38 07       	cpc	r19, r24
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	48 07       	cpc	r20, r24
     a04:	80 e8       	ldi	r24, 0x80	; 128
     a06:	58 07       	cpc	r21, r24
     a08:	29 f4       	brne	.+10     	; 0xa14 <__floatsisf+0x54>
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	9f ec       	ldi	r25, 0xCF	; 207
     a12:	30 c0       	rjmp	.+96     	; 0xa74 <__floatsisf+0xb4>
     a14:	ee 24       	eor	r14, r14
     a16:	ff 24       	eor	r15, r15
     a18:	87 01       	movw	r16, r14
     a1a:	e2 1a       	sub	r14, r18
     a1c:	f3 0a       	sbc	r15, r19
     a1e:	04 0b       	sbc	r16, r20
     a20:	15 0b       	sbc	r17, r21
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <__floatsisf+0x68>
     a24:	79 01       	movw	r14, r18
     a26:	8a 01       	movw	r16, r20
     a28:	8e e1       	ldi	r24, 0x1E	; 30
     a2a:	c8 2e       	mov	r12, r24
     a2c:	d1 2c       	mov	r13, r1
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	ed 82       	std	Y+5, r14	; 0x05
     a34:	fe 82       	std	Y+6, r15	; 0x06
     a36:	0f 83       	std	Y+7, r16	; 0x07
     a38:	18 87       	std	Y+8, r17	; 0x08
     a3a:	c8 01       	movw	r24, r16
     a3c:	b7 01       	movw	r22, r14
     a3e:	0e 94 0b 06 	call	0xc16	; 0xc16 <__clzsi2>
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	18 16       	cp	r1, r24
     a46:	19 06       	cpc	r1, r25
     a48:	84 f4       	brge	.+32     	; 0xa6a <__floatsisf+0xaa>
     a4a:	08 2e       	mov	r0, r24
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <__floatsisf+0x96>
     a4e:	ee 0c       	add	r14, r14
     a50:	ff 1c       	adc	r15, r15
     a52:	00 1f       	adc	r16, r16
     a54:	11 1f       	adc	r17, r17
     a56:	0a 94       	dec	r0
     a58:	d2 f7       	brpl	.-12     	; 0xa4e <__floatsisf+0x8e>
     a5a:	ed 82       	std	Y+5, r14	; 0x05
     a5c:	fe 82       	std	Y+6, r15	; 0x06
     a5e:	0f 83       	std	Y+7, r16	; 0x07
     a60:	18 87       	std	Y+8, r17	; 0x08
     a62:	c8 1a       	sub	r12, r24
     a64:	d9 0a       	sbc	r13, r25
     a66:	dc 82       	std	Y+4, r13	; 0x04
     a68:	cb 82       	std	Y+3, r12	; 0x03
     a6a:	ba 82       	std	Y+2, r11	; 0x02
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__pack_f>
     a74:	28 96       	adiw	r28, 0x08	; 8
     a76:	e9 e0       	ldi	r30, 0x09	; 9
     a78:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__epilogue_restores__+0x12>

00000a7c <__fixsfsi>:
     a7c:	ac e0       	ldi	r26, 0x0C	; 12
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e4 e4       	ldi	r30, 0x44	; 68
     a82:	f5 e0       	ldi	r31, 0x05	; 5
     a84:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__+0x20>
     a88:	69 83       	std	Y+1, r22	; 0x01
     a8a:	7a 83       	std	Y+2, r23	; 0x02
     a8c:	8b 83       	std	Y+3, r24	; 0x03
     a8e:	9c 83       	std	Y+4, r25	; 0x04
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	be 01       	movw	r22, r28
     a96:	6b 5f       	subi	r22, 0xFB	; 251
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__unpack_f>
     a9e:	8d 81       	ldd	r24, Y+5	; 0x05
     aa0:	82 30       	cpi	r24, 0x02	; 2
     aa2:	61 f1       	breq	.+88     	; 0xafc <__fixsfsi+0x80>
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	50 f1       	brcs	.+84     	; 0xafc <__fixsfsi+0x80>
     aa8:	84 30       	cpi	r24, 0x04	; 4
     aaa:	21 f4       	brne	.+8      	; 0xab4 <__fixsfsi+0x38>
     aac:	8e 81       	ldd	r24, Y+6	; 0x06
     aae:	88 23       	and	r24, r24
     ab0:	51 f1       	breq	.+84     	; 0xb06 <__fixsfsi+0x8a>
     ab2:	2e c0       	rjmp	.+92     	; 0xb10 <__fixsfsi+0x94>
     ab4:	2f 81       	ldd	r18, Y+7	; 0x07
     ab6:	38 85       	ldd	r19, Y+8	; 0x08
     ab8:	37 fd       	sbrc	r19, 7
     aba:	20 c0       	rjmp	.+64     	; 0xafc <__fixsfsi+0x80>
     abc:	6e 81       	ldd	r22, Y+6	; 0x06
     abe:	2f 31       	cpi	r18, 0x1F	; 31
     ac0:	31 05       	cpc	r19, r1
     ac2:	1c f0       	brlt	.+6      	; 0xaca <__fixsfsi+0x4e>
     ac4:	66 23       	and	r22, r22
     ac6:	f9 f0       	breq	.+62     	; 0xb06 <__fixsfsi+0x8a>
     ac8:	23 c0       	rjmp	.+70     	; 0xb10 <__fixsfsi+0x94>
     aca:	8e e1       	ldi	r24, 0x1E	; 30
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	82 1b       	sub	r24, r18
     ad0:	93 0b       	sbc	r25, r19
     ad2:	29 85       	ldd	r18, Y+9	; 0x09
     ad4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ad6:	4b 85       	ldd	r20, Y+11	; 0x0b
     ad8:	5c 85       	ldd	r21, Y+12	; 0x0c
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <__fixsfsi+0x68>
     adc:	56 95       	lsr	r21
     ade:	47 95       	ror	r20
     ae0:	37 95       	ror	r19
     ae2:	27 95       	ror	r18
     ae4:	8a 95       	dec	r24
     ae6:	d2 f7       	brpl	.-12     	; 0xadc <__fixsfsi+0x60>
     ae8:	66 23       	and	r22, r22
     aea:	b1 f0       	breq	.+44     	; 0xb18 <__fixsfsi+0x9c>
     aec:	50 95       	com	r21
     aee:	40 95       	com	r20
     af0:	30 95       	com	r19
     af2:	21 95       	neg	r18
     af4:	3f 4f       	sbci	r19, 0xFF	; 255
     af6:	4f 4f       	sbci	r20, 0xFF	; 255
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	0e c0       	rjmp	.+28     	; 0xb18 <__fixsfsi+0x9c>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__fixsfsi+0x9c>
     b06:	2f ef       	ldi	r18, 0xFF	; 255
     b08:	3f ef       	ldi	r19, 0xFF	; 255
     b0a:	4f ef       	ldi	r20, 0xFF	; 255
     b0c:	5f e7       	ldi	r21, 0x7F	; 127
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__fixsfsi+0x9c>
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	50 e8       	ldi	r21, 0x80	; 128
     b18:	b9 01       	movw	r22, r18
     b1a:	ca 01       	movw	r24, r20
     b1c:	2c 96       	adiw	r28, 0x0c	; 12
     b1e:	e2 e0       	ldi	r30, 0x02	; 2
     b20:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__+0x20>

00000b24 <__floatunsisf>:
     b24:	a8 e0       	ldi	r26, 0x08	; 8
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	e8 e9       	ldi	r30, 0x98	; 152
     b2a:	f5 e0       	ldi	r31, 0x05	; 5
     b2c:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__prologue_saves__+0x10>
     b30:	7b 01       	movw	r14, r22
     b32:	8c 01       	movw	r16, r24
     b34:	61 15       	cp	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	81 05       	cpc	r24, r1
     b3a:	91 05       	cpc	r25, r1
     b3c:	19 f4       	brne	.+6      	; 0xb44 <__floatunsisf+0x20>
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	89 83       	std	Y+1, r24	; 0x01
     b42:	60 c0       	rjmp	.+192    	; 0xc04 <__floatunsisf+0xe0>
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	8e e1       	ldi	r24, 0x1E	; 30
     b4a:	c8 2e       	mov	r12, r24
     b4c:	d1 2c       	mov	r13, r1
     b4e:	dc 82       	std	Y+4, r13	; 0x04
     b50:	cb 82       	std	Y+3, r12	; 0x03
     b52:	ed 82       	std	Y+5, r14	; 0x05
     b54:	fe 82       	std	Y+6, r15	; 0x06
     b56:	0f 83       	std	Y+7, r16	; 0x07
     b58:	18 87       	std	Y+8, r17	; 0x08
     b5a:	c8 01       	movw	r24, r16
     b5c:	b7 01       	movw	r22, r14
     b5e:	0e 94 0b 06 	call	0xc16	; 0xc16 <__clzsi2>
     b62:	fc 01       	movw	r30, r24
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	f7 ff       	sbrs	r31, 7
     b68:	3b c0       	rjmp	.+118    	; 0xbe0 <__floatunsisf+0xbc>
     b6a:	22 27       	eor	r18, r18
     b6c:	33 27       	eor	r19, r19
     b6e:	2e 1b       	sub	r18, r30
     b70:	3f 0b       	sbc	r19, r31
     b72:	57 01       	movw	r10, r14
     b74:	68 01       	movw	r12, r16
     b76:	02 2e       	mov	r0, r18
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__floatunsisf+0x5e>
     b7a:	d6 94       	lsr	r13
     b7c:	c7 94       	ror	r12
     b7e:	b7 94       	ror	r11
     b80:	a7 94       	ror	r10
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__floatunsisf+0x56>
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <__floatunsisf+0x7c>
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	aa 1f       	adc	r26, r26
     b9e:	bb 1f       	adc	r27, r27
     ba0:	2a 95       	dec	r18
     ba2:	d2 f7       	brpl	.-12     	; 0xb98 <__floatunsisf+0x74>
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	a1 09       	sbc	r26, r1
     ba8:	b1 09       	sbc	r27, r1
     baa:	8e 21       	and	r24, r14
     bac:	9f 21       	and	r25, r15
     bae:	a0 23       	and	r26, r16
     bb0:	b1 23       	and	r27, r17
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	a1 05       	cpc	r26, r1
     bb6:	b1 05       	cpc	r27, r1
     bb8:	21 f0       	breq	.+8      	; 0xbc2 <__floatunsisf+0x9e>
     bba:	41 e0       	ldi	r20, 0x01	; 1
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	4a 29       	or	r20, r10
     bc4:	5b 29       	or	r21, r11
     bc6:	6c 29       	or	r22, r12
     bc8:	7d 29       	or	r23, r13
     bca:	4d 83       	std	Y+5, r20	; 0x05
     bcc:	5e 83       	std	Y+6, r21	; 0x06
     bce:	6f 83       	std	Y+7, r22	; 0x07
     bd0:	78 87       	std	Y+8, r23	; 0x08
     bd2:	8e e1       	ldi	r24, 0x1E	; 30
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	8e 1b       	sub	r24, r30
     bd8:	9f 0b       	sbc	r25, r31
     bda:	9c 83       	std	Y+4, r25	; 0x04
     bdc:	8b 83       	std	Y+3, r24	; 0x03
     bde:	12 c0       	rjmp	.+36     	; 0xc04 <__floatunsisf+0xe0>
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	81 f0       	breq	.+32     	; 0xc04 <__floatunsisf+0xe0>
     be4:	0e 2e       	mov	r0, r30
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <__floatunsisf+0xcc>
     be8:	ee 0c       	add	r14, r14
     bea:	ff 1c       	adc	r15, r15
     bec:	00 1f       	adc	r16, r16
     bee:	11 1f       	adc	r17, r17
     bf0:	0a 94       	dec	r0
     bf2:	d2 f7       	brpl	.-12     	; 0xbe8 <__floatunsisf+0xc4>
     bf4:	ed 82       	std	Y+5, r14	; 0x05
     bf6:	fe 82       	std	Y+6, r15	; 0x06
     bf8:	0f 83       	std	Y+7, r16	; 0x07
     bfa:	18 87       	std	Y+8, r17	; 0x08
     bfc:	ce 1a       	sub	r12, r30
     bfe:	df 0a       	sbc	r13, r31
     c00:	dc 82       	std	Y+4, r13	; 0x04
     c02:	cb 82       	std	Y+3, r12	; 0x03
     c04:	1a 82       	std	Y+2, r1	; 0x02
     c06:	ce 01       	movw	r24, r28
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__pack_f>
     c0e:	28 96       	adiw	r28, 0x08	; 8
     c10:	ea e0       	ldi	r30, 0x0A	; 10
     c12:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__epilogue_restores__+0x10>

00000c16 <__clzsi2>:
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	7b 01       	movw	r14, r22
     c20:	8c 01       	movw	r16, r24
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	e8 16       	cp	r14, r24
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	f8 06       	cpc	r15, r24
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	08 07       	cpc	r16, r24
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	18 07       	cpc	r17, r24
     c32:	88 f4       	brcc	.+34     	; 0xc56 <__clzsi2+0x40>
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	e8 16       	cp	r14, r24
     c38:	f1 04       	cpc	r15, r1
     c3a:	01 05       	cpc	r16, r1
     c3c:	11 05       	cpc	r17, r1
     c3e:	31 f0       	breq	.+12     	; 0xc4c <__clzsi2+0x36>
     c40:	28 f0       	brcs	.+10     	; 0xc4c <__clzsi2+0x36>
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	a0 e0       	ldi	r26, 0x00	; 0
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	17 c0       	rjmp	.+46     	; 0xc7a <__clzsi2+0x64>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	12 c0       	rjmp	.+36     	; 0xc7a <__clzsi2+0x64>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	e8 16       	cp	r14, r24
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	f8 06       	cpc	r15, r24
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	08 07       	cpc	r16, r24
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	18 07       	cpc	r17, r24
     c66:	28 f0       	brcs	.+10     	; 0xc72 <__clzsi2+0x5c>
     c68:	88 e1       	ldi	r24, 0x18	; 24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <__clzsi2+0x64>
     c72:	80 e1       	ldi	r24, 0x10	; 16
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a0 e0       	ldi	r26, 0x00	; 0
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	20 e2       	ldi	r18, 0x20	; 32
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	28 1b       	sub	r18, r24
     c84:	39 0b       	sbc	r19, r25
     c86:	4a 0b       	sbc	r20, r26
     c88:	5b 0b       	sbc	r21, r27
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__clzsi2+0x7e>
     c8c:	16 95       	lsr	r17
     c8e:	07 95       	ror	r16
     c90:	f7 94       	ror	r15
     c92:	e7 94       	ror	r14
     c94:	8a 95       	dec	r24
     c96:	d2 f7       	brpl	.-12     	; 0xc8c <__clzsi2+0x76>
     c98:	f7 01       	movw	r30, r14
     c9a:	eb 57       	subi	r30, 0x7B	; 123
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	80 81       	ld	r24, Z
     ca0:	28 1b       	sub	r18, r24
     ca2:	31 09       	sbc	r19, r1
     ca4:	41 09       	sbc	r20, r1
     ca6:	51 09       	sbc	r21, r1
     ca8:	c9 01       	movw	r24, r18
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	08 95       	ret

00000cb4 <__pack_f>:
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	fc 01       	movw	r30, r24
     cc0:	e4 80       	ldd	r14, Z+4	; 0x04
     cc2:	f5 80       	ldd	r15, Z+5	; 0x05
     cc4:	06 81       	ldd	r16, Z+6	; 0x06
     cc6:	17 81       	ldd	r17, Z+7	; 0x07
     cc8:	d1 80       	ldd	r13, Z+1	; 0x01
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	48 f4       	brcc	.+18     	; 0xce2 <__pack_f+0x2e>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 e1       	ldi	r26, 0x10	; 16
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e8 2a       	or	r14, r24
     cda:	f9 2a       	or	r15, r25
     cdc:	0a 2b       	or	r16, r26
     cde:	1b 2b       	or	r17, r27
     ce0:	a5 c0       	rjmp	.+330    	; 0xe2c <__pack_f+0x178>
     ce2:	84 30       	cpi	r24, 0x04	; 4
     ce4:	09 f4       	brne	.+2      	; 0xce8 <__pack_f+0x34>
     ce6:	9f c0       	rjmp	.+318    	; 0xe26 <__pack_f+0x172>
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	21 f4       	brne	.+8      	; 0xcf4 <__pack_f+0x40>
     cec:	ee 24       	eor	r14, r14
     cee:	ff 24       	eor	r15, r15
     cf0:	87 01       	movw	r16, r14
     cf2:	05 c0       	rjmp	.+10     	; 0xcfe <__pack_f+0x4a>
     cf4:	e1 14       	cp	r14, r1
     cf6:	f1 04       	cpc	r15, r1
     cf8:	01 05       	cpc	r16, r1
     cfa:	11 05       	cpc	r17, r1
     cfc:	19 f4       	brne	.+6      	; 0xd04 <__pack_f+0x50>
     cfe:	e0 e0       	ldi	r30, 0x00	; 0
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	96 c0       	rjmp	.+300    	; 0xe30 <__pack_f+0x17c>
     d04:	62 81       	ldd	r22, Z+2	; 0x02
     d06:	73 81       	ldd	r23, Z+3	; 0x03
     d08:	9f ef       	ldi	r25, 0xFF	; 255
     d0a:	62 38       	cpi	r22, 0x82	; 130
     d0c:	79 07       	cpc	r23, r25
     d0e:	0c f0       	brlt	.+2      	; 0xd12 <__pack_f+0x5e>
     d10:	5b c0       	rjmp	.+182    	; 0xdc8 <__pack_f+0x114>
     d12:	22 e8       	ldi	r18, 0x82	; 130
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	26 1b       	sub	r18, r22
     d18:	37 0b       	sbc	r19, r23
     d1a:	2a 31       	cpi	r18, 0x1A	; 26
     d1c:	31 05       	cpc	r19, r1
     d1e:	2c f0       	brlt	.+10     	; 0xd2a <__pack_f+0x76>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	2a c0       	rjmp	.+84     	; 0xd7e <__pack_f+0xca>
     d2a:	b8 01       	movw	r22, r16
     d2c:	a7 01       	movw	r20, r14
     d2e:	02 2e       	mov	r0, r18
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <__pack_f+0x86>
     d32:	76 95       	lsr	r23
     d34:	67 95       	ror	r22
     d36:	57 95       	ror	r21
     d38:	47 95       	ror	r20
     d3a:	0a 94       	dec	r0
     d3c:	d2 f7       	brpl	.-12     	; 0xd32 <__pack_f+0x7e>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a0 e0       	ldi	r26, 0x00	; 0
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <__pack_f+0x9c>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	aa 1f       	adc	r26, r26
     d4e:	bb 1f       	adc	r27, r27
     d50:	2a 95       	dec	r18
     d52:	d2 f7       	brpl	.-12     	; 0xd48 <__pack_f+0x94>
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	a1 09       	sbc	r26, r1
     d58:	b1 09       	sbc	r27, r1
     d5a:	8e 21       	and	r24, r14
     d5c:	9f 21       	and	r25, r15
     d5e:	a0 23       	and	r26, r16
     d60:	b1 23       	and	r27, r17
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	a1 05       	cpc	r26, r1
     d66:	b1 05       	cpc	r27, r1
     d68:	21 f0       	breq	.+8      	; 0xd72 <__pack_f+0xbe>
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	a0 e0       	ldi	r26, 0x00	; 0
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	9a 01       	movw	r18, r20
     d74:	ab 01       	movw	r20, r22
     d76:	28 2b       	or	r18, r24
     d78:	39 2b       	or	r19, r25
     d7a:	4a 2b       	or	r20, r26
     d7c:	5b 2b       	or	r21, r27
     d7e:	da 01       	movw	r26, r20
     d80:	c9 01       	movw	r24, r18
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	a0 70       	andi	r26, 0x00	; 0
     d88:	b0 70       	andi	r27, 0x00	; 0
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	91 05       	cpc	r25, r1
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	39 f4       	brne	.+14     	; 0xda2 <__pack_f+0xee>
     d94:	27 ff       	sbrs	r18, 7
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <__pack_f+0xf6>
     d98:	20 5c       	subi	r18, 0xC0	; 192
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	4f 4f       	sbci	r20, 0xFF	; 255
     d9e:	5f 4f       	sbci	r21, 0xFF	; 255
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__pack_f+0xf6>
     da2:	21 5c       	subi	r18, 0xC1	; 193
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	4f 4f       	sbci	r20, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	e0 e0       	ldi	r30, 0x00	; 0
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	20 30       	cpi	r18, 0x00	; 0
     db0:	a0 e0       	ldi	r26, 0x00	; 0
     db2:	3a 07       	cpc	r19, r26
     db4:	a0 e0       	ldi	r26, 0x00	; 0
     db6:	4a 07       	cpc	r20, r26
     db8:	a0 e4       	ldi	r26, 0x40	; 64
     dba:	5a 07       	cpc	r21, r26
     dbc:	10 f0       	brcs	.+4      	; 0xdc2 <__pack_f+0x10e>
     dbe:	e1 e0       	ldi	r30, 0x01	; 1
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	79 01       	movw	r14, r18
     dc4:	8a 01       	movw	r16, r20
     dc6:	27 c0       	rjmp	.+78     	; 0xe16 <__pack_f+0x162>
     dc8:	60 38       	cpi	r22, 0x80	; 128
     dca:	71 05       	cpc	r23, r1
     dcc:	64 f5       	brge	.+88     	; 0xe26 <__pack_f+0x172>
     dce:	fb 01       	movw	r30, r22
     dd0:	e1 58       	subi	r30, 0x81	; 129
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	d8 01       	movw	r26, r16
     dd6:	c7 01       	movw	r24, r14
     dd8:	8f 77       	andi	r24, 0x7F	; 127
     dda:	90 70       	andi	r25, 0x00	; 0
     ddc:	a0 70       	andi	r26, 0x00	; 0
     dde:	b0 70       	andi	r27, 0x00	; 0
     de0:	80 34       	cpi	r24, 0x40	; 64
     de2:	91 05       	cpc	r25, r1
     de4:	a1 05       	cpc	r26, r1
     de6:	b1 05       	cpc	r27, r1
     de8:	39 f4       	brne	.+14     	; 0xdf8 <__pack_f+0x144>
     dea:	e7 fe       	sbrs	r14, 7
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <__pack_f+0x154>
     dee:	80 e4       	ldi	r24, 0x40	; 64
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <__pack_f+0x14c>
     df8:	8f e3       	ldi	r24, 0x3F	; 63
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a0 e0       	ldi	r26, 0x00	; 0
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e8 0e       	add	r14, r24
     e02:	f9 1e       	adc	r15, r25
     e04:	0a 1f       	adc	r16, r26
     e06:	1b 1f       	adc	r17, r27
     e08:	17 ff       	sbrs	r17, 7
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <__pack_f+0x162>
     e0c:	16 95       	lsr	r17
     e0e:	07 95       	ror	r16
     e10:	f7 94       	ror	r15
     e12:	e7 94       	ror	r14
     e14:	31 96       	adiw	r30, 0x01	; 1
     e16:	87 e0       	ldi	r24, 0x07	; 7
     e18:	16 95       	lsr	r17
     e1a:	07 95       	ror	r16
     e1c:	f7 94       	ror	r15
     e1e:	e7 94       	ror	r14
     e20:	8a 95       	dec	r24
     e22:	d1 f7       	brne	.-12     	; 0xe18 <__pack_f+0x164>
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <__pack_f+0x17c>
     e26:	ee 24       	eor	r14, r14
     e28:	ff 24       	eor	r15, r15
     e2a:	87 01       	movw	r16, r14
     e2c:	ef ef       	ldi	r30, 0xFF	; 255
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	6e 2f       	mov	r22, r30
     e32:	67 95       	ror	r22
     e34:	66 27       	eor	r22, r22
     e36:	67 95       	ror	r22
     e38:	90 2f       	mov	r25, r16
     e3a:	9f 77       	andi	r25, 0x7F	; 127
     e3c:	d7 94       	ror	r13
     e3e:	dd 24       	eor	r13, r13
     e40:	d7 94       	ror	r13
     e42:	8e 2f       	mov	r24, r30
     e44:	86 95       	lsr	r24
     e46:	49 2f       	mov	r20, r25
     e48:	46 2b       	or	r20, r22
     e4a:	58 2f       	mov	r21, r24
     e4c:	5d 29       	or	r21, r13
     e4e:	b7 01       	movw	r22, r14
     e50:	ca 01       	movw	r24, r20
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	08 95       	ret

00000e5e <__unpack_f>:
     e5e:	fc 01       	movw	r30, r24
     e60:	db 01       	movw	r26, r22
     e62:	40 81       	ld	r20, Z
     e64:	51 81       	ldd	r21, Z+1	; 0x01
     e66:	22 81       	ldd	r18, Z+2	; 0x02
     e68:	62 2f       	mov	r22, r18
     e6a:	6f 77       	andi	r22, 0x7F	; 127
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	22 1f       	adc	r18, r18
     e70:	22 27       	eor	r18, r18
     e72:	22 1f       	adc	r18, r18
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	89 2f       	mov	r24, r25
     e78:	88 0f       	add	r24, r24
     e7a:	82 2b       	or	r24, r18
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	99 1f       	adc	r25, r25
     e82:	99 27       	eor	r25, r25
     e84:	99 1f       	adc	r25, r25
     e86:	11 96       	adiw	r26, 0x01	; 1
     e88:	9c 93       	st	X, r25
     e8a:	11 97       	sbiw	r26, 0x01	; 1
     e8c:	21 15       	cp	r18, r1
     e8e:	31 05       	cpc	r19, r1
     e90:	a9 f5       	brne	.+106    	; 0xefc <__unpack_f+0x9e>
     e92:	41 15       	cp	r20, r1
     e94:	51 05       	cpc	r21, r1
     e96:	61 05       	cpc	r22, r1
     e98:	71 05       	cpc	r23, r1
     e9a:	11 f4       	brne	.+4      	; 0xea0 <__unpack_f+0x42>
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	37 c0       	rjmp	.+110    	; 0xf0e <__unpack_f+0xb0>
     ea0:	82 e8       	ldi	r24, 0x82	; 130
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	13 96       	adiw	r26, 0x03	; 3
     ea6:	9c 93       	st	X, r25
     ea8:	8e 93       	st	-X, r24
     eaa:	12 97       	sbiw	r26, 0x02	; 2
     eac:	9a 01       	movw	r18, r20
     eae:	ab 01       	movw	r20, r22
     eb0:	67 e0       	ldi	r22, 0x07	; 7
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	44 1f       	adc	r20, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	6a 95       	dec	r22
     ebc:	d1 f7       	brne	.-12     	; 0xeb2 <__unpack_f+0x54>
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	8c 93       	st	X, r24
     ec2:	0d c0       	rjmp	.+26     	; 0xede <__unpack_f+0x80>
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	44 1f       	adc	r20, r20
     eca:	55 1f       	adc	r21, r21
     ecc:	12 96       	adiw	r26, 0x02	; 2
     ece:	8d 91       	ld	r24, X+
     ed0:	9c 91       	ld	r25, X
     ed2:	13 97       	sbiw	r26, 0x03	; 3
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	13 96       	adiw	r26, 0x03	; 3
     ed8:	9c 93       	st	X, r25
     eda:	8e 93       	st	-X, r24
     edc:	12 97       	sbiw	r26, 0x02	; 2
     ede:	20 30       	cpi	r18, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	38 07       	cpc	r19, r24
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	48 07       	cpc	r20, r24
     ee8:	80 e4       	ldi	r24, 0x40	; 64
     eea:	58 07       	cpc	r21, r24
     eec:	58 f3       	brcs	.-42     	; 0xec4 <__unpack_f+0x66>
     eee:	14 96       	adiw	r26, 0x04	; 4
     ef0:	2d 93       	st	X+, r18
     ef2:	3d 93       	st	X+, r19
     ef4:	4d 93       	st	X+, r20
     ef6:	5c 93       	st	X, r21
     ef8:	17 97       	sbiw	r26, 0x07	; 7
     efa:	08 95       	ret
     efc:	2f 3f       	cpi	r18, 0xFF	; 255
     efe:	31 05       	cpc	r19, r1
     f00:	79 f4       	brne	.+30     	; 0xf20 <__unpack_f+0xc2>
     f02:	41 15       	cp	r20, r1
     f04:	51 05       	cpc	r21, r1
     f06:	61 05       	cpc	r22, r1
     f08:	71 05       	cpc	r23, r1
     f0a:	19 f4       	brne	.+6      	; 0xf12 <__unpack_f+0xb4>
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	8c 93       	st	X, r24
     f10:	08 95       	ret
     f12:	64 ff       	sbrs	r22, 4
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <__unpack_f+0xbe>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	8c 93       	st	X, r24
     f1a:	12 c0       	rjmp	.+36     	; 0xf40 <__unpack_f+0xe2>
     f1c:	1c 92       	st	X, r1
     f1e:	10 c0       	rjmp	.+32     	; 0xf40 <__unpack_f+0xe2>
     f20:	2f 57       	subi	r18, 0x7F	; 127
     f22:	30 40       	sbci	r19, 0x00	; 0
     f24:	13 96       	adiw	r26, 0x03	; 3
     f26:	3c 93       	st	X, r19
     f28:	2e 93       	st	-X, r18
     f2a:	12 97       	sbiw	r26, 0x02	; 2
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	8c 93       	st	X, r24
     f30:	87 e0       	ldi	r24, 0x07	; 7
     f32:	44 0f       	add	r20, r20
     f34:	55 1f       	adc	r21, r21
     f36:	66 1f       	adc	r22, r22
     f38:	77 1f       	adc	r23, r23
     f3a:	8a 95       	dec	r24
     f3c:	d1 f7       	brne	.-12     	; 0xf32 <__unpack_f+0xd4>
     f3e:	70 64       	ori	r23, 0x40	; 64
     f40:	14 96       	adiw	r26, 0x04	; 4
     f42:	4d 93       	st	X+, r20
     f44:	5d 93       	st	X+, r21
     f46:	6d 93       	st	X+, r22
     f48:	7c 93       	st	X, r23
     f4a:	17 97       	sbiw	r26, 0x07	; 7
     f4c:	08 95       	ret

00000f4e <__fpcmp_parts_f>:
     f4e:	1f 93       	push	r17
     f50:	dc 01       	movw	r26, r24
     f52:	fb 01       	movw	r30, r22
     f54:	9c 91       	ld	r25, X
     f56:	92 30       	cpi	r25, 0x02	; 2
     f58:	08 f4       	brcc	.+2      	; 0xf5c <__fpcmp_parts_f+0xe>
     f5a:	47 c0       	rjmp	.+142    	; 0xfea <__fpcmp_parts_f+0x9c>
     f5c:	80 81       	ld	r24, Z
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	08 f4       	brcc	.+2      	; 0xf64 <__fpcmp_parts_f+0x16>
     f62:	43 c0       	rjmp	.+134    	; 0xfea <__fpcmp_parts_f+0x9c>
     f64:	94 30       	cpi	r25, 0x04	; 4
     f66:	51 f4       	brne	.+20     	; 0xf7c <__fpcmp_parts_f+0x2e>
     f68:	11 96       	adiw	r26, 0x01	; 1
     f6a:	1c 91       	ld	r17, X
     f6c:	84 30       	cpi	r24, 0x04	; 4
     f6e:	99 f5       	brne	.+102    	; 0xfd6 <__fpcmp_parts_f+0x88>
     f70:	81 81       	ldd	r24, Z+1	; 0x01
     f72:	68 2f       	mov	r22, r24
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	61 1b       	sub	r22, r17
     f78:	71 09       	sbc	r23, r1
     f7a:	3f c0       	rjmp	.+126    	; 0xffa <__fpcmp_parts_f+0xac>
     f7c:	84 30       	cpi	r24, 0x04	; 4
     f7e:	21 f0       	breq	.+8      	; 0xf88 <__fpcmp_parts_f+0x3a>
     f80:	92 30       	cpi	r25, 0x02	; 2
     f82:	31 f4       	brne	.+12     	; 0xf90 <__fpcmp_parts_f+0x42>
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	b9 f1       	breq	.+110    	; 0xff6 <__fpcmp_parts_f+0xa8>
     f88:	81 81       	ldd	r24, Z+1	; 0x01
     f8a:	88 23       	and	r24, r24
     f8c:	89 f1       	breq	.+98     	; 0xff0 <__fpcmp_parts_f+0xa2>
     f8e:	2d c0       	rjmp	.+90     	; 0xfea <__fpcmp_parts_f+0x9c>
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	1c 91       	ld	r17, X
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	f1 f0       	breq	.+60     	; 0xfd6 <__fpcmp_parts_f+0x88>
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	18 17       	cp	r17, r24
     f9e:	d9 f4       	brne	.+54     	; 0xfd6 <__fpcmp_parts_f+0x88>
     fa0:	12 96       	adiw	r26, 0x02	; 2
     fa2:	2d 91       	ld	r18, X+
     fa4:	3c 91       	ld	r19, X
     fa6:	13 97       	sbiw	r26, 0x03	; 3
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	82 17       	cp	r24, r18
     fae:	93 07       	cpc	r25, r19
     fb0:	94 f0       	brlt	.+36     	; 0xfd6 <__fpcmp_parts_f+0x88>
     fb2:	28 17       	cp	r18, r24
     fb4:	39 07       	cpc	r19, r25
     fb6:	bc f0       	brlt	.+46     	; 0xfe6 <__fpcmp_parts_f+0x98>
     fb8:	14 96       	adiw	r26, 0x04	; 4
     fba:	8d 91       	ld	r24, X+
     fbc:	9d 91       	ld	r25, X+
     fbe:	0d 90       	ld	r0, X+
     fc0:	bc 91       	ld	r27, X
     fc2:	a0 2d       	mov	r26, r0
     fc4:	24 81       	ldd	r18, Z+4	; 0x04
     fc6:	35 81       	ldd	r19, Z+5	; 0x05
     fc8:	46 81       	ldd	r20, Z+6	; 0x06
     fca:	57 81       	ldd	r21, Z+7	; 0x07
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	4a 07       	cpc	r20, r26
     fd2:	5b 07       	cpc	r21, r27
     fd4:	18 f4       	brcc	.+6      	; 0xfdc <__fpcmp_parts_f+0x8e>
     fd6:	11 23       	and	r17, r17
     fd8:	41 f0       	breq	.+16     	; 0xfea <__fpcmp_parts_f+0x9c>
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <__fpcmp_parts_f+0xa2>
     fdc:	82 17       	cp	r24, r18
     fde:	93 07       	cpc	r25, r19
     fe0:	a4 07       	cpc	r26, r20
     fe2:	b5 07       	cpc	r27, r21
     fe4:	40 f4       	brcc	.+16     	; 0xff6 <__fpcmp_parts_f+0xa8>
     fe6:	11 23       	and	r17, r17
     fe8:	19 f0       	breq	.+6      	; 0xff0 <__fpcmp_parts_f+0xa2>
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	05 c0       	rjmp	.+10     	; 0xffa <__fpcmp_parts_f+0xac>
     ff0:	6f ef       	ldi	r22, 0xFF	; 255
     ff2:	7f ef       	ldi	r23, 0xFF	; 255
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <__fpcmp_parts_f+0xac>
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	cb 01       	movw	r24, r22
     ffc:	1f 91       	pop	r17
     ffe:	08 95       	ret

00001000 <dtostre>:
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e6 e0       	ldi	r30, 0x06	; 6
    1006:	f8 e0       	ldi	r31, 0x08	; 8
    1008:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__prologue_saves__+0x16>
    100c:	7a 01       	movw	r14, r20
    100e:	d0 2e       	mov	r13, r16
    1010:	12 2f       	mov	r17, r18
    1012:	28 30       	cpi	r18, 0x08	; 8
    1014:	08 f0       	brcs	.+2      	; 0x1018 <dtostre+0x18>
    1016:	17 e0       	ldi	r17, 0x07	; 7
    1018:	a7 01       	movw	r20, r14
    101a:	21 2f       	mov	r18, r17
    101c:	00 e0       	ldi	r16, 0x00	; 0
    101e:	0e 94 86 08 	call	0x110c	; 0x110c <__ftoa_engine>
    1022:	68 2f       	mov	r22, r24
    1024:	f7 01       	movw	r30, r14
    1026:	51 91       	ld	r21, Z+
    1028:	25 2f       	mov	r18, r21
    102a:	50 ff       	sbrs	r21, 0
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <dtostre+0x36>
    102e:	53 fd       	sbrc	r21, 3
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <dtostre+0x36>
    1032:	8d e2       	ldi	r24, 0x2D	; 45
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <dtostre+0x48>
    1036:	d1 fe       	sbrs	r13, 1
    1038:	02 c0       	rjmp	.+4      	; 0x103e <dtostre+0x3e>
    103a:	8b e2       	ldi	r24, 0x2B	; 43
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <dtostre+0x48>
    103e:	d0 fc       	sbrc	r13, 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <dtostre+0x46>
    1042:	c7 01       	movw	r24, r14
    1044:	04 c0       	rjmp	.+8      	; 0x104e <dtostre+0x4e>
    1046:	80 e2       	ldi	r24, 0x20	; 32
    1048:	d7 01       	movw	r26, r14
    104a:	8c 93       	st	X, r24
    104c:	cf 01       	movw	r24, r30
    104e:	48 2f       	mov	r20, r24
    1050:	39 2f       	mov	r19, r25
    1052:	23 ff       	sbrs	r18, 3
    1054:	03 c0       	rjmp	.+6      	; 0x105c <dtostre+0x5c>
    1056:	6c e5       	ldi	r22, 0x5C	; 92
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <dtostre+0x64>
    105c:	22 ff       	sbrs	r18, 2
    105e:	0b c0       	rjmp	.+22     	; 0x1076 <dtostre+0x76>
    1060:	64 e5       	ldi	r22, 0x54	; 84
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	d2 fe       	sbrs	r13, 2
    1066:	02 c0       	rjmp	.+4      	; 0x106c <dtostre+0x6c>
    1068:	6c 5f       	subi	r22, 0xFC	; 252
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	84 2f       	mov	r24, r20
    106e:	93 2f       	mov	r25, r19
    1070:	0e 94 5e 09 	call	0x12bc	; 0x12bc <strcpy_P>
    1074:	45 c0       	rjmp	.+138    	; 0x1100 <dtostre+0x100>
    1076:	f7 01       	movw	r30, r14
    1078:	21 81       	ldd	r18, Z+1	; 0x01
    107a:	dc 01       	movw	r26, r24
    107c:	2d 93       	st	X+, r18
    107e:	21 33       	cpi	r18, 0x31	; 49
    1080:	09 f0       	breq	.+2      	; 0x1084 <dtostre+0x84>
    1082:	5f 7e       	andi	r21, 0xEF	; 239
    1084:	11 23       	and	r17, r17
    1086:	a9 f0       	breq	.+42     	; 0x10b2 <dtostre+0xb2>
    1088:	e7 01       	movw	r28, r14
    108a:	84 2f       	mov	r24, r20
    108c:	93 2f       	mov	r25, r19
    108e:	fc 01       	movw	r30, r24
    1090:	91 2f       	mov	r25, r17
    1092:	2e e2       	ldi	r18, 0x2E	; 46
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	21 83       	std	Z+1, r18	; 0x01
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	21 96       	adiw	r28, 0x01	; 1
    109c:	31 96       	adiw	r30, 0x01	; 1
    109e:	28 2f       	mov	r18, r24
    10a0:	99 23       	and	r25, r25
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <dtostre+0x94>
    10a4:	11 50       	subi	r17, 0x01	; 1
    10a6:	81 2f       	mov	r24, r17
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	a8 0f       	add	r26, r24
    10ae:	b9 1f       	adc	r27, r25
    10b0:	2d 93       	st	X+, r18
    10b2:	d2 fc       	sbrc	r13, 2
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <dtostre+0xba>
    10b6:	85 e6       	ldi	r24, 0x65	; 101
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <dtostre+0xbc>
    10ba:	85 e4       	ldi	r24, 0x45	; 69
    10bc:	96 2f       	mov	r25, r22
    10be:	fd 01       	movw	r30, r26
    10c0:	81 93       	st	Z+, r24
    10c2:	67 ff       	sbrs	r22, 7
    10c4:	07 c0       	rjmp	.+14     	; 0x10d4 <dtostre+0xd4>
    10c6:	8d e2       	ldi	r24, 0x2D	; 45
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	8c 93       	st	X, r24
    10cc:	df 01       	movw	r26, r30
    10ce:	11 96       	adiw	r26, 0x01	; 1
    10d0:	91 95       	neg	r25
    10d2:	0a c0       	rjmp	.+20     	; 0x10e8 <dtostre+0xe8>
    10d4:	66 23       	and	r22, r22
    10d6:	29 f4       	brne	.+10     	; 0x10e2 <dtostre+0xe2>
    10d8:	54 ff       	sbrs	r21, 4
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <dtostre+0xe2>
    10dc:	df 01       	movw	r26, r30
    10de:	8d e2       	ldi	r24, 0x2D	; 45
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <dtostre+0xe6>
    10e2:	df 01       	movw	r26, r30
    10e4:	8b e2       	ldi	r24, 0x2B	; 43
    10e6:	8d 93       	st	X+, r24
    10e8:	80 e3       	ldi	r24, 0x30	; 48
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <dtostre+0xf0>
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	9a 50       	subi	r25, 0x0A	; 10
    10f0:	9a 30       	cpi	r25, 0x0A	; 10
    10f2:	e4 f7       	brge	.-8      	; 0x10ec <dtostre+0xec>
    10f4:	fd 01       	movw	r30, r26
    10f6:	81 93       	st	Z+, r24
    10f8:	90 5d       	subi	r25, 0xD0	; 208
    10fa:	11 96       	adiw	r26, 0x01	; 1
    10fc:	9c 93       	st	X, r25
    10fe:	11 82       	std	Z+1, r1	; 0x01
    1100:	c7 01       	movw	r24, r14
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	e7 e0       	ldi	r30, 0x07	; 7
    1108:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__epilogue_restores__+0x16>

0000110c <__ftoa_engine>:
    110c:	28 30       	cpi	r18, 0x08	; 8
    110e:	08 f0       	brcs	.+2      	; 0x1112 <__ftoa_engine+0x6>
    1110:	27 e0       	ldi	r18, 0x07	; 7
    1112:	33 27       	eor	r19, r19
    1114:	da 01       	movw	r26, r20
    1116:	99 0f       	add	r25, r25
    1118:	31 1d       	adc	r19, r1
    111a:	87 fd       	sbrc	r24, 7
    111c:	91 60       	ori	r25, 0x01	; 1
    111e:	00 96       	adiw	r24, 0x00	; 0
    1120:	61 05       	cpc	r22, r1
    1122:	71 05       	cpc	r23, r1
    1124:	39 f4       	brne	.+14     	; 0x1134 <__ftoa_engine+0x28>
    1126:	32 60       	ori	r19, 0x02	; 2
    1128:	2e 5f       	subi	r18, 0xFE	; 254
    112a:	3d 93       	st	X+, r19
    112c:	30 e3       	ldi	r19, 0x30	; 48
    112e:	2a 95       	dec	r18
    1130:	e1 f7       	brne	.-8      	; 0x112a <__ftoa_engine+0x1e>
    1132:	08 95       	ret
    1134:	9f 3f       	cpi	r25, 0xFF	; 255
    1136:	30 f0       	brcs	.+12     	; 0x1144 <__ftoa_engine+0x38>
    1138:	80 38       	cpi	r24, 0x80	; 128
    113a:	71 05       	cpc	r23, r1
    113c:	61 05       	cpc	r22, r1
    113e:	09 f0       	breq	.+2      	; 0x1142 <__ftoa_engine+0x36>
    1140:	3c 5f       	subi	r19, 0xFC	; 252
    1142:	3c 5f       	subi	r19, 0xFC	; 252
    1144:	3d 93       	st	X+, r19
    1146:	91 30       	cpi	r25, 0x01	; 1
    1148:	08 f0       	brcs	.+2      	; 0x114c <__ftoa_engine+0x40>
    114a:	80 68       	ori	r24, 0x80	; 128
    114c:	91 1d       	adc	r25, r1
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	1f 93       	push	r17
    1154:	0f 93       	push	r16
    1156:	ff 92       	push	r15
    1158:	ef 92       	push	r14
    115a:	19 2f       	mov	r17, r25
    115c:	98 7f       	andi	r25, 0xF8	; 248
    115e:	96 95       	lsr	r25
    1160:	e9 2f       	mov	r30, r25
    1162:	96 95       	lsr	r25
    1164:	96 95       	lsr	r25
    1166:	e9 0f       	add	r30, r25
    1168:	ff 27       	eor	r31, r31
    116a:	e2 54       	subi	r30, 0x42	; 66
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	99 27       	eor	r25, r25
    1170:	33 27       	eor	r19, r19
    1172:	ee 24       	eor	r14, r14
    1174:	ff 24       	eor	r15, r15
    1176:	a7 01       	movw	r20, r14
    1178:	e7 01       	movw	r28, r14
    117a:	05 90       	lpm	r0, Z+
    117c:	08 94       	sec
    117e:	07 94       	ror	r0
    1180:	28 f4       	brcc	.+10     	; 0x118c <__ftoa_engine+0x80>
    1182:	36 0f       	add	r19, r22
    1184:	e7 1e       	adc	r14, r23
    1186:	f8 1e       	adc	r15, r24
    1188:	49 1f       	adc	r20, r25
    118a:	51 1d       	adc	r21, r1
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	88 1f       	adc	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	06 94       	lsr	r0
    1196:	a1 f7       	brne	.-24     	; 0x1180 <__ftoa_engine+0x74>
    1198:	05 90       	lpm	r0, Z+
    119a:	07 94       	ror	r0
    119c:	28 f4       	brcc	.+10     	; 0x11a8 <__ftoa_engine+0x9c>
    119e:	e7 0e       	add	r14, r23
    11a0:	f8 1e       	adc	r15, r24
    11a2:	49 1f       	adc	r20, r25
    11a4:	56 1f       	adc	r21, r22
    11a6:	c1 1d       	adc	r28, r1
    11a8:	77 0f       	add	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	66 1f       	adc	r22, r22
    11b0:	06 94       	lsr	r0
    11b2:	a1 f7       	brne	.-24     	; 0x119c <__ftoa_engine+0x90>
    11b4:	05 90       	lpm	r0, Z+
    11b6:	07 94       	ror	r0
    11b8:	28 f4       	brcc	.+10     	; 0x11c4 <__ftoa_engine+0xb8>
    11ba:	f8 0e       	add	r15, r24
    11bc:	49 1f       	adc	r20, r25
    11be:	56 1f       	adc	r21, r22
    11c0:	c7 1f       	adc	r28, r23
    11c2:	d1 1d       	adc	r29, r1
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	66 1f       	adc	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	06 94       	lsr	r0
    11ce:	a1 f7       	brne	.-24     	; 0x11b8 <__ftoa_engine+0xac>
    11d0:	05 90       	lpm	r0, Z+
    11d2:	07 94       	ror	r0
    11d4:	20 f4       	brcc	.+8      	; 0x11de <__ftoa_engine+0xd2>
    11d6:	49 0f       	add	r20, r25
    11d8:	56 1f       	adc	r21, r22
    11da:	c7 1f       	adc	r28, r23
    11dc:	d8 1f       	adc	r29, r24
    11de:	99 0f       	add	r25, r25
    11e0:	66 1f       	adc	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	88 1f       	adc	r24, r24
    11e6:	06 94       	lsr	r0
    11e8:	a9 f7       	brne	.-22     	; 0x11d4 <__ftoa_engine+0xc8>
    11ea:	84 91       	lpm	r24, Z+
    11ec:	10 95       	com	r17
    11ee:	17 70       	andi	r17, 0x07	; 7
    11f0:	41 f0       	breq	.+16     	; 0x1202 <__ftoa_engine+0xf6>
    11f2:	d6 95       	lsr	r29
    11f4:	c7 95       	ror	r28
    11f6:	57 95       	ror	r21
    11f8:	47 95       	ror	r20
    11fa:	f7 94       	ror	r15
    11fc:	e7 94       	ror	r14
    11fe:	1a 95       	dec	r17
    1200:	c1 f7       	brne	.-16     	; 0x11f2 <__ftoa_engine+0xe6>
    1202:	e4 e6       	ldi	r30, 0x64	; 100
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	68 94       	set
    1208:	15 90       	lpm	r1, Z+
    120a:	15 91       	lpm	r17, Z+
    120c:	35 91       	lpm	r19, Z+
    120e:	65 91       	lpm	r22, Z+
    1210:	95 91       	lpm	r25, Z+
    1212:	05 90       	lpm	r0, Z+
    1214:	7f e2       	ldi	r23, 0x2F	; 47
    1216:	73 95       	inc	r23
    1218:	e1 18       	sub	r14, r1
    121a:	f1 0a       	sbc	r15, r17
    121c:	43 0b       	sbc	r20, r19
    121e:	56 0b       	sbc	r21, r22
    1220:	c9 0b       	sbc	r28, r25
    1222:	d0 09       	sbc	r29, r0
    1224:	c0 f7       	brcc	.-16     	; 0x1216 <__ftoa_engine+0x10a>
    1226:	e1 0c       	add	r14, r1
    1228:	f1 1e       	adc	r15, r17
    122a:	43 1f       	adc	r20, r19
    122c:	56 1f       	adc	r21, r22
    122e:	c9 1f       	adc	r28, r25
    1230:	d0 1d       	adc	r29, r0
    1232:	7e f4       	brtc	.+30     	; 0x1252 <__ftoa_engine+0x146>
    1234:	70 33       	cpi	r23, 0x30	; 48
    1236:	11 f4       	brne	.+4      	; 0x123c <__ftoa_engine+0x130>
    1238:	8a 95       	dec	r24
    123a:	e6 cf       	rjmp	.-52     	; 0x1208 <__ftoa_engine+0xfc>
    123c:	e8 94       	clt
    123e:	01 50       	subi	r16, 0x01	; 1
    1240:	30 f0       	brcs	.+12     	; 0x124e <__ftoa_engine+0x142>
    1242:	08 0f       	add	r16, r24
    1244:	0a f4       	brpl	.+2      	; 0x1248 <__ftoa_engine+0x13c>
    1246:	00 27       	eor	r16, r16
    1248:	02 17       	cp	r16, r18
    124a:	08 f4       	brcc	.+2      	; 0x124e <__ftoa_engine+0x142>
    124c:	20 2f       	mov	r18, r16
    124e:	23 95       	inc	r18
    1250:	02 2f       	mov	r16, r18
    1252:	7a 33       	cpi	r23, 0x3A	; 58
    1254:	28 f0       	brcs	.+10     	; 0x1260 <__ftoa_engine+0x154>
    1256:	79 e3       	ldi	r23, 0x39	; 57
    1258:	7d 93       	st	X+, r23
    125a:	2a 95       	dec	r18
    125c:	e9 f7       	brne	.-6      	; 0x1258 <__ftoa_engine+0x14c>
    125e:	10 c0       	rjmp	.+32     	; 0x1280 <__ftoa_engine+0x174>
    1260:	7d 93       	st	X+, r23
    1262:	2a 95       	dec	r18
    1264:	89 f6       	brne	.-94     	; 0x1208 <__ftoa_engine+0xfc>
    1266:	06 94       	lsr	r0
    1268:	97 95       	ror	r25
    126a:	67 95       	ror	r22
    126c:	37 95       	ror	r19
    126e:	17 95       	ror	r17
    1270:	17 94       	ror	r1
    1272:	e1 18       	sub	r14, r1
    1274:	f1 0a       	sbc	r15, r17
    1276:	43 0b       	sbc	r20, r19
    1278:	56 0b       	sbc	r21, r22
    127a:	c9 0b       	sbc	r28, r25
    127c:	d0 09       	sbc	r29, r0
    127e:	98 f0       	brcs	.+38     	; 0x12a6 <__ftoa_engine+0x19a>
    1280:	23 95       	inc	r18
    1282:	7e 91       	ld	r23, -X
    1284:	73 95       	inc	r23
    1286:	7a 33       	cpi	r23, 0x3A	; 58
    1288:	08 f0       	brcs	.+2      	; 0x128c <__ftoa_engine+0x180>
    128a:	70 e3       	ldi	r23, 0x30	; 48
    128c:	7c 93       	st	X, r23
    128e:	20 13       	cpse	r18, r16
    1290:	b8 f7       	brcc	.-18     	; 0x1280 <__ftoa_engine+0x174>
    1292:	7e 91       	ld	r23, -X
    1294:	70 61       	ori	r23, 0x10	; 16
    1296:	7d 93       	st	X+, r23
    1298:	30 f0       	brcs	.+12     	; 0x12a6 <__ftoa_engine+0x19a>
    129a:	83 95       	inc	r24
    129c:	71 e3       	ldi	r23, 0x31	; 49
    129e:	7d 93       	st	X+, r23
    12a0:	70 e3       	ldi	r23, 0x30	; 48
    12a2:	2a 95       	dec	r18
    12a4:	e1 f7       	brne	.-8      	; 0x129e <__ftoa_engine+0x192>
    12a6:	11 24       	eor	r1, r1
    12a8:	ef 90       	pop	r14
    12aa:	ff 90       	pop	r15
    12ac:	0f 91       	pop	r16
    12ae:	1f 91       	pop	r17
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	99 27       	eor	r25, r25
    12b6:	87 fd       	sbrc	r24, 7
    12b8:	90 95       	com	r25
    12ba:	08 95       	ret

000012bc <strcpy_P>:
    12bc:	fb 01       	movw	r30, r22
    12be:	dc 01       	movw	r26, r24
    12c0:	05 90       	lpm	r0, Z+
    12c2:	0d 92       	st	X+, r0
    12c4:	00 20       	and	r0, r0
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <strcpy_P+0x4>
    12c8:	08 95       	ret

000012ca <itoa>:
    12ca:	fb 01       	movw	r30, r22
    12cc:	9f 01       	movw	r18, r30
    12ce:	e8 94       	clt
    12d0:	42 30       	cpi	r20, 0x02	; 2
    12d2:	c4 f0       	brlt	.+48     	; 0x1304 <itoa+0x3a>
    12d4:	45 32       	cpi	r20, 0x25	; 37
    12d6:	b4 f4       	brge	.+44     	; 0x1304 <itoa+0x3a>
    12d8:	4a 30       	cpi	r20, 0x0A	; 10
    12da:	29 f4       	brne	.+10     	; 0x12e6 <itoa+0x1c>
    12dc:	97 fb       	bst	r25, 7
    12de:	1e f4       	brtc	.+6      	; 0x12e6 <itoa+0x1c>
    12e0:	90 95       	com	r25
    12e2:	81 95       	neg	r24
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	64 2f       	mov	r22, r20
    12e8:	77 27       	eor	r23, r23
    12ea:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__udivmodhi4>
    12ee:	80 5d       	subi	r24, 0xD0	; 208
    12f0:	8a 33       	cpi	r24, 0x3A	; 58
    12f2:	0c f0       	brlt	.+2      	; 0x12f6 <itoa+0x2c>
    12f4:	89 5d       	subi	r24, 0xD9	; 217
    12f6:	81 93       	st	Z+, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	a1 f7       	brne	.-24     	; 0x12e6 <itoa+0x1c>
    12fe:	16 f4       	brtc	.+4      	; 0x1304 <itoa+0x3a>
    1300:	5d e2       	ldi	r21, 0x2D	; 45
    1302:	51 93       	st	Z+, r21
    1304:	10 82       	st	Z, r1
    1306:	c9 01       	movw	r24, r18
    1308:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <strrev>

0000130c <sscanf>:
    130c:	ae e0       	ldi	r26, 0x0E	; 14
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ec e8       	ldi	r30, 0x8C	; 140
    1312:	f9 e0       	ldi	r31, 0x09	; 9
    1314:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__+0x20>
    1318:	85 e0       	ldi	r24, 0x05	; 5
    131a:	8c 83       	std	Y+4, r24	; 0x04
    131c:	8b 89       	ldd	r24, Y+19	; 0x13
    131e:	9c 89       	ldd	r25, Y+20	; 0x14
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	9e 01       	movw	r18, r28
    1326:	29 5e       	subi	r18, 0xE9	; 233
    1328:	3f 4f       	sbci	r19, 0xFF	; 255
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	6d 89       	ldd	r22, Y+21	; 0x15
    1330:	7e 89       	ldd	r23, Y+22	; 0x16
    1332:	a9 01       	movw	r20, r18
    1334:	0e 94 24 0b 	call	0x1648	; 0x1648 <vfscanf>
    1338:	2e 96       	adiw	r28, 0x0e	; 14
    133a:	e2 e0       	ldi	r30, 0x02	; 2
    133c:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__+0x20>

00001340 <putval>:
    1340:	fc 01       	movw	r30, r24
    1342:	20 fd       	sbrc	r18, 0
    1344:	08 c0       	rjmp	.+16     	; 0x1356 <putval+0x16>
    1346:	23 fd       	sbrc	r18, 3
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <putval+0x14>
    134a:	22 ff       	sbrs	r18, 2
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <putval+0x12>
    134e:	73 83       	std	Z+3, r23	; 0x03
    1350:	62 83       	std	Z+2, r22	; 0x02
    1352:	51 83       	std	Z+1, r21	; 0x01
    1354:	40 83       	st	Z, r20
    1356:	08 95       	ret

00001358 <mulacc>:
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	44 ff       	sbrs	r20, 4
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <mulacc+0x10>
    1364:	33 e0       	ldi	r19, 0x03	; 3
    1366:	11 c0       	rjmp	.+34     	; 0x138a <mulacc+0x32>
    1368:	46 ff       	sbrs	r20, 6
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <mulacc+0x18>
    136c:	34 e0       	ldi	r19, 0x04	; 4
    136e:	0d c0       	rjmp	.+26     	; 0x138a <mulacc+0x32>
    1370:	db 01       	movw	r26, r22
    1372:	fc 01       	movw	r30, r24
    1374:	aa 0f       	add	r26, r26
    1376:	bb 1f       	adc	r27, r27
    1378:	ee 1f       	adc	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	10 94       	com	r1
    137e:	d1 f7       	brne	.-12     	; 0x1374 <mulacc+0x1c>
    1380:	6a 0f       	add	r22, r26
    1382:	7b 1f       	adc	r23, r27
    1384:	8e 1f       	adc	r24, r30
    1386:	9f 1f       	adc	r25, r31
    1388:	31 e0       	ldi	r19, 0x01	; 1
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	31 50       	subi	r19, 0x01	; 1
    1394:	d1 f7       	brne	.-12     	; 0x138a <mulacc+0x32>
    1396:	7b 01       	movw	r14, r22
    1398:	8c 01       	movw	r16, r24
    139a:	e2 0e       	add	r14, r18
    139c:	f1 1c       	adc	r15, r1
    139e:	01 1d       	adc	r16, r1
    13a0:	11 1d       	adc	r17, r1
    13a2:	a8 01       	movw	r20, r16
    13a4:	97 01       	movw	r18, r14
    13a6:	b7 01       	movw	r22, r14
    13a8:	ca 01       	movw	r24, r20
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	08 95       	ret

000013b4 <skip_spaces>:
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	8c 01       	movw	r16, r24
    13be:	c8 01       	movw	r24, r16
    13c0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    13c4:	ec 01       	movw	r28, r24
    13c6:	97 fd       	sbrc	r25, 7
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <skip_spaces+0x26>
    13ca:	0e 94 91 1a 	call	0x3522	; 0x3522 <isspace>
    13ce:	89 2b       	or	r24, r25
    13d0:	b1 f7       	brne	.-20     	; 0x13be <skip_spaces+0xa>
    13d2:	ce 01       	movw	r24, r28
    13d4:	b8 01       	movw	r22, r16
    13d6:	0e 94 92 0c 	call	0x1924	; 0x1924 <ungetc>
    13da:	ce 01       	movw	r24, r28
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	08 95       	ret

000013e6 <conv_int>:
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e9 ef       	ldi	r30, 0xF9	; 249
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__prologue_saves__+0x10>
    13f2:	ec 01       	movw	r28, r24
    13f4:	c6 2e       	mov	r12, r22
    13f6:	5a 01       	movw	r10, r20
    13f8:	12 2f       	mov	r17, r18
    13fa:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    13fe:	ac 01       	movw	r20, r24
    1400:	8b 32       	cpi	r24, 0x2B	; 43
    1402:	19 f0       	breq	.+6      	; 0x140a <conv_int+0x24>
    1404:	8d 32       	cpi	r24, 0x2D	; 45
    1406:	51 f4       	brne	.+20     	; 0x141c <conv_int+0x36>
    1408:	10 68       	ori	r17, 0x80	; 128
    140a:	ca 94       	dec	r12
    140c:	09 f4       	brne	.+2      	; 0x1410 <conv_int+0x2a>
    140e:	6d c0       	rjmp	.+218    	; 0x14ea <conv_int+0x104>
    1410:	ce 01       	movw	r24, r28
    1412:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    1416:	ac 01       	movw	r20, r24
    1418:	97 fd       	sbrc	r25, 7
    141a:	67 c0       	rjmp	.+206    	; 0x14ea <conv_int+0x104>
    141c:	6d ef       	ldi	r22, 0xFD	; 253
    141e:	d6 2e       	mov	r13, r22
    1420:	d1 22       	and	r13, r17
    1422:	8d 2d       	mov	r24, r13
    1424:	80 73       	andi	r24, 0x30	; 48
    1426:	01 f5       	brne	.+64     	; 0x1468 <conv_int+0x82>
    1428:	40 33       	cpi	r20, 0x30	; 48
    142a:	f1 f4       	brne	.+60     	; 0x1468 <conv_int+0x82>
    142c:	ca 94       	dec	r12
    142e:	09 f4       	brne	.+2      	; 0x1432 <conv_int+0x4c>
    1430:	47 c0       	rjmp	.+142    	; 0x14c0 <conv_int+0xda>
    1432:	ce 01       	movw	r24, r28
    1434:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    1438:	ac 01       	movw	r20, r24
    143a:	97 fd       	sbrc	r25, 7
    143c:	41 c0       	rjmp	.+130    	; 0x14c0 <conv_int+0xda>
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	d8 2a       	or	r13, r24
    1442:	48 37       	cpi	r20, 0x78	; 120
    1444:	11 f0       	breq	.+4      	; 0x144a <conv_int+0x64>
    1446:	48 35       	cpi	r20, 0x58	; 88
    1448:	59 f4       	brne	.+22     	; 0x1460 <conv_int+0x7a>
    144a:	80 e4       	ldi	r24, 0x40	; 64
    144c:	d8 2a       	or	r13, r24
    144e:	ca 94       	dec	r12
    1450:	b9 f1       	breq	.+110    	; 0x14c0 <conv_int+0xda>
    1452:	ce 01       	movw	r24, r28
    1454:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    1458:	ac 01       	movw	r20, r24
    145a:	99 23       	and	r25, r25
    145c:	2c f4       	brge	.+10     	; 0x1468 <conv_int+0x82>
    145e:	30 c0       	rjmp	.+96     	; 0x14c0 <conv_int+0xda>
    1460:	d6 fc       	sbrc	r13, 6
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <conv_int+0x82>
    1464:	80 e1       	ldi	r24, 0x10	; 16
    1466:	d8 2a       	or	r13, r24
    1468:	ee 24       	eor	r14, r14
    146a:	ff 24       	eor	r15, r15
    146c:	87 01       	movw	r16, r14
    146e:	24 2f       	mov	r18, r20
    1470:	20 53       	subi	r18, 0x30	; 48
    1472:	28 30       	cpi	r18, 0x08	; 8
    1474:	88 f0       	brcs	.+34     	; 0x1498 <conv_int+0xb2>
    1476:	d4 fc       	sbrc	r13, 4
    1478:	09 c0       	rjmp	.+18     	; 0x148c <conv_int+0xa6>
    147a:	2a 30       	cpi	r18, 0x0A	; 10
    147c:	68 f0       	brcs	.+26     	; 0x1498 <conv_int+0xb2>
    147e:	d6 fe       	sbrs	r13, 6
    1480:	05 c0       	rjmp	.+10     	; 0x148c <conv_int+0xa6>
    1482:	2f 7d       	andi	r18, 0xDF	; 223
    1484:	82 2f       	mov	r24, r18
    1486:	81 51       	subi	r24, 0x11	; 17
    1488:	86 30       	cpi	r24, 0x06	; 6
    148a:	28 f0       	brcs	.+10     	; 0x1496 <conv_int+0xb0>
    148c:	ca 01       	movw	r24, r20
    148e:	be 01       	movw	r22, r28
    1490:	0e 94 92 0c 	call	0x1924	; 0x1924 <ungetc>
    1494:	12 c0       	rjmp	.+36     	; 0x14ba <conv_int+0xd4>
    1496:	27 50       	subi	r18, 0x07	; 7
    1498:	c8 01       	movw	r24, r16
    149a:	b7 01       	movw	r22, r14
    149c:	4d 2d       	mov	r20, r13
    149e:	0e 94 ac 09 	call	0x1358	; 0x1358 <mulacc>
    14a2:	7b 01       	movw	r14, r22
    14a4:	8c 01       	movw	r16, r24
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	d8 2a       	or	r13, r24
    14aa:	ca 94       	dec	r12
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <conv_int+0xe0>
    14ae:	ce 01       	movw	r24, r28
    14b0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    14b4:	ac 01       	movw	r20, r24
    14b6:	97 ff       	sbrs	r25, 7
    14b8:	da cf       	rjmp	.-76     	; 0x146e <conv_int+0x88>
    14ba:	d1 fc       	sbrc	r13, 1
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <conv_int+0xe0>
    14be:	15 c0       	rjmp	.+42     	; 0x14ea <conv_int+0x104>
    14c0:	ee 24       	eor	r14, r14
    14c2:	ff 24       	eor	r15, r15
    14c4:	87 01       	movw	r16, r14
    14c6:	d7 fe       	sbrs	r13, 7
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <conv_int+0xf4>
    14ca:	10 95       	com	r17
    14cc:	00 95       	com	r16
    14ce:	f0 94       	com	r15
    14d0:	e0 94       	com	r14
    14d2:	e1 1c       	adc	r14, r1
    14d4:	f1 1c       	adc	r15, r1
    14d6:	01 1d       	adc	r16, r1
    14d8:	11 1d       	adc	r17, r1
    14da:	c5 01       	movw	r24, r10
    14dc:	b8 01       	movw	r22, r16
    14de:	a7 01       	movw	r20, r14
    14e0:	2d 2d       	mov	r18, r13
    14e2:	0e 94 a0 09 	call	0x1340	; 0x1340 <putval>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <conv_int+0x106>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	ea e0       	ldi	r30, 0x0A	; 10
    14f2:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__epilogue_restores__+0x10>

000014f6 <conv_brk>:
    14f6:	a0 e2       	ldi	r26, 0x20	; 32
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e8       	ldi	r30, 0x81	; 129
    14fc:	fa e0       	ldi	r31, 0x0A	; 10
    14fe:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__+0x8>
    1502:	6c 01       	movw	r12, r24
    1504:	a6 2e       	mov	r10, r22
    1506:	8a 01       	movw	r16, r20
    1508:	79 01       	movw	r14, r18
    150a:	fe 01       	movw	r30, r28
    150c:	31 96       	adiw	r30, 0x01	; 1
    150e:	80 e2       	ldi	r24, 0x20	; 32
    1510:	df 01       	movw	r26, r30
    1512:	1d 92       	st	X+, r1
    1514:	8a 95       	dec	r24
    1516:	e9 f7       	brne	.-6      	; 0x1512 <conv_brk+0x1c>
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	4f 01       	movw	r8, r30
    1524:	a1 e0       	ldi	r26, 0x01	; 1
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	f6 01       	movw	r30, r12
    152a:	83 81       	ldd	r24, Z+3	; 0x03
    152c:	f7 01       	movw	r30, r14
    152e:	83 fd       	sbrc	r24, 3
    1530:	25 91       	lpm	r18, Z+
    1532:	83 ff       	sbrs	r24, 3
    1534:	21 91       	ld	r18, Z+
    1536:	7f 01       	movw	r14, r30
    1538:	22 23       	and	r18, r18
    153a:	09 f4       	brne	.+2      	; 0x153e <conv_brk+0x48>
    153c:	7e c0       	rjmp	.+252    	; 0x163a <conv_brk+0x144>
    153e:	2e 35       	cpi	r18, 0x5E	; 94
    1540:	19 f4       	brne	.+6      	; 0x1548 <conv_brk+0x52>
    1542:	41 15       	cp	r20, r1
    1544:	51 05       	cpc	r21, r1
    1546:	69 f1       	breq	.+90     	; 0x15a2 <conv_brk+0xac>
    1548:	87 2f       	mov	r24, r23
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	84 17       	cp	r24, r20
    154e:	95 07       	cpc	r25, r21
    1550:	44 f4       	brge	.+16     	; 0x1562 <conv_brk+0x6c>
    1552:	2d 35       	cpi	r18, 0x5D	; 93
    1554:	51 f1       	breq	.+84     	; 0x15aa <conv_brk+0xb4>
    1556:	2d 32       	cpi	r18, 0x2D	; 45
    1558:	21 f4       	brne	.+8      	; 0x1562 <conv_brk+0x6c>
    155a:	33 23       	and	r19, r19
    155c:	29 f4       	brne	.+10     	; 0x1568 <conv_brk+0x72>
    155e:	31 e0       	ldi	r19, 0x01	; 1
    1560:	21 c0       	rjmp	.+66     	; 0x15a4 <conv_brk+0xae>
    1562:	33 23       	and	r19, r19
    1564:	09 f4       	brne	.+2      	; 0x1568 <conv_brk+0x72>
    1566:	62 2f       	mov	r22, r18
    1568:	32 2f       	mov	r19, r18
    156a:	83 2f       	mov	r24, r19
    156c:	86 95       	lsr	r24
    156e:	86 95       	lsr	r24
    1570:	86 95       	lsr	r24
    1572:	f4 01       	movw	r30, r8
    1574:	e8 0f       	add	r30, r24
    1576:	f1 1d       	adc	r31, r1
    1578:	83 2f       	mov	r24, r19
    157a:	87 70       	andi	r24, 0x07	; 7
    157c:	3d 01       	movw	r6, r26
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <conv_brk+0x8e>
    1580:	66 0c       	add	r6, r6
    1582:	77 1c       	adc	r7, r7
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <conv_brk+0x8a>
    1588:	20 81       	ld	r18, Z
    158a:	26 29       	or	r18, r6
    158c:	20 83       	st	Z, r18
    158e:	36 17       	cp	r19, r22
    1590:	11 f4       	brne	.+4      	; 0x1596 <conv_brk+0xa0>
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <conv_brk+0xae>
    1596:	36 17       	cp	r19, r22
    1598:	10 f4       	brcc	.+4      	; 0x159e <conv_brk+0xa8>
    159a:	3f 5f       	subi	r19, 0xFF	; 255
    159c:	e6 cf       	rjmp	.-52     	; 0x156a <conv_brk+0x74>
    159e:	31 50       	subi	r19, 0x01	; 1
    15a0:	e4 cf       	rjmp	.-56     	; 0x156a <conv_brk+0x74>
    15a2:	71 e0       	ldi	r23, 0x01	; 1
    15a4:	4f 5f       	subi	r20, 0xFF	; 255
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255
    15a8:	bf cf       	rjmp	.-130    	; 0x1528 <conv_brk+0x32>
    15aa:	33 23       	and	r19, r19
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <conv_brk+0xbe>
    15ae:	8e 81       	ldd	r24, Y+6	; 0x06
    15b0:	80 62       	ori	r24, 0x20	; 32
    15b2:	8e 83       	std	Y+6, r24	; 0x06
    15b4:	77 23       	and	r23, r23
    15b6:	59 f0       	breq	.+22     	; 0x15ce <conv_brk+0xd8>
    15b8:	fe 01       	movw	r30, r28
    15ba:	31 96       	adiw	r30, 0x01	; 1
    15bc:	9e 01       	movw	r18, r28
    15be:	2f 5d       	subi	r18, 0xDF	; 223
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	80 95       	com	r24
    15c6:	81 93       	st	Z+, r24
    15c8:	e2 17       	cp	r30, r18
    15ca:	f3 07       	cpc	r31, r19
    15cc:	d1 f7       	brne	.-12     	; 0x15c2 <conv_brk+0xcc>
    15ce:	bb 24       	eor	r11, r11
    15d0:	b3 94       	inc	r11
    15d2:	4e 01       	movw	r8, r28
    15d4:	08 94       	sec
    15d6:	81 1c       	adc	r8, r1
    15d8:	91 1c       	adc	r9, r1
    15da:	c6 01       	movw	r24, r12
    15dc:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    15e0:	ac 01       	movw	r20, r24
    15e2:	97 fd       	sbrc	r25, 7
    15e4:	22 c0       	rjmp	.+68     	; 0x162a <conv_brk+0x134>
    15e6:	86 95       	lsr	r24
    15e8:	86 95       	lsr	r24
    15ea:	86 95       	lsr	r24
    15ec:	f4 01       	movw	r30, r8
    15ee:	e8 0f       	add	r30, r24
    15f0:	f1 1d       	adc	r31, r1
    15f2:	80 81       	ld	r24, Z
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9a 01       	movw	r18, r20
    15f8:	27 70       	andi	r18, 0x07	; 7
    15fa:	30 70       	andi	r19, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <conv_brk+0x10c>
    15fe:	95 95       	asr	r25
    1600:	87 95       	ror	r24
    1602:	2a 95       	dec	r18
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <conv_brk+0x108>
    1606:	80 fd       	sbrc	r24, 0
    1608:	05 c0       	rjmp	.+10     	; 0x1614 <conv_brk+0x11e>
    160a:	ca 01       	movw	r24, r20
    160c:	b6 01       	movw	r22, r12
    160e:	0e 94 92 0c 	call	0x1924	; 0x1924 <ungetc>
    1612:	0b c0       	rjmp	.+22     	; 0x162a <conv_brk+0x134>
    1614:	01 15       	cp	r16, r1
    1616:	11 05       	cpc	r17, r1
    1618:	19 f0       	breq	.+6      	; 0x1620 <conv_brk+0x12a>
    161a:	d8 01       	movw	r26, r16
    161c:	4d 93       	st	X+, r20
    161e:	8d 01       	movw	r16, r26
    1620:	aa 94       	dec	r10
    1622:	bb 24       	eor	r11, r11
    1624:	aa 20       	and	r10, r10
    1626:	c9 f6       	brne	.-78     	; 0x15da <conv_brk+0xe4>
    1628:	02 c0       	rjmp	.+4      	; 0x162e <conv_brk+0x138>
    162a:	bb 20       	and	r11, r11
    162c:	31 f4       	brne	.+12     	; 0x163a <conv_brk+0x144>
    162e:	01 15       	cp	r16, r1
    1630:	11 05       	cpc	r17, r1
    1632:	29 f0       	breq	.+10     	; 0x163e <conv_brk+0x148>
    1634:	f8 01       	movw	r30, r16
    1636:	10 82       	st	Z, r1
    1638:	02 c0       	rjmp	.+4      	; 0x163e <conv_brk+0x148>
    163a:	ee 24       	eor	r14, r14
    163c:	ff 24       	eor	r15, r15
    163e:	c7 01       	movw	r24, r14
    1640:	a0 96       	adiw	r28, 0x20	; 32
    1642:	ee e0       	ldi	r30, 0x0E	; 14
    1644:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__+0x8>

00001648 <vfscanf>:
    1648:	a0 e0       	ldi	r26, 0x00	; 0
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ea e2       	ldi	r30, 0x2A	; 42
    164e:	fb e0       	ldi	r31, 0x0B	; 11
    1650:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__prologue_saves__+0x8>
    1654:	5c 01       	movw	r10, r24
    1656:	6b 01       	movw	r12, r22
    1658:	3a 01       	movw	r6, r20
    165a:	fc 01       	movw	r30, r24
    165c:	17 82       	std	Z+7, r1	; 0x07
    165e:	16 82       	std	Z+6, r1	; 0x06
    1660:	88 24       	eor	r8, r8
    1662:	ea c0       	rjmp	.+468    	; 0x1838 <vfscanf+0x1f0>
    1664:	81 2f       	mov	r24, r17
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 91 1a 	call	0x3522	; 0x3522 <isspace>
    166c:	89 2b       	or	r24, r25
    166e:	21 f0       	breq	.+8      	; 0x1678 <vfscanf+0x30>
    1670:	c5 01       	movw	r24, r10
    1672:	0e 94 da 09 	call	0x13b4	; 0x13b4 <skip_spaces>
    1676:	e0 c0       	rjmp	.+448    	; 0x1838 <vfscanf+0x1f0>
    1678:	15 32       	cpi	r17, 0x25	; 37
    167a:	49 f4       	brne	.+18     	; 0x168e <vfscanf+0x46>
    167c:	f6 01       	movw	r30, r12
    167e:	f3 fc       	sbrc	r15, 3
    1680:	65 91       	lpm	r22, Z+
    1682:	f3 fe       	sbrs	r15, 3
    1684:	61 91       	ld	r22, Z+
    1686:	6f 01       	movw	r12, r30
    1688:	65 32       	cpi	r22, 0x25	; 37
    168a:	69 f4       	brne	.+26     	; 0x16a6 <vfscanf+0x5e>
    168c:	15 e2       	ldi	r17, 0x25	; 37
    168e:	c5 01       	movw	r24, r10
    1690:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    1694:	97 fd       	sbrc	r25, 7
    1696:	dc c0       	rjmp	.+440    	; 0x1850 <vfscanf+0x208>
    1698:	18 17       	cp	r17, r24
    169a:	09 f4       	brne	.+2      	; 0x169e <vfscanf+0x56>
    169c:	cd c0       	rjmp	.+410    	; 0x1838 <vfscanf+0x1f0>
    169e:	b5 01       	movw	r22, r10
    16a0:	0e 94 92 0c 	call	0x1924	; 0x1924 <ungetc>
    16a4:	da c0       	rjmp	.+436    	; 0x185a <vfscanf+0x212>
    16a6:	6a 32       	cpi	r22, 0x2A	; 42
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <vfscanf+0x68>
    16aa:	16 2f       	mov	r17, r22
    16ac:	00 e0       	ldi	r16, 0x00	; 0
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfscanf+0x74>
    16b0:	f3 fc       	sbrc	r15, 3
    16b2:	15 91       	lpm	r17, Z+
    16b4:	f3 fe       	sbrs	r15, 3
    16b6:	11 91       	ld	r17, Z+
    16b8:	6f 01       	movw	r12, r30
    16ba:	01 e0       	ldi	r16, 0x01	; 1
    16bc:	99 24       	eor	r9, r9
    16be:	0f c0       	rjmp	.+30     	; 0x16de <vfscanf+0x96>
    16c0:	02 60       	ori	r16, 0x02	; 2
    16c2:	69 2d       	mov	r22, r9
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	40 e2       	ldi	r20, 0x20	; 32
    16cc:	0e 94 ac 09 	call	0x1358	; 0x1358 <mulacc>
    16d0:	96 2e       	mov	r9, r22
    16d2:	f6 01       	movw	r30, r12
    16d4:	f3 fc       	sbrc	r15, 3
    16d6:	15 91       	lpm	r17, Z+
    16d8:	f3 fe       	sbrs	r15, 3
    16da:	11 91       	ld	r17, Z+
    16dc:	6f 01       	movw	r12, r30
    16de:	21 2f       	mov	r18, r17
    16e0:	20 53       	subi	r18, 0x30	; 48
    16e2:	2a 30       	cpi	r18, 0x0A	; 10
    16e4:	68 f3       	brcs	.-38     	; 0x16c0 <vfscanf+0x78>
    16e6:	01 fd       	sbrc	r16, 1
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <vfscanf+0xa8>
    16ea:	99 24       	eor	r9, r9
    16ec:	9a 94       	dec	r9
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <vfscanf+0xae>
    16f0:	99 20       	and	r9, r9
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <vfscanf+0xae>
    16f4:	b2 c0       	rjmp	.+356    	; 0x185a <vfscanf+0x212>
    16f6:	18 36       	cpi	r17, 0x68	; 104
    16f8:	21 f0       	breq	.+8      	; 0x1702 <vfscanf+0xba>
    16fa:	1c 36       	cpi	r17, 0x6C	; 108
    16fc:	99 f4       	brne	.+38     	; 0x1724 <vfscanf+0xdc>
    16fe:	f6 01       	movw	r30, r12
    1700:	0b c0       	rjmp	.+22     	; 0x1718 <vfscanf+0xd0>
    1702:	f6 01       	movw	r30, r12
    1704:	f3 fc       	sbrc	r15, 3
    1706:	65 91       	lpm	r22, Z+
    1708:	f3 fe       	sbrs	r15, 3
    170a:	61 91       	ld	r22, Z+
    170c:	68 36       	cpi	r22, 0x68	; 104
    170e:	19 f0       	breq	.+6      	; 0x1716 <vfscanf+0xce>
    1710:	6f 01       	movw	r12, r30
    1712:	16 2f       	mov	r17, r22
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <vfscanf+0xdc>
    1716:	08 60       	ori	r16, 0x08	; 8
    1718:	04 60       	ori	r16, 0x04	; 4
    171a:	f3 fc       	sbrc	r15, 3
    171c:	15 91       	lpm	r17, Z+
    171e:	f3 fe       	sbrs	r15, 3
    1720:	11 91       	ld	r17, Z+
    1722:	6f 01       	movw	r12, r30
    1724:	11 23       	and	r17, r17
    1726:	09 f4       	brne	.+2      	; 0x172a <vfscanf+0xe2>
    1728:	98 c0       	rjmp	.+304    	; 0x185a <vfscanf+0x212>
    172a:	8e e5       	ldi	r24, 0x5E	; 94
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	61 2f       	mov	r22, r17
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	0e 94 35 0c 	call	0x186a	; 0x186a <strchr_P>
    1736:	89 2b       	or	r24, r25
    1738:	09 f4       	brne	.+2      	; 0x173c <vfscanf+0xf4>
    173a:	8f c0       	rjmp	.+286    	; 0x185a <vfscanf+0x212>
    173c:	80 2f       	mov	r24, r16
    173e:	00 ff       	sbrs	r16, 0
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <vfscanf+0x100>
    1742:	ee 24       	eor	r14, r14
    1744:	ff 24       	eor	r15, r15
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <vfscanf+0x10e>
    1748:	f3 01       	movw	r30, r6
    174a:	e0 80       	ld	r14, Z
    174c:	f1 80       	ldd	r15, Z+1	; 0x01
    174e:	22 e0       	ldi	r18, 0x02	; 2
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	62 0e       	add	r6, r18
    1754:	73 1e       	adc	r7, r19
    1756:	1e 36       	cpi	r17, 0x6E	; 110
    1758:	51 f4       	brne	.+20     	; 0x176e <vfscanf+0x126>
    175a:	f5 01       	movw	r30, r10
    175c:	46 81       	ldd	r20, Z+6	; 0x06
    175e:	57 81       	ldd	r21, Z+7	; 0x07
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	c7 01       	movw	r24, r14
    1766:	20 2f       	mov	r18, r16
    1768:	0e 94 a0 09 	call	0x1340	; 0x1340 <putval>
    176c:	65 c0       	rjmp	.+202    	; 0x1838 <vfscanf+0x1f0>
    176e:	13 36       	cpi	r17, 0x63	; 99
    1770:	91 f4       	brne	.+36     	; 0x1796 <vfscanf+0x14e>
    1772:	81 fd       	sbrc	r24, 1
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfscanf+0x132>
    1776:	99 24       	eor	r9, r9
    1778:	93 94       	inc	r9
    177a:	c5 01       	movw	r24, r10
    177c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    1780:	97 fd       	sbrc	r25, 7
    1782:	66 c0       	rjmp	.+204    	; 0x1850 <vfscanf+0x208>
    1784:	e1 14       	cp	r14, r1
    1786:	f1 04       	cpc	r15, r1
    1788:	19 f0       	breq	.+6      	; 0x1790 <vfscanf+0x148>
    178a:	f7 01       	movw	r30, r14
    178c:	81 93       	st	Z+, r24
    178e:	7f 01       	movw	r14, r30
    1790:	9a 94       	dec	r9
    1792:	99 f7       	brne	.-26     	; 0x177a <vfscanf+0x132>
    1794:	4f c0       	rjmp	.+158    	; 0x1834 <vfscanf+0x1ec>
    1796:	1b 35       	cpi	r17, 0x5B	; 91
    1798:	59 f4       	brne	.+22     	; 0x17b0 <vfscanf+0x168>
    179a:	c5 01       	movw	r24, r10
    179c:	69 2d       	mov	r22, r9
    179e:	a7 01       	movw	r20, r14
    17a0:	96 01       	movw	r18, r12
    17a2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <conv_brk>
    17a6:	6c 01       	movw	r12, r24
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	09 f0       	breq	.+2      	; 0x17ae <vfscanf+0x166>
    17ac:	43 c0       	rjmp	.+134    	; 0x1834 <vfscanf+0x1ec>
    17ae:	3d c0       	rjmp	.+122    	; 0x182a <vfscanf+0x1e2>
    17b0:	c5 01       	movw	r24, r10
    17b2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <skip_spaces>
    17b6:	97 fd       	sbrc	r25, 7
    17b8:	4b c0       	rjmp	.+150    	; 0x1850 <vfscanf+0x208>
    17ba:	1f 36       	cpi	r17, 0x6F	; 111
    17bc:	59 f1       	breq	.+86     	; 0x1814 <vfscanf+0x1cc>
    17be:	10 37       	cpi	r17, 0x70	; 112
    17c0:	28 f4       	brcc	.+10     	; 0x17cc <vfscanf+0x184>
    17c2:	14 36       	cpi	r17, 0x64	; 100
    17c4:	29 f1       	breq	.+74     	; 0x1810 <vfscanf+0x1c8>
    17c6:	19 36       	cpi	r17, 0x69	; 105
    17c8:	39 f5       	brne	.+78     	; 0x1818 <vfscanf+0x1d0>
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <vfscanf+0x1d2>
    17cc:	13 37       	cpi	r17, 0x73	; 115
    17ce:	19 f0       	breq	.+6      	; 0x17d6 <vfscanf+0x18e>
    17d0:	15 37       	cpi	r17, 0x75	; 117
    17d2:	11 f5       	brne	.+68     	; 0x1818 <vfscanf+0x1d0>
    17d4:	1d c0       	rjmp	.+58     	; 0x1810 <vfscanf+0x1c8>
    17d6:	c5 01       	movw	r24, r10
    17d8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <fgetc>
    17dc:	ec 01       	movw	r28, r24
    17de:	97 fd       	sbrc	r25, 7
    17e0:	11 c0       	rjmp	.+34     	; 0x1804 <vfscanf+0x1bc>
    17e2:	0e 94 91 1a 	call	0x3522	; 0x3522 <isspace>
    17e6:	89 2b       	or	r24, r25
    17e8:	29 f0       	breq	.+10     	; 0x17f4 <vfscanf+0x1ac>
    17ea:	ce 01       	movw	r24, r28
    17ec:	b5 01       	movw	r22, r10
    17ee:	0e 94 92 0c 	call	0x1924	; 0x1924 <ungetc>
    17f2:	08 c0       	rjmp	.+16     	; 0x1804 <vfscanf+0x1bc>
    17f4:	e1 14       	cp	r14, r1
    17f6:	f1 04       	cpc	r15, r1
    17f8:	19 f0       	breq	.+6      	; 0x1800 <vfscanf+0x1b8>
    17fa:	f7 01       	movw	r30, r14
    17fc:	c1 93       	st	Z+, r28
    17fe:	7f 01       	movw	r14, r30
    1800:	9a 94       	dec	r9
    1802:	49 f7       	brne	.-46     	; 0x17d6 <vfscanf+0x18e>
    1804:	e1 14       	cp	r14, r1
    1806:	f1 04       	cpc	r15, r1
    1808:	a9 f0       	breq	.+42     	; 0x1834 <vfscanf+0x1ec>
    180a:	f7 01       	movw	r30, r14
    180c:	10 82       	st	Z, r1
    180e:	12 c0       	rjmp	.+36     	; 0x1834 <vfscanf+0x1ec>
    1810:	00 62       	ori	r16, 0x20	; 32
    1812:	03 c0       	rjmp	.+6      	; 0x181a <vfscanf+0x1d2>
    1814:	00 61       	ori	r16, 0x10	; 16
    1816:	01 c0       	rjmp	.+2      	; 0x181a <vfscanf+0x1d2>
    1818:	00 64       	ori	r16, 0x40	; 64
    181a:	c5 01       	movw	r24, r10
    181c:	69 2d       	mov	r22, r9
    181e:	a7 01       	movw	r20, r14
    1820:	20 2f       	mov	r18, r16
    1822:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <conv_int>
    1826:	88 23       	and	r24, r24
    1828:	29 f4       	brne	.+10     	; 0x1834 <vfscanf+0x1ec>
    182a:	f5 01       	movw	r30, r10
    182c:	83 81       	ldd	r24, Z+3	; 0x03
    182e:	80 73       	andi	r24, 0x30	; 48
    1830:	79 f4       	brne	.+30     	; 0x1850 <vfscanf+0x208>
    1832:	13 c0       	rjmp	.+38     	; 0x185a <vfscanf+0x212>
    1834:	00 ff       	sbrs	r16, 0
    1836:	83 94       	inc	r8
    1838:	f5 01       	movw	r30, r10
    183a:	f3 80       	ldd	r15, Z+3	; 0x03
    183c:	f6 01       	movw	r30, r12
    183e:	f3 fc       	sbrc	r15, 3
    1840:	15 91       	lpm	r17, Z+
    1842:	f3 fe       	sbrs	r15, 3
    1844:	11 91       	ld	r17, Z+
    1846:	6f 01       	movw	r12, r30
    1848:	11 23       	and	r17, r17
    184a:	09 f0       	breq	.+2      	; 0x184e <vfscanf+0x206>
    184c:	0b cf       	rjmp	.-490    	; 0x1664 <vfscanf+0x1c>
    184e:	05 c0       	rjmp	.+10     	; 0x185a <vfscanf+0x212>
    1850:	88 20       	and	r8, r8
    1852:	19 f4       	brne	.+6      	; 0x185a <vfscanf+0x212>
    1854:	2f ef       	ldi	r18, 0xFF	; 255
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	02 c0       	rjmp	.+4      	; 0x185e <vfscanf+0x216>
    185a:	28 2d       	mov	r18, r8
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	c9 01       	movw	r24, r18
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	ee e0       	ldi	r30, 0x0E	; 14
    1866:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__epilogue_restores__+0x8>

0000186a <strchr_P>:
    186a:	fc 01       	movw	r30, r24
    186c:	05 90       	lpm	r0, Z+
    186e:	06 16       	cp	r0, r22
    1870:	21 f0       	breq	.+8      	; 0x187a <strchr_P+0x10>
    1872:	00 20       	and	r0, r0
    1874:	d9 f7       	brne	.-10     	; 0x186c <strchr_P+0x2>
    1876:	c0 01       	movw	r24, r0
    1878:	08 95       	ret
    187a:	31 97       	sbiw	r30, 0x01	; 1
    187c:	cf 01       	movw	r24, r30
    187e:	08 95       	ret

00001880 <strrev>:
    1880:	dc 01       	movw	r26, r24
    1882:	fc 01       	movw	r30, r24
    1884:	67 2f       	mov	r22, r23
    1886:	71 91       	ld	r23, Z+
    1888:	77 23       	and	r23, r23
    188a:	e1 f7       	brne	.-8      	; 0x1884 <strrev+0x4>
    188c:	32 97       	sbiw	r30, 0x02	; 2
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <strrev+0x18>
    1890:	7c 91       	ld	r23, X
    1892:	6d 93       	st	X+, r22
    1894:	70 83       	st	Z, r23
    1896:	62 91       	ld	r22, -Z
    1898:	ae 17       	cp	r26, r30
    189a:	bf 07       	cpc	r27, r31
    189c:	c8 f3       	brcs	.-14     	; 0x1890 <strrev+0x10>
    189e:	08 95       	ret

000018a0 <fgetc>:
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	ec 01       	movw	r28, r24
    18a6:	4b 81       	ldd	r20, Y+3	; 0x03
    18a8:	40 ff       	sbrs	r20, 0
    18aa:	1a c0       	rjmp	.+52     	; 0x18e0 <fgetc+0x40>
    18ac:	46 ff       	sbrs	r20, 6
    18ae:	0a c0       	rjmp	.+20     	; 0x18c4 <fgetc+0x24>
    18b0:	4f 7b       	andi	r20, 0xBF	; 191
    18b2:	4b 83       	std	Y+3, r20	; 0x03
    18b4:	8e 81       	ldd	r24, Y+6	; 0x06
    18b6:	9f 81       	ldd	r25, Y+7	; 0x07
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	9f 83       	std	Y+7, r25	; 0x07
    18bc:	8e 83       	std	Y+6, r24	; 0x06
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	2b c0       	rjmp	.+86     	; 0x191a <fgetc+0x7a>
    18c4:	42 ff       	sbrs	r20, 2
    18c6:	13 c0       	rjmp	.+38     	; 0x18ee <fgetc+0x4e>
    18c8:	e8 81       	ld	r30, Y
    18ca:	f9 81       	ldd	r31, Y+1	; 0x01
    18cc:	80 81       	ld	r24, Z
    18ce:	28 2f       	mov	r18, r24
    18d0:	33 27       	eor	r19, r19
    18d2:	27 fd       	sbrc	r18, 7
    18d4:	30 95       	com	r19
    18d6:	21 15       	cp	r18, r1
    18d8:	31 05       	cpc	r19, r1
    18da:	29 f4       	brne	.+10     	; 0x18e6 <fgetc+0x46>
    18dc:	40 62       	ori	r20, 0x20	; 32
    18de:	4b 83       	std	Y+3, r20	; 0x03
    18e0:	2f ef       	ldi	r18, 0xFF	; 255
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <fgetc+0x7c>
    18e6:	31 96       	adiw	r30, 0x01	; 1
    18e8:	f9 83       	std	Y+1, r31	; 0x01
    18ea:	e8 83       	st	Y, r30
    18ec:	11 c0       	rjmp	.+34     	; 0x1910 <fgetc+0x70>
    18ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    18f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    18f2:	ce 01       	movw	r24, r28
    18f4:	09 95       	icall
    18f6:	9c 01       	movw	r18, r24
    18f8:	97 ff       	sbrs	r25, 7
    18fa:	0a c0       	rjmp	.+20     	; 0x1910 <fgetc+0x70>
    18fc:	9b 81       	ldd	r25, Y+3	; 0x03
    18fe:	2f 5f       	subi	r18, 0xFF	; 255
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	11 f0       	breq	.+4      	; 0x1908 <fgetc+0x68>
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	01 c0       	rjmp	.+2      	; 0x190a <fgetc+0x6a>
    1908:	80 e1       	ldi	r24, 0x10	; 16
    190a:	89 2b       	or	r24, r25
    190c:	8b 83       	std	Y+3, r24	; 0x03
    190e:	e8 cf       	rjmp	.-48     	; 0x18e0 <fgetc+0x40>
    1910:	8e 81       	ldd	r24, Y+6	; 0x06
    1912:	9f 81       	ldd	r25, Y+7	; 0x07
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	9f 83       	std	Y+7, r25	; 0x07
    1918:	8e 83       	std	Y+6, r24	; 0x06
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	c9 01       	movw	r24, r18
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <ungetc>:
    1924:	9c 01       	movw	r18, r24
    1926:	fb 01       	movw	r30, r22
    1928:	83 81       	ldd	r24, Z+3	; 0x03
    192a:	80 ff       	sbrs	r24, 0
    192c:	11 c0       	rjmp	.+34     	; 0x1950 <ungetc+0x2c>
    192e:	86 fd       	sbrc	r24, 6
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <ungetc+0x2c>
    1932:	9f ef       	ldi	r25, 0xFF	; 255
    1934:	2f 3f       	cpi	r18, 0xFF	; 255
    1936:	39 07       	cpc	r19, r25
    1938:	59 f0       	breq	.+22     	; 0x1950 <ungetc+0x2c>
    193a:	22 83       	std	Z+2, r18	; 0x02
    193c:	80 64       	ori	r24, 0x40	; 64
    193e:	8f 7d       	andi	r24, 0xDF	; 223
    1940:	83 83       	std	Z+3, r24	; 0x03
    1942:	86 81       	ldd	r24, Z+6	; 0x06
    1944:	97 81       	ldd	r25, Z+7	; 0x07
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	97 83       	std	Z+7, r25	; 0x07
    194a:	86 83       	std	Z+6, r24	; 0x06
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <ungetc+0x30>
    1950:	2f ef       	ldi	r18, 0xFF	; 255
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	c9 01       	movw	r24, r18
    1956:	08 95       	ret

00001958 <MDIO_SetPinValue>:
		}
	}
}*/

Error_State_t MDIO_SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	28 97       	sbiw	r28, 0x08	; 8
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	8a 83       	std	Y+2, r24	; 0x02
    196e:	6b 83       	std	Y+3, r22	; 0x03
    1970:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_state = Return_Ok;
    1972:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	88 30       	cpi	r24, 0x08	; 8
    1978:	18 f0       	brcs	.+6      	; 0x1980 <MDIO_SetPinValue+0x28>
	{
		Error_state = Return_NOk;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	f2 c0       	rjmp	.+484    	; 0x1b64 <MDIO_SetPinValue+0x20c>
	}
	else
	{
		if(Copy_u8Value == DIO_LOW)
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	88 23       	and	r24, r24
    1984:	09 f0       	breq	.+2      	; 0x1988 <MDIO_SetPinValue+0x30>
    1986:	78 c0       	rjmp	.+240    	; 0x1a78 <MDIO_SetPinValue+0x120>
		{
			switch(Copy_u8Port)
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	38 87       	std	Y+8, r19	; 0x08
    1990:	2f 83       	std	Y+7, r18	; 0x07
    1992:	8f 81       	ldd	r24, Y+7	; 0x07
    1994:	98 85       	ldd	r25, Y+8	; 0x08
    1996:	82 30       	cpi	r24, 0x02	; 2
    1998:	91 05       	cpc	r25, r1
    199a:	61 f1       	breq	.+88     	; 0x19f4 <MDIO_SetPinValue+0x9c>
    199c:	2f 81       	ldd	r18, Y+7	; 0x07
    199e:	38 85       	ldd	r19, Y+8	; 0x08
    19a0:	23 30       	cpi	r18, 0x03	; 3
    19a2:	31 05       	cpc	r19, r1
    19a4:	34 f4       	brge	.+12     	; 0x19b2 <MDIO_SetPinValue+0x5a>
    19a6:	8f 81       	ldd	r24, Y+7	; 0x07
    19a8:	98 85       	ldd	r25, Y+8	; 0x08
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 05       	cpc	r25, r1
    19ae:	69 f0       	breq	.+26     	; 0x19ca <MDIO_SetPinValue+0x72>
    19b0:	60 c0       	rjmp	.+192    	; 0x1a72 <MDIO_SetPinValue+0x11a>
    19b2:	2f 81       	ldd	r18, Y+7	; 0x07
    19b4:	38 85       	ldd	r19, Y+8	; 0x08
    19b6:	23 30       	cpi	r18, 0x03	; 3
    19b8:	31 05       	cpc	r19, r1
    19ba:	89 f1       	breq	.+98     	; 0x1a1e <MDIO_SetPinValue+0xc6>
    19bc:	8f 81       	ldd	r24, Y+7	; 0x07
    19be:	98 85       	ldd	r25, Y+8	; 0x08
    19c0:	84 30       	cpi	r24, 0x04	; 4
    19c2:	91 05       	cpc	r25, r1
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <MDIO_SetPinValue+0x70>
    19c6:	40 c0       	rjmp	.+128    	; 0x1a48 <MDIO_SetPinValue+0xf0>
    19c8:	54 c0       	rjmp	.+168    	; 0x1a72 <MDIO_SetPinValue+0x11a>
			{
			case DIO_PORTA:	CLR_BIT(PORTA, Copy_u8Pin);	break;
    19ca:	ab e3       	ldi	r26, 0x3B	; 59
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	eb e3       	ldi	r30, 0x3B	; 59
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <MDIO_SetPinValue+0x90>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <MDIO_SetPinValue+0x8c>
    19ec:	80 95       	com	r24
    19ee:	84 23       	and	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	b8 c0       	rjmp	.+368    	; 0x1b64 <MDIO_SetPinValue+0x20c>
			case DIO_PORTB:	CLR_BIT(PORTB, Copy_u8Pin);	break;
    19f4:	a8 e3       	ldi	r26, 0x38	; 56
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e8 e3       	ldi	r30, 0x38	; 56
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <MDIO_SetPinValue+0xba>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <MDIO_SetPinValue+0xb6>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	a3 c0       	rjmp	.+326    	; 0x1b64 <MDIO_SetPinValue+0x20c>
			case DIO_PORTC:	CLR_BIT(PORTC, Copy_u8Pin);	break;
    1a1e:	a5 e3       	ldi	r26, 0x35	; 53
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e3       	ldi	r30, 0x35	; 53
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <MDIO_SetPinValue+0xe4>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <MDIO_SetPinValue+0xe0>
    1a40:	80 95       	com	r24
    1a42:	84 23       	and	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	8e c0       	rjmp	.+284    	; 0x1b64 <MDIO_SetPinValue+0x20c>
			case DIO_PORTD:	CLR_BIT(PORTD, Copy_u8Pin);	break;
    1a48:	a2 e3       	ldi	r26, 0x32	; 50
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e2 e3       	ldi	r30, 0x32	; 50
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <MDIO_SetPinValue+0x10e>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <MDIO_SetPinValue+0x10a>
    1a6a:	80 95       	com	r24
    1a6c:	84 23       	and	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	79 c0       	rjmp	.+242    	; 0x1b64 <MDIO_SetPinValue+0x20c>
			default:	Error_state = Return_NOk;	break;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	76 c0       	rjmp	.+236    	; 0x1b64 <MDIO_SetPinValue+0x20c>
			}
		}
		else if(Copy_u8Value == DIO_HIGH)
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <MDIO_SetPinValue+0x128>
    1a7e:	72 c0       	rjmp	.+228    	; 0x1b64 <MDIO_SetPinValue+0x20c>
		{
			switch(Copy_u8Port)
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3e 83       	std	Y+6, r19	; 0x06
    1a88:	2d 83       	std	Y+5, r18	; 0x05
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	91 05       	cpc	r25, r1
    1a92:	51 f1       	breq	.+84     	; 0x1ae8 <MDIO_SetPinValue+0x190>
    1a94:	2d 81       	ldd	r18, Y+5	; 0x05
    1a96:	3e 81       	ldd	r19, Y+6	; 0x06
    1a98:	23 30       	cpi	r18, 0x03	; 3
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	34 f4       	brge	.+12     	; 0x1aaa <MDIO_SetPinValue+0x152>
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	61 f0       	breq	.+24     	; 0x1ac0 <MDIO_SetPinValue+0x168>
    1aa8:	5b c0       	rjmp	.+182    	; 0x1b60 <MDIO_SetPinValue+0x208>
    1aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1aac:	3e 81       	ldd	r19, Y+6	; 0x06
    1aae:	23 30       	cpi	r18, 0x03	; 3
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	71 f1       	breq	.+92     	; 0x1b10 <MDIO_SetPinValue+0x1b8>
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	84 30       	cpi	r24, 0x04	; 4
    1aba:	91 05       	cpc	r25, r1
    1abc:	e9 f1       	breq	.+122    	; 0x1b38 <MDIO_SetPinValue+0x1e0>
    1abe:	50 c0       	rjmp	.+160    	; 0x1b60 <MDIO_SetPinValue+0x208>
			{
			case DIO_PORTA:	SET_BIT(PORTA, Copy_u8Pin);	break;
    1ac0:	ab e3       	ldi	r26, 0x3B	; 59
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <MDIO_SetPinValue+0x186>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <MDIO_SetPinValue+0x182>
    1ae2:	84 2b       	or	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	3e c0       	rjmp	.+124    	; 0x1b64 <MDIO_SetPinValue+0x20c>
			case DIO_PORTB:	SET_BIT(PORTB, Copy_u8Pin);	break;
    1ae8:	a8 e3       	ldi	r26, 0x38	; 56
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e8 e3       	ldi	r30, 0x38	; 56
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <MDIO_SetPinValue+0x1ae>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <MDIO_SetPinValue+0x1aa>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	2a c0       	rjmp	.+84     	; 0x1b64 <MDIO_SetPinValue+0x20c>
			case DIO_PORTC:	SET_BIT(PORTC, Copy_u8Pin);	break;
    1b10:	a5 e3       	ldi	r26, 0x35	; 53
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e5 e3       	ldi	r30, 0x35	; 53
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <MDIO_SetPinValue+0x1d6>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <MDIO_SetPinValue+0x1d2>
    1b32:	84 2b       	or	r24, r20
    1b34:	8c 93       	st	X, r24
    1b36:	16 c0       	rjmp	.+44     	; 0x1b64 <MDIO_SetPinValue+0x20c>
			case DIO_PORTD:	SET_BIT(PORTD, Copy_u8Pin);	break;
    1b38:	a2 e3       	ldi	r26, 0x32	; 50
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e2 e3       	ldi	r30, 0x32	; 50
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <MDIO_SetPinValue+0x1fe>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <MDIO_SetPinValue+0x1fa>
    1b5a:	84 2b       	or	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <MDIO_SetPinValue+0x20c>
			default:	Error_state = Return_NOk;	break;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	return Error_state;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b66:	28 96       	adiw	r28, 0x08	; 8
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <MDIO_GetPinValue>:

Error_State_t MDIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* P_u8Value)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	27 97       	sbiw	r28, 0x07	; 7
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	8a 83       	std	Y+2, r24	; 0x02
    1b8e:	6b 83       	std	Y+3, r22	; 0x03
    1b90:	5d 83       	std	Y+5, r21	; 0x05
    1b92:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_state = Return_Ok;
    1b94:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	88 30       	cpi	r24, 0x08	; 8
    1b9a:	18 f0       	brcs	.+6      	; 0x1ba2 <MDIO_GetPinValue+0x2a>
	{
		Error_state = Return_NOk;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	73 c0       	rjmp	.+230    	; 0x1c88 <MDIO_GetPinValue+0x110>
	}
	else
	{
		switch(Copy_u8Port)
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3f 83       	std	Y+7, r19	; 0x07
    1baa:	2e 83       	std	Y+6, r18	; 0x06
    1bac:	4e 81       	ldd	r20, Y+6	; 0x06
    1bae:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb0:	42 30       	cpi	r20, 0x02	; 2
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	59 f1       	breq	.+86     	; 0x1c0c <MDIO_GetPinValue+0x94>
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	34 f4       	brge	.+12     	; 0x1bcc <MDIO_GetPinValue+0x54>
    1bc0:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc2:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc4:	21 30       	cpi	r18, 0x01	; 1
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	69 f0       	breq	.+26     	; 0x1be4 <MDIO_GetPinValue+0x6c>
    1bca:	5c c0       	rjmp	.+184    	; 0x1c84 <MDIO_GetPinValue+0x10c>
    1bcc:	4e 81       	ldd	r20, Y+6	; 0x06
    1bce:	5f 81       	ldd	r21, Y+7	; 0x07
    1bd0:	43 30       	cpi	r20, 0x03	; 3
    1bd2:	51 05       	cpc	r21, r1
    1bd4:	79 f1       	breq	.+94     	; 0x1c34 <MDIO_GetPinValue+0xbc>
    1bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	91 05       	cpc	r25, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <MDIO_GetPinValue+0x6a>
    1be0:	3d c0       	rjmp	.+122    	; 0x1c5c <MDIO_GetPinValue+0xe4>
    1be2:	50 c0       	rjmp	.+160    	; 0x1c84 <MDIO_GetPinValue+0x10c>
		{
		case DIO_PORTA:	*P_u8Value = GET_BIT(PINA, Copy_u8Pin);	break;
    1be4:	e9 e3       	ldi	r30, 0x39	; 57
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	88 2f       	mov	r24, r24
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a9 01       	movw	r20, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <MDIO_GetPinValue+0x84>
    1bf8:	55 95       	asr	r21
    1bfa:	47 95       	ror	r20
    1bfc:	8a 95       	dec	r24
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <MDIO_GetPinValue+0x80>
    1c00:	ca 01       	movw	r24, r20
    1c02:	81 70       	andi	r24, 0x01	; 1
    1c04:	ec 81       	ldd	r30, Y+4	; 0x04
    1c06:	fd 81       	ldd	r31, Y+5	; 0x05
    1c08:	80 83       	st	Z, r24
    1c0a:	3e c0       	rjmp	.+124    	; 0x1c88 <MDIO_GetPinValue+0x110>
		case DIO_PORTB:	*P_u8Value = GET_BIT(PINB, Copy_u8Pin);	break;
    1c0c:	e6 e3       	ldi	r30, 0x36	; 54
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a9 01       	movw	r20, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <MDIO_GetPinValue+0xac>
    1c20:	55 95       	asr	r21
    1c22:	47 95       	ror	r20
    1c24:	8a 95       	dec	r24
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <MDIO_GetPinValue+0xa8>
    1c28:	ca 01       	movw	r24, r20
    1c2a:	81 70       	andi	r24, 0x01	; 1
    1c2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c30:	80 83       	st	Z, r24
    1c32:	2a c0       	rjmp	.+84     	; 0x1c88 <MDIO_GetPinValue+0x110>
		case DIO_PORTC:	*P_u8Value = GET_BIT(PINC, Copy_u8Pin);	break;
    1c34:	e3 e3       	ldi	r30, 0x33	; 51
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a9 01       	movw	r20, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <MDIO_GetPinValue+0xd4>
    1c48:	55 95       	asr	r21
    1c4a:	47 95       	ror	r20
    1c4c:	8a 95       	dec	r24
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <MDIO_GetPinValue+0xd0>
    1c50:	ca 01       	movw	r24, r20
    1c52:	81 70       	andi	r24, 0x01	; 1
    1c54:	ec 81       	ldd	r30, Y+4	; 0x04
    1c56:	fd 81       	ldd	r31, Y+5	; 0x05
    1c58:	80 83       	st	Z, r24
    1c5a:	16 c0       	rjmp	.+44     	; 0x1c88 <MDIO_GetPinValue+0x110>
		case DIO_PORTD:	*P_u8Value = GET_BIT(PIND, Copy_u8Pin);	break;
    1c5c:	e0 e3       	ldi	r30, 0x30	; 48
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a9 01       	movw	r20, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <MDIO_GetPinValue+0xfc>
    1c70:	55 95       	asr	r21
    1c72:	47 95       	ror	r20
    1c74:	8a 95       	dec	r24
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <MDIO_GetPinValue+0xf8>
    1c78:	ca 01       	movw	r24, r20
    1c7a:	81 70       	andi	r24, 0x01	; 1
    1c7c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c7e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c80:	80 83       	st	Z, r24
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <MDIO_GetPinValue+0x110>
		default:	Error_state = Return_NOk;					break;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Error_state;
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8a:	27 96       	adiw	r28, 0x07	; 7
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <MDIO_SetPortValue>:

Error_State_t MDIO_SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <MDIO_SetPortValue+0x6>
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <MDIO_SetPortValue+0x8>
    1ca4:	0f 92       	push	r0
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	8a 83       	std	Y+2, r24	; 0x02
    1cac:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    1cae:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	3d 83       	std	Y+5, r19	; 0x05
    1cb8:	2c 83       	std	Y+4, r18	; 0x04
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbe:	82 30       	cpi	r24, 0x02	; 2
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	d9 f0       	breq	.+54     	; 0x1cfa <MDIO_SetPortValue+0x5e>
    1cc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc8:	23 30       	cpi	r18, 0x03	; 3
    1cca:	31 05       	cpc	r19, r1
    1ccc:	34 f4       	brge	.+12     	; 0x1cda <MDIO_SetPortValue+0x3e>
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	61 f0       	breq	.+24     	; 0x1cf0 <MDIO_SetPortValue+0x54>
    1cd8:	1f c0       	rjmp	.+62     	; 0x1d18 <MDIO_SetPortValue+0x7c>
    1cda:	2c 81       	ldd	r18, Y+4	; 0x04
    1cdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cde:	23 30       	cpi	r18, 0x03	; 3
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	81 f0       	breq	.+32     	; 0x1d04 <MDIO_SetPortValue+0x68>
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	91 05       	cpc	r25, r1
    1cec:	81 f0       	breq	.+32     	; 0x1d0e <MDIO_SetPortValue+0x72>
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <MDIO_SetPortValue+0x7c>
	{
	case DIO_PORTA:	PORTA = Copy_u8Value;	break;
    1cf0:	eb e3       	ldi	r30, 0x3B	; 59
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	80 83       	st	Z, r24
    1cf8:	11 c0       	rjmp	.+34     	; 0x1d1c <MDIO_SetPortValue+0x80>
	case DIO_PORTB:	PORTB = Copy_u8Value;	break;
    1cfa:	e8 e3       	ldi	r30, 0x38	; 56
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	80 83       	st	Z, r24
    1d02:	0c c0       	rjmp	.+24     	; 0x1d1c <MDIO_SetPortValue+0x80>
	case DIO_PORTC:	PORTC = Copy_u8Value;	break;
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	80 83       	st	Z, r24
    1d0c:	07 c0       	rjmp	.+14     	; 0x1d1c <MDIO_SetPortValue+0x80>
	case DIO_PORTD:	PORTD = Copy_u8Value;	break;
    1d0e:	e2 e3       	ldi	r30, 0x32	; 50
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	80 83       	st	Z, r24
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <MDIO_SetPortValue+0x80>
	default:	Error_state = Return_NOk;	break;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <MDIO_GetPortValue>:

Error_State_t MDIO_GetPortValue(u8 Copy_u8Port, u8* P_u8Value)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <MDIO_GetPortValue+0x6>
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <MDIO_GetPortValue+0x8>
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <MDIO_GetPortValue+0xa>
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	8a 83       	std	Y+2, r24	; 0x02
    1d3e:	7c 83       	std	Y+4, r23	; 0x04
    1d40:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    1d42:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	3e 83       	std	Y+6, r19	; 0x06
    1d4c:	2d 83       	std	Y+5, r18	; 0x05
    1d4e:	4d 81       	ldd	r20, Y+5	; 0x05
    1d50:	5e 81       	ldd	r21, Y+6	; 0x06
    1d52:	42 30       	cpi	r20, 0x02	; 2
    1d54:	51 05       	cpc	r21, r1
    1d56:	59 f1       	breq	.+86     	; 0x1dae <MDIO_GetPortValue+0x80>
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	91 05       	cpc	r25, r1
    1d60:	34 f4       	brge	.+12     	; 0x1d6e <MDIO_GetPortValue+0x40>
    1d62:	2d 81       	ldd	r18, Y+5	; 0x05
    1d64:	3e 81       	ldd	r19, Y+6	; 0x06
    1d66:	21 30       	cpi	r18, 0x01	; 1
    1d68:	31 05       	cpc	r19, r1
    1d6a:	69 f0       	breq	.+26     	; 0x1d86 <MDIO_GetPortValue+0x58>
    1d6c:	5c c0       	rjmp	.+184    	; 0x1e26 <MDIO_GetPortValue+0xf8>
    1d6e:	4d 81       	ldd	r20, Y+5	; 0x05
    1d70:	5e 81       	ldd	r21, Y+6	; 0x06
    1d72:	43 30       	cpi	r20, 0x03	; 3
    1d74:	51 05       	cpc	r21, r1
    1d76:	79 f1       	breq	.+94     	; 0x1dd6 <MDIO_GetPortValue+0xa8>
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	84 30       	cpi	r24, 0x04	; 4
    1d7e:	91 05       	cpc	r25, r1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <MDIO_GetPortValue+0x56>
    1d82:	3d c0       	rjmp	.+122    	; 0x1dfe <MDIO_GetPortValue+0xd0>
    1d84:	50 c0       	rjmp	.+160    	; 0x1e26 <MDIO_GetPortValue+0xf8>
	{
	case DIO_PORTA:	*P_u8Value = GET_BIT(PORTA, Copy_u8Port);	break;
    1d86:	eb e3       	ldi	r30, 0x3B	; 59
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a9 01       	movw	r20, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <MDIO_GetPortValue+0x70>
    1d9a:	55 95       	asr	r21
    1d9c:	47 95       	ror	r20
    1d9e:	8a 95       	dec	r24
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <MDIO_GetPortValue+0x6c>
    1da2:	ca 01       	movw	r24, r20
    1da4:	81 70       	andi	r24, 0x01	; 1
    1da6:	eb 81       	ldd	r30, Y+3	; 0x03
    1da8:	fc 81       	ldd	r31, Y+4	; 0x04
    1daa:	80 83       	st	Z, r24
    1dac:	3e c0       	rjmp	.+124    	; 0x1e2a <MDIO_GetPortValue+0xfc>
	case DIO_PORTB:	*P_u8Value = GET_BIT(PORTB, Copy_u8Port);	break;
    1dae:	e8 e3       	ldi	r30, 0x38	; 56
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <MDIO_GetPortValue+0x98>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <MDIO_GetPortValue+0x94>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd2:	80 83       	st	Z, r24
    1dd4:	2a c0       	rjmp	.+84     	; 0x1e2a <MDIO_GetPortValue+0xfc>
	case DIO_PORTC:	*P_u8Value = GET_BIT(PORTC, Copy_u8Port);	break;
    1dd6:	e5 e3       	ldi	r30, 0x35	; 53
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a9 01       	movw	r20, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <MDIO_GetPortValue+0xc0>
    1dea:	55 95       	asr	r21
    1dec:	47 95       	ror	r20
    1dee:	8a 95       	dec	r24
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <MDIO_GetPortValue+0xbc>
    1df2:	ca 01       	movw	r24, r20
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	eb 81       	ldd	r30, Y+3	; 0x03
    1df8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfa:	80 83       	st	Z, r24
    1dfc:	16 c0       	rjmp	.+44     	; 0x1e2a <MDIO_GetPortValue+0xfc>
	case DIO_PORTD:	*P_u8Value = GET_BIT(PORTD, Copy_u8Port);	break;
    1dfe:	e2 e3       	ldi	r30, 0x32	; 50
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a9 01       	movw	r20, r18
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <MDIO_GetPortValue+0xe8>
    1e12:	55 95       	asr	r21
    1e14:	47 95       	ror	r20
    1e16:	8a 95       	dec	r24
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <MDIO_GetPortValue+0xe4>
    1e1a:	ca 01       	movw	r24, r20
    1e1c:	81 70       	andi	r24, 0x01	; 1
    1e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e20:	fc 81       	ldd	r31, Y+4	; 0x04
    1e22:	80 83       	st	Z, r24
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <MDIO_GetPortValue+0xfc>
	default:	Error_state = Return_NOk;						break;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2c:	26 96       	adiw	r28, 0x06	; 6
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <MDIO_TogglePin>:

Error_State_t MDIO_TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <MDIO_TogglePin+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <MDIO_TogglePin+0x8>
    1e46:	0f 92       	push	r0
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	8a 83       	std	Y+2, r24	; 0x02
    1e4e:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    1e50:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin > 7)
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	88 30       	cpi	r24, 0x08	; 8
    1e56:	18 f0       	brcs	.+6      	; 0x1e5e <MDIO_TogglePin+0x20>
	{
		Error_state = Return_NOk;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	72 c0       	rjmp	.+228    	; 0x1f42 <MDIO_TogglePin+0x104>
	}
	else
	{
		switch(Copy_u8Port)
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	3d 83       	std	Y+5, r19	; 0x05
    1e66:	2c 83       	std	Y+4, r18	; 0x04
    1e68:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6c:	82 30       	cpi	r24, 0x02	; 2
    1e6e:	91 05       	cpc	r25, r1
    1e70:	51 f1       	breq	.+84     	; 0x1ec6 <MDIO_TogglePin+0x88>
    1e72:	2c 81       	ldd	r18, Y+4	; 0x04
    1e74:	3d 81       	ldd	r19, Y+5	; 0x05
    1e76:	23 30       	cpi	r18, 0x03	; 3
    1e78:	31 05       	cpc	r19, r1
    1e7a:	34 f4       	brge	.+12     	; 0x1e88 <MDIO_TogglePin+0x4a>
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	91 05       	cpc	r25, r1
    1e84:	61 f0       	breq	.+24     	; 0x1e9e <MDIO_TogglePin+0x60>
    1e86:	5b c0       	rjmp	.+182    	; 0x1f3e <MDIO_TogglePin+0x100>
    1e88:	2c 81       	ldd	r18, Y+4	; 0x04
    1e8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8c:	23 30       	cpi	r18, 0x03	; 3
    1e8e:	31 05       	cpc	r19, r1
    1e90:	71 f1       	breq	.+92     	; 0x1eee <MDIO_TogglePin+0xb0>
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	9d 81       	ldd	r25, Y+5	; 0x05
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	91 05       	cpc	r25, r1
    1e9a:	e9 f1       	breq	.+122    	; 0x1f16 <MDIO_TogglePin+0xd8>
    1e9c:	50 c0       	rjmp	.+160    	; 0x1f3e <MDIO_TogglePin+0x100>
		{
		case DIO_PORTA:	TOGGLE_BIT(PORTA, Copy_u8Pin);	break;
    1e9e:	ab e3       	ldi	r26, 0x3B	; 59
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	eb e3       	ldi	r30, 0x3B	; 59
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 2e       	mov	r0, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <MDIO_TogglePin+0x7e>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	0a 94       	dec	r0
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <MDIO_TogglePin+0x7a>
    1ec0:	84 27       	eor	r24, r20
    1ec2:	8c 93       	st	X, r24
    1ec4:	3e c0       	rjmp	.+124    	; 0x1f42 <MDIO_TogglePin+0x104>
		case DIO_PORTB:	TOGGLE_BIT(PORTB, Copy_u8Pin);	break;
    1ec6:	a8 e3       	ldi	r26, 0x38	; 56
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e8 e3       	ldi	r30, 0x38	; 56
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <MDIO_TogglePin+0xa6>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <MDIO_TogglePin+0xa2>
    1ee8:	84 27       	eor	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	2a c0       	rjmp	.+84     	; 0x1f42 <MDIO_TogglePin+0x104>
		case DIO_PORTC:	TOGGLE_BIT(PORTC, Copy_u8Pin);	break;
    1eee:	a5 e3       	ldi	r26, 0x35	; 53
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e5 e3       	ldi	r30, 0x35	; 53
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <MDIO_TogglePin+0xce>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <MDIO_TogglePin+0xca>
    1f10:	84 27       	eor	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	16 c0       	rjmp	.+44     	; 0x1f42 <MDIO_TogglePin+0x104>
		case DIO_PORTD:	TOGGLE_BIT(PORTD, Copy_u8Pin);	break;
    1f16:	a2 e3       	ldi	r26, 0x32	; 50
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e2 e3       	ldi	r30, 0x32	; 50
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <MDIO_TogglePin+0xf6>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <MDIO_TogglePin+0xf2>
    1f38:	84 27       	eor	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <MDIO_TogglePin+0x104>
		default:	Error_state = Return_NOk;			break;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Error_state;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <Port_VoidInit>:


void Port_VoidInit(void)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1f5c:	ea e3       	ldi	r30, 0x3A	; 58
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1f64:	e7 e3       	ldi	r30, 0x37	; 55
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 ef       	ldi	r24, 0xF0	; 240
    1f6a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1f6c:	e4 e3       	ldi	r30, 0x34	; 52
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	8f ef       	ldi	r24, 0xFF	; 255
    1f72:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1f74:	e1 e3       	ldi	r30, 0x31	; 49
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	8f ef       	ldi	r24, 0xFF	; 255
    1f7a:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    1f7c:	eb e3       	ldi	r30, 0x3B	; 59
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	80 83       	st	Z, r24
	PORTB = PORTB_INIT_VAL;
    1f84:	e8 e3       	ldi	r30, 0x38	; 56
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    1f8c:	e5 e3       	ldi	r30, 0x35	; 53
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	8f ef       	ldi	r24, 0xFF	; 255
    1f92:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VAL;
    1f94:	e2 e3       	ldi	r30, 0x32	; 50
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	80 83       	st	Z, r24
}
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <HLCD_voidSendCommand>:
#include "HLCD_config.h"
#include "../../MCAL/DIO/MDIO_interface.h"

#if LCD_MODE == 4
void HLCD_voidSendCommand(u8 Copy_u8Command)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	e9 97       	sbiw	r28, 0x39	; 57
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	89 af       	std	Y+57, r24	; 0x39
	/*clear RS pin to send command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RS,DIO_LOW);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	/*clear the RW pin to write*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RW,DIO_LOW);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	/*send data*/
	if(GET_BIT(Copy_u8Command, 4))
    1fcc:	89 ad       	ldd	r24, Y+57	; 0x39
    1fce:	82 95       	swap	r24
    1fd0:	8f 70       	andi	r24, 0x0F	; 15
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	81 70       	andi	r24, 0x01	; 1
    1fd8:	90 70       	andi	r25, 0x00	; 0
    1fda:	88 23       	and	r24, r24
    1fdc:	31 f0       	breq	.+12     	; 0x1fea <HLCD_voidSendCommand+0x48>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_HIGH);}
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	64 e0       	ldi	r22, 0x04	; 4
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    1fe8:	05 c0       	rjmp	.+10     	; 0x1ff4 <HLCD_voidSendCommand+0x52>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_LOW);}
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	64 e0       	ldi	r22, 0x04	; 4
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 5))
    1ff4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff6:	82 95       	swap	r24
    1ff8:	86 95       	lsr	r24
    1ffa:	87 70       	andi	r24, 0x07	; 7
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	81 70       	andi	r24, 0x01	; 1
    2002:	90 70       	andi	r25, 0x00	; 0
    2004:	88 23       	and	r24, r24
    2006:	31 f0       	breq	.+12     	; 0x2014 <HLCD_voidSendCommand+0x72>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_HIGH);}
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	65 e0       	ldi	r22, 0x05	; 5
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2012:	05 c0       	rjmp	.+10     	; 0x201e <HLCD_voidSendCommand+0x7c>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_LOW);}
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	65 e0       	ldi	r22, 0x05	; 5
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 6))
    201e:	89 ad       	ldd	r24, Y+57	; 0x39
    2020:	82 95       	swap	r24
    2022:	86 95       	lsr	r24
    2024:	86 95       	lsr	r24
    2026:	83 70       	andi	r24, 0x03	; 3
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	81 70       	andi	r24, 0x01	; 1
    202e:	90 70       	andi	r25, 0x00	; 0
    2030:	88 23       	and	r24, r24
    2032:	31 f0       	breq	.+12     	; 0x2040 <HLCD_voidSendCommand+0x9e>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_HIGH);}
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	66 e0       	ldi	r22, 0x06	; 6
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    203e:	05 c0       	rjmp	.+10     	; 0x204a <HLCD_voidSendCommand+0xa8>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_LOW);}
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	66 e0       	ldi	r22, 0x06	; 6
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 7))
    204a:	89 ad       	ldd	r24, Y+57	; 0x39
    204c:	88 23       	and	r24, r24
    204e:	34 f4       	brge	.+12     	; 0x205c <HLCD_voidSendCommand+0xba>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_HIGH);}
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	67 e0       	ldi	r22, 0x07	; 7
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    205a:	05 c0       	rjmp	.+10     	; 0x2066 <HLCD_voidSendCommand+0xc4>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_LOW);}
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	67 e0       	ldi	r22, 0x07	; 7
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	62 e0       	ldi	r22, 0x02	; 2
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a0 e8       	ldi	r26, 0x80	; 128
    2076:	bf e3       	ldi	r27, 0x3F	; 63
    2078:	8d ab       	std	Y+53, r24	; 0x35
    207a:	9e ab       	std	Y+54, r25	; 0x36
    207c:	af ab       	std	Y+55, r26	; 0x37
    207e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	6d a9       	ldd	r22, Y+53	; 0x35
    2082:	7e a9       	ldd	r23, Y+54	; 0x36
    2084:	8f a9       	ldd	r24, Y+55	; 0x37
    2086:	98 ad       	ldd	r25, Y+56	; 0x38
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	4a ef       	ldi	r20, 0xFA	; 250
    208e:	54 e4       	ldi	r21, 0x44	; 68
    2090:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	89 ab       	std	Y+49, r24	; 0x31
    209a:	9a ab       	std	Y+50, r25	; 0x32
    209c:	ab ab       	std	Y+51, r26	; 0x33
    209e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20a0:	69 a9       	ldd	r22, Y+49	; 0x31
    20a2:	7a a9       	ldd	r23, Y+50	; 0x32
    20a4:	8b a9       	ldd	r24, Y+51	; 0x33
    20a6:	9c a9       	ldd	r25, Y+52	; 0x34
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	2c f4       	brge	.+10     	; 0x20c2 <HLCD_voidSendCommand+0x120>
		__ticks = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	98 ab       	std	Y+48, r25	; 0x30
    20be:	8f a7       	std	Y+47, r24	; 0x2f
    20c0:	3f c0       	rjmp	.+126    	; 0x2140 <HLCD_voidSendCommand+0x19e>
	else if (__tmp > 65535)
    20c2:	69 a9       	ldd	r22, Y+49	; 0x31
    20c4:	7a a9       	ldd	r23, Y+50	; 0x32
    20c6:	8b a9       	ldd	r24, Y+51	; 0x33
    20c8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	4f e7       	ldi	r20, 0x7F	; 127
    20d0:	57 e4       	ldi	r21, 0x47	; 71
    20d2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	4c f5       	brge	.+82     	; 0x212c <HLCD_voidSendCommand+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	6d a9       	ldd	r22, Y+53	; 0x35
    20dc:	7e a9       	ldd	r23, Y+54	; 0x36
    20de:	8f a9       	ldd	r24, Y+55	; 0x37
    20e0:	98 ad       	ldd	r25, Y+56	; 0x38
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e2       	ldi	r20, 0x20	; 32
    20e8:	51 e4       	ldi	r21, 0x41	; 65
    20ea:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	98 ab       	std	Y+48, r25	; 0x30
    2100:	8f a7       	std	Y+47, r24	; 0x2f
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <HLCD_voidSendCommand+0x180>
    2104:	88 ec       	ldi	r24, 0xC8	; 200
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e a7       	std	Y+46, r25	; 0x2e
    210a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    210c:	8d a5       	ldd	r24, Y+45	; 0x2d
    210e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <HLCD_voidSendCommand+0x16e>
    2114:	9e a7       	std	Y+46, r25	; 0x2e
    2116:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	8f a5       	ldd	r24, Y+47	; 0x2f
    211a:	98 a9       	ldd	r25, Y+48	; 0x30
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	98 ab       	std	Y+48, r25	; 0x30
    2120:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	8f a5       	ldd	r24, Y+47	; 0x2f
    2124:	98 a9       	ldd	r25, Y+48	; 0x30
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	69 f7       	brne	.-38     	; 0x2104 <HLCD_voidSendCommand+0x162>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <HLCD_voidSendCommand+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	69 a9       	ldd	r22, Y+49	; 0x31
    212e:	7a a9       	ldd	r23, Y+50	; 0x32
    2130:	8b a9       	ldd	r24, Y+51	; 0x33
    2132:	9c a9       	ldd	r25, Y+52	; 0x34
    2134:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	98 ab       	std	Y+48, r25	; 0x30
    213e:	8f a7       	std	Y+47, r24	; 0x2f
    2140:	8f a5       	ldd	r24, Y+47	; 0x2f
    2142:	98 a9       	ldd	r25, Y+48	; 0x30
    2144:	9c a7       	std	Y+44, r25	; 0x2c
    2146:	8b a7       	std	Y+43, r24	; 0x2b
    2148:	8b a5       	ldd	r24, Y+43	; 0x2b
    214a:	9c a5       	ldd	r25, Y+44	; 0x2c
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <HLCD_voidSendCommand+0x1aa>
    2150:	9c a7       	std	Y+44, r25	; 0x2c
    2152:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	62 e0       	ldi	r22, 0x02	; 2
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 e0       	ldi	r26, 0x00	; 0
    2164:	b0 e4       	ldi	r27, 0x40	; 64
    2166:	8f a3       	std	Y+39, r24	; 0x27
    2168:	98 a7       	std	Y+40, r25	; 0x28
    216a:	a9 a7       	std	Y+41, r26	; 0x29
    216c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	6f a1       	ldd	r22, Y+39	; 0x27
    2170:	78 a5       	ldd	r23, Y+40	; 0x28
    2172:	89 a5       	ldd	r24, Y+41	; 0x29
    2174:	9a a5       	ldd	r25, Y+42	; 0x2a
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a ef       	ldi	r20, 0xFA	; 250
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8b a3       	std	Y+35, r24	; 0x23
    2188:	9c a3       	std	Y+36, r25	; 0x24
    218a:	ad a3       	std	Y+37, r26	; 0x25
    218c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    218e:	6b a1       	ldd	r22, Y+35	; 0x23
    2190:	7c a1       	ldd	r23, Y+36	; 0x24
    2192:	8d a1       	ldd	r24, Y+37	; 0x25
    2194:	9e a1       	ldd	r25, Y+38	; 0x26
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <HLCD_voidSendCommand+0x20e>
		__ticks = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9a a3       	std	Y+34, r25	; 0x22
    21ac:	89 a3       	std	Y+33, r24	; 0x21
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <HLCD_voidSendCommand+0x28c>
	else if (__tmp > 65535)
    21b0:	6b a1       	ldd	r22, Y+35	; 0x23
    21b2:	7c a1       	ldd	r23, Y+36	; 0x24
    21b4:	8d a1       	ldd	r24, Y+37	; 0x25
    21b6:	9e a1       	ldd	r25, Y+38	; 0x26
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	4c f5       	brge	.+82     	; 0x221a <HLCD_voidSendCommand+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	6f a1       	ldd	r22, Y+39	; 0x27
    21ca:	78 a5       	ldd	r23, Y+40	; 0x28
    21cc:	89 a5       	ldd	r24, Y+41	; 0x29
    21ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9a a3       	std	Y+34, r25	; 0x22
    21ee:	89 a3       	std	Y+33, r24	; 0x21
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <HLCD_voidSendCommand+0x26e>
    21f2:	88 ec       	ldi	r24, 0xC8	; 200
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	98 a3       	std	Y+32, r25	; 0x20
    21f8:	8f 8f       	std	Y+31, r24	; 0x1f
    21fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21fc:	98 a1       	ldd	r25, Y+32	; 0x20
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <HLCD_voidSendCommand+0x25c>
    2202:	98 a3       	std	Y+32, r25	; 0x20
    2204:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2206:	89 a1       	ldd	r24, Y+33	; 0x21
    2208:	9a a1       	ldd	r25, Y+34	; 0x22
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	9a a3       	std	Y+34, r25	; 0x22
    220e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2210:	89 a1       	ldd	r24, Y+33	; 0x21
    2212:	9a a1       	ldd	r25, Y+34	; 0x22
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	69 f7       	brne	.-38     	; 0x21f2 <HLCD_voidSendCommand+0x250>
    2218:	14 c0       	rjmp	.+40     	; 0x2242 <HLCD_voidSendCommand+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221a:	6b a1       	ldd	r22, Y+35	; 0x23
    221c:	7c a1       	ldd	r23, Y+36	; 0x24
    221e:	8d a1       	ldd	r24, Y+37	; 0x25
    2220:	9e a1       	ldd	r25, Y+38	; 0x26
    2222:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9a a3       	std	Y+34, r25	; 0x22
    222c:	89 a3       	std	Y+33, r24	; 0x21
    222e:	89 a1       	ldd	r24, Y+33	; 0x21
    2230:	9a a1       	ldd	r25, Y+34	; 0x22
    2232:	9e 8f       	std	Y+30, r25	; 0x1e
    2234:	8d 8f       	std	Y+29, r24	; 0x1d
    2236:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2238:	9e 8d       	ldd	r25, Y+30	; 0x1e
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <HLCD_voidSendCommand+0x298>
    223e:	9e 8f       	std	Y+30, r25	; 0x1e
    2240:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	if(GET_BIT(Copy_u8Command, 0))
    2242:	89 ad       	ldd	r24, Y+57	; 0x39
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	81 70       	andi	r24, 0x01	; 1
    224a:	90 70       	andi	r25, 0x00	; 0
    224c:	88 23       	and	r24, r24
    224e:	31 f0       	breq	.+12     	; 0x225c <HLCD_voidSendCommand+0x2ba>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_HIGH);}
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	64 e0       	ldi	r22, 0x04	; 4
    2254:	41 e0       	ldi	r20, 0x01	; 1
    2256:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <HLCD_voidSendCommand+0x2c4>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_LOW);}
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	64 e0       	ldi	r22, 0x04	; 4
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 1))
    2266:	89 ad       	ldd	r24, Y+57	; 0x39
    2268:	86 95       	lsr	r24
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	81 70       	andi	r24, 0x01	; 1
    2270:	90 70       	andi	r25, 0x00	; 0
    2272:	88 23       	and	r24, r24
    2274:	31 f0       	breq	.+12     	; 0x2282 <HLCD_voidSendCommand+0x2e0>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_HIGH);}
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	65 e0       	ldi	r22, 0x05	; 5
    227a:	41 e0       	ldi	r20, 0x01	; 1
    227c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2280:	05 c0       	rjmp	.+10     	; 0x228c <HLCD_voidSendCommand+0x2ea>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_LOW);}
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	65 e0       	ldi	r22, 0x05	; 5
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 2))
    228c:	89 ad       	ldd	r24, Y+57	; 0x39
    228e:	86 95       	lsr	r24
    2290:	86 95       	lsr	r24
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	81 70       	andi	r24, 0x01	; 1
    2298:	90 70       	andi	r25, 0x00	; 0
    229a:	88 23       	and	r24, r24
    229c:	31 f0       	breq	.+12     	; 0x22aa <HLCD_voidSendCommand+0x308>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_HIGH);}
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	66 e0       	ldi	r22, 0x06	; 6
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <HLCD_voidSendCommand+0x312>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_LOW);}
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	66 e0       	ldi	r22, 0x06	; 6
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Command, 3))
    22b4:	89 ad       	ldd	r24, Y+57	; 0x39
    22b6:	86 95       	lsr	r24
    22b8:	86 95       	lsr	r24
    22ba:	86 95       	lsr	r24
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	81 70       	andi	r24, 0x01	; 1
    22c2:	90 70       	andi	r25, 0x00	; 0
    22c4:	88 23       	and	r24, r24
    22c6:	31 f0       	breq	.+12     	; 0x22d4 <HLCD_voidSendCommand+0x332>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_HIGH);}
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	67 e0       	ldi	r22, 0x07	; 7
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <HLCD_voidSendCommand+0x33c>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_LOW);}
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	67 e0       	ldi	r22, 0x07	; 7
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	62 e0       	ldi	r22, 0x02	; 2
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a0 e8       	ldi	r26, 0x80	; 128
    22ee:	bf e3       	ldi	r27, 0x3F	; 63
    22f0:	89 8f       	std	Y+25, r24	; 0x19
    22f2:	9a 8f       	std	Y+26, r25	; 0x1a
    22f4:	ab 8f       	std	Y+27, r26	; 0x1b
    22f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	69 8d       	ldd	r22, Y+25	; 0x19
    22fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a ef       	ldi	r20, 0xFA	; 250
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8d 8b       	std	Y+21, r24	; 0x15
    2312:	9e 8b       	std	Y+22, r25	; 0x16
    2314:	af 8b       	std	Y+23, r26	; 0x17
    2316:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2318:	6d 89       	ldd	r22, Y+21	; 0x15
    231a:	7e 89       	ldd	r23, Y+22	; 0x16
    231c:	8f 89       	ldd	r24, Y+23	; 0x17
    231e:	98 8d       	ldd	r25, Y+24	; 0x18
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <HLCD_voidSendCommand+0x398>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9c 8b       	std	Y+20, r25	; 0x14
    2336:	8b 8b       	std	Y+19, r24	; 0x13
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <HLCD_voidSendCommand+0x416>
	else if (__tmp > 65535)
    233a:	6d 89       	ldd	r22, Y+21	; 0x15
    233c:	7e 89       	ldd	r23, Y+22	; 0x16
    233e:	8f 89       	ldd	r24, Y+23	; 0x17
    2340:	98 8d       	ldd	r25, Y+24	; 0x18
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <HLCD_voidSendCommand+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	69 8d       	ldd	r22, Y+25	; 0x19
    2354:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9c 8b       	std	Y+20, r25	; 0x14
    2378:	8b 8b       	std	Y+19, r24	; 0x13
    237a:	0f c0       	rjmp	.+30     	; 0x239a <HLCD_voidSendCommand+0x3f8>
    237c:	88 ec       	ldi	r24, 0xC8	; 200
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9a 8b       	std	Y+18, r25	; 0x12
    2382:	89 8b       	std	Y+17, r24	; 0x11
    2384:	89 89       	ldd	r24, Y+17	; 0x11
    2386:	9a 89       	ldd	r25, Y+18	; 0x12
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <HLCD_voidSendCommand+0x3e6>
    238c:	9a 8b       	std	Y+18, r25	; 0x12
    238e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9c 8b       	std	Y+20, r25	; 0x14
    2398:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8b 89       	ldd	r24, Y+19	; 0x13
    239c:	9c 89       	ldd	r25, Y+20	; 0x14
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <HLCD_voidSendCommand+0x3da>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <HLCD_voidSendCommand+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6d 89       	ldd	r22, Y+21	; 0x15
    23a6:	7e 89       	ldd	r23, Y+22	; 0x16
    23a8:	8f 89       	ldd	r24, Y+23	; 0x17
    23aa:	98 8d       	ldd	r25, Y+24	; 0x18
    23ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9c 8b       	std	Y+20, r25	; 0x14
    23b6:	8b 8b       	std	Y+19, r24	; 0x13
    23b8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ba:	9c 89       	ldd	r25, Y+20	; 0x14
    23bc:	98 8b       	std	Y+16, r25	; 0x10
    23be:	8f 87       	std	Y+15, r24	; 0x0f
    23c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c2:	98 89       	ldd	r25, Y+16	; 0x10
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <HLCD_voidSendCommand+0x422>
    23c8:	98 8b       	std	Y+16, r25	; 0x10
    23ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	62 e0       	ldi	r22, 0x02	; 2
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a0 e0       	ldi	r26, 0x00	; 0
    23dc:	b0 e4       	ldi	r27, 0x40	; 64
    23de:	8b 87       	std	Y+11, r24	; 0x0b
    23e0:	9c 87       	std	Y+12, r25	; 0x0c
    23e2:	ad 87       	std	Y+13, r26	; 0x0d
    23e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	4a ef       	ldi	r20, 0xFA	; 250
    23f4:	54 e4       	ldi	r21, 0x44	; 68
    23f6:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	8f 83       	std	Y+7, r24	; 0x07
    2400:	98 87       	std	Y+8, r25	; 0x08
    2402:	a9 87       	std	Y+9, r26	; 0x09
    2404:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2406:	6f 81       	ldd	r22, Y+7	; 0x07
    2408:	78 85       	ldd	r23, Y+8	; 0x08
    240a:	89 85       	ldd	r24, Y+9	; 0x09
    240c:	9a 85       	ldd	r25, Y+10	; 0x0a
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	2c f4       	brge	.+10     	; 0x2428 <HLCD_voidSendCommand+0x486>
		__ticks = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	3f c0       	rjmp	.+126    	; 0x24a6 <HLCD_voidSendCommand+0x504>
	else if (__tmp > 65535)
    2428:	6f 81       	ldd	r22, Y+7	; 0x07
    242a:	78 85       	ldd	r23, Y+8	; 0x08
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	3f ef       	ldi	r19, 0xFF	; 255
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	57 e4       	ldi	r21, 0x47	; 71
    2438:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    243c:	18 16       	cp	r1, r24
    243e:	4c f5       	brge	.+82     	; 0x2492 <HLCD_voidSendCommand+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2440:	6b 85       	ldd	r22, Y+11	; 0x0b
    2442:	7c 85       	ldd	r23, Y+12	; 0x0c
    2444:	8d 85       	ldd	r24, Y+13	; 0x0d
    2446:	9e 85       	ldd	r25, Y+14	; 0x0e
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e2       	ldi	r20, 0x20	; 32
    244e:	51 e4       	ldi	r21, 0x41	; 65
    2450:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
    2468:	0f c0       	rjmp	.+30     	; 0x2488 <HLCD_voidSendCommand+0x4e6>
    246a:	88 ec       	ldi	r24, 0xC8	; 200
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <HLCD_voidSendCommand+0x4d4>
    247a:	9c 83       	std	Y+4, r25	; 0x04
    247c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	9e 81       	ldd	r25, Y+6	; 0x06
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	69 f7       	brne	.-38     	; 0x246a <HLCD_voidSendCommand+0x4c8>
    2490:	14 c0       	rjmp	.+40     	; 0x24ba <HLCD_voidSendCommand+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	9a 81       	ldd	r25, Y+2	; 0x02
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <HLCD_voidSendCommand+0x510>
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    24ba:	e9 96       	adiw	r28, 0x39	; 57
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <HLCD_voidsendChar>:

void HLCD_voidsendChar(u8 Copy_u8Data)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	e9 97       	sbiw	r28, 0x39	; 57
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	89 af       	std	Y+57, r24	; 0x39
	/*set RS pin to send command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RS,DIO_HIGH);
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	/*clear the RW pin to write*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_RW,DIO_LOW);
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	/*send data*/
	if(GET_BIT(Copy_u8Data, 4))
    24f6:	89 ad       	ldd	r24, Y+57	; 0x39
    24f8:	82 95       	swap	r24
    24fa:	8f 70       	andi	r24, 0x0F	; 15
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	81 70       	andi	r24, 0x01	; 1
    2502:	90 70       	andi	r25, 0x00	; 0
    2504:	88 23       	and	r24, r24
    2506:	31 f0       	breq	.+12     	; 0x2514 <HLCD_voidsendChar+0x48>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_HIGH);}
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	64 e0       	ldi	r22, 0x04	; 4
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2512:	05 c0       	rjmp	.+10     	; 0x251e <HLCD_voidsendChar+0x52>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_LOW);}
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	64 e0       	ldi	r22, 0x04	; 4
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 5))
    251e:	89 ad       	ldd	r24, Y+57	; 0x39
    2520:	82 95       	swap	r24
    2522:	86 95       	lsr	r24
    2524:	87 70       	andi	r24, 0x07	; 7
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	81 70       	andi	r24, 0x01	; 1
    252c:	90 70       	andi	r25, 0x00	; 0
    252e:	88 23       	and	r24, r24
    2530:	31 f0       	breq	.+12     	; 0x253e <HLCD_voidsendChar+0x72>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_HIGH);}
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	65 e0       	ldi	r22, 0x05	; 5
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    253c:	05 c0       	rjmp	.+10     	; 0x2548 <HLCD_voidsendChar+0x7c>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_LOW);}
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	65 e0       	ldi	r22, 0x05	; 5
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 6))
    2548:	89 ad       	ldd	r24, Y+57	; 0x39
    254a:	82 95       	swap	r24
    254c:	86 95       	lsr	r24
    254e:	86 95       	lsr	r24
    2550:	83 70       	andi	r24, 0x03	; 3
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	81 70       	andi	r24, 0x01	; 1
    2558:	90 70       	andi	r25, 0x00	; 0
    255a:	88 23       	and	r24, r24
    255c:	31 f0       	breq	.+12     	; 0x256a <HLCD_voidsendChar+0x9e>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_HIGH);}
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	66 e0       	ldi	r22, 0x06	; 6
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2568:	05 c0       	rjmp	.+10     	; 0x2574 <HLCD_voidsendChar+0xa8>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_LOW);}
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	66 e0       	ldi	r22, 0x06	; 6
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 7))
    2574:	89 ad       	ldd	r24, Y+57	; 0x39
    2576:	88 23       	and	r24, r24
    2578:	34 f4       	brge	.+12     	; 0x2586 <HLCD_voidsendChar+0xba>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_HIGH);}
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	67 e0       	ldi	r22, 0x07	; 7
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2584:	05 c0       	rjmp	.+10     	; 0x2590 <HLCD_voidsendChar+0xc4>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_LOW);}
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	67 e0       	ldi	r22, 0x07	; 7
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	62 e0       	ldi	r22, 0x02	; 2
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e8       	ldi	r26, 0x80	; 128
    25a0:	bf e3       	ldi	r27, 0x3F	; 63
    25a2:	8d ab       	std	Y+53, r24	; 0x35
    25a4:	9e ab       	std	Y+54, r25	; 0x36
    25a6:	af ab       	std	Y+55, r26	; 0x37
    25a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25aa:	6d a9       	ldd	r22, Y+53	; 0x35
    25ac:	7e a9       	ldd	r23, Y+54	; 0x36
    25ae:	8f a9       	ldd	r24, Y+55	; 0x37
    25b0:	98 ad       	ldd	r25, Y+56	; 0x38
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a ef       	ldi	r20, 0xFA	; 250
    25b8:	54 e4       	ldi	r21, 0x44	; 68
    25ba:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	89 ab       	std	Y+49, r24	; 0x31
    25c4:	9a ab       	std	Y+50, r25	; 0x32
    25c6:	ab ab       	std	Y+51, r26	; 0x33
    25c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25ca:	69 a9       	ldd	r22, Y+49	; 0x31
    25cc:	7a a9       	ldd	r23, Y+50	; 0x32
    25ce:	8b a9       	ldd	r24, Y+51	; 0x33
    25d0:	9c a9       	ldd	r25, Y+52	; 0x34
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    25de:	88 23       	and	r24, r24
    25e0:	2c f4       	brge	.+10     	; 0x25ec <HLCD_voidsendChar+0x120>
		__ticks = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	98 ab       	std	Y+48, r25	; 0x30
    25e8:	8f a7       	std	Y+47, r24	; 0x2f
    25ea:	3f c0       	rjmp	.+126    	; 0x266a <HLCD_voidsendChar+0x19e>
	else if (__tmp > 65535)
    25ec:	69 a9       	ldd	r22, Y+49	; 0x31
    25ee:	7a a9       	ldd	r23, Y+50	; 0x32
    25f0:	8b a9       	ldd	r24, Y+51	; 0x33
    25f2:	9c a9       	ldd	r25, Y+52	; 0x34
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	4c f5       	brge	.+82     	; 0x2656 <HLCD_voidsendChar+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2604:	6d a9       	ldd	r22, Y+53	; 0x35
    2606:	7e a9       	ldd	r23, Y+54	; 0x36
    2608:	8f a9       	ldd	r24, Y+55	; 0x37
    260a:	98 ad       	ldd	r25, Y+56	; 0x38
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	98 ab       	std	Y+48, r25	; 0x30
    262a:	8f a7       	std	Y+47, r24	; 0x2f
    262c:	0f c0       	rjmp	.+30     	; 0x264c <HLCD_voidsendChar+0x180>
    262e:	88 ec       	ldi	r24, 0xC8	; 200
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9e a7       	std	Y+46, r25	; 0x2e
    2634:	8d a7       	std	Y+45, r24	; 0x2d
    2636:	8d a5       	ldd	r24, Y+45	; 0x2d
    2638:	9e a5       	ldd	r25, Y+46	; 0x2e
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <HLCD_voidsendChar+0x16e>
    263e:	9e a7       	std	Y+46, r25	; 0x2e
    2640:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8f a5       	ldd	r24, Y+47	; 0x2f
    2644:	98 a9       	ldd	r25, Y+48	; 0x30
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	98 ab       	std	Y+48, r25	; 0x30
    264a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8f a5       	ldd	r24, Y+47	; 0x2f
    264e:	98 a9       	ldd	r25, Y+48	; 0x30
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <HLCD_voidsendChar+0x162>
    2654:	14 c0       	rjmp	.+40     	; 0x267e <HLCD_voidsendChar+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	69 a9       	ldd	r22, Y+49	; 0x31
    2658:	7a a9       	ldd	r23, Y+50	; 0x32
    265a:	8b a9       	ldd	r24, Y+51	; 0x33
    265c:	9c a9       	ldd	r25, Y+52	; 0x34
    265e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	98 ab       	std	Y+48, r25	; 0x30
    2668:	8f a7       	std	Y+47, r24	; 0x2f
    266a:	8f a5       	ldd	r24, Y+47	; 0x2f
    266c:	98 a9       	ldd	r25, Y+48	; 0x30
    266e:	9c a7       	std	Y+44, r25	; 0x2c
    2670:	8b a7       	std	Y+43, r24	; 0x2b
    2672:	8b a5       	ldd	r24, Y+43	; 0x2b
    2674:	9c a5       	ldd	r25, Y+44	; 0x2c
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <HLCD_voidsendChar+0x1aa>
    267a:	9c a7       	std	Y+44, r25	; 0x2c
    267c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	62 e0       	ldi	r22, 0x02	; 2
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e0       	ldi	r26, 0x00	; 0
    268e:	b0 e4       	ldi	r27, 0x40	; 64
    2690:	8f a3       	std	Y+39, r24	; 0x27
    2692:	98 a7       	std	Y+40, r25	; 0x28
    2694:	a9 a7       	std	Y+41, r26	; 0x29
    2696:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	6f a1       	ldd	r22, Y+39	; 0x27
    269a:	78 a5       	ldd	r23, Y+40	; 0x28
    269c:	89 a5       	ldd	r24, Y+41	; 0x29
    269e:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4a ef       	ldi	r20, 0xFA	; 250
    26a6:	54 e4       	ldi	r21, 0x44	; 68
    26a8:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8b a3       	std	Y+35, r24	; 0x23
    26b2:	9c a3       	std	Y+36, r25	; 0x24
    26b4:	ad a3       	std	Y+37, r26	; 0x25
    26b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26b8:	6b a1       	ldd	r22, Y+35	; 0x23
    26ba:	7c a1       	ldd	r23, Y+36	; 0x24
    26bc:	8d a1       	ldd	r24, Y+37	; 0x25
    26be:	9e a1       	ldd	r25, Y+38	; 0x26
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	2c f4       	brge	.+10     	; 0x26da <HLCD_voidsendChar+0x20e>
		__ticks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9a a3       	std	Y+34, r25	; 0x22
    26d6:	89 a3       	std	Y+33, r24	; 0x21
    26d8:	3f c0       	rjmp	.+126    	; 0x2758 <HLCD_voidsendChar+0x28c>
	else if (__tmp > 65535)
    26da:	6b a1       	ldd	r22, Y+35	; 0x23
    26dc:	7c a1       	ldd	r23, Y+36	; 0x24
    26de:	8d a1       	ldd	r24, Y+37	; 0x25
    26e0:	9e a1       	ldd	r25, Y+38	; 0x26
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	3f ef       	ldi	r19, 0xFF	; 255
    26e6:	4f e7       	ldi	r20, 0x7F	; 127
    26e8:	57 e4       	ldi	r21, 0x47	; 71
    26ea:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    26ee:	18 16       	cp	r1, r24
    26f0:	4c f5       	brge	.+82     	; 0x2744 <HLCD_voidsendChar+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f2:	6f a1       	ldd	r22, Y+39	; 0x27
    26f4:	78 a5       	ldd	r23, Y+40	; 0x28
    26f6:	89 a5       	ldd	r24, Y+41	; 0x29
    26f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	51 e4       	ldi	r21, 0x41	; 65
    2702:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9a a3       	std	Y+34, r25	; 0x22
    2718:	89 a3       	std	Y+33, r24	; 0x21
    271a:	0f c0       	rjmp	.+30     	; 0x273a <HLCD_voidsendChar+0x26e>
    271c:	88 ec       	ldi	r24, 0xC8	; 200
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	98 a3       	std	Y+32, r25	; 0x20
    2722:	8f 8f       	std	Y+31, r24	; 0x1f
    2724:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2726:	98 a1       	ldd	r25, Y+32	; 0x20
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <HLCD_voidsendChar+0x25c>
    272c:	98 a3       	std	Y+32, r25	; 0x20
    272e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2730:	89 a1       	ldd	r24, Y+33	; 0x21
    2732:	9a a1       	ldd	r25, Y+34	; 0x22
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	9a a3       	std	Y+34, r25	; 0x22
    2738:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	89 a1       	ldd	r24, Y+33	; 0x21
    273c:	9a a1       	ldd	r25, Y+34	; 0x22
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	69 f7       	brne	.-38     	; 0x271c <HLCD_voidsendChar+0x250>
    2742:	14 c0       	rjmp	.+40     	; 0x276c <HLCD_voidsendChar+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2744:	6b a1       	ldd	r22, Y+35	; 0x23
    2746:	7c a1       	ldd	r23, Y+36	; 0x24
    2748:	8d a1       	ldd	r24, Y+37	; 0x25
    274a:	9e a1       	ldd	r25, Y+38	; 0x26
    274c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9a a3       	std	Y+34, r25	; 0x22
    2756:	89 a3       	std	Y+33, r24	; 0x21
    2758:	89 a1       	ldd	r24, Y+33	; 0x21
    275a:	9a a1       	ldd	r25, Y+34	; 0x22
    275c:	9e 8f       	std	Y+30, r25	; 0x1e
    275e:	8d 8f       	std	Y+29, r24	; 0x1d
    2760:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2762:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <HLCD_voidsendChar+0x298>
    2768:	9e 8f       	std	Y+30, r25	; 0x1e
    276a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	if(GET_BIT(Copy_u8Data, 0))
    276c:	89 ad       	ldd	r24, Y+57	; 0x39
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	81 70       	andi	r24, 0x01	; 1
    2774:	90 70       	andi	r25, 0x00	; 0
    2776:	88 23       	and	r24, r24
    2778:	31 f0       	breq	.+12     	; 0x2786 <HLCD_voidsendChar+0x2ba>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_HIGH);}
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	64 e0       	ldi	r22, 0x04	; 4
    277e:	41 e0       	ldi	r20, 0x01	; 1
    2780:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2784:	05 c0       	rjmp	.+10     	; 0x2790 <HLCD_voidsendChar+0x2c4>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN4, DIO_LOW);}
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	64 e0       	ldi	r22, 0x04	; 4
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 1))
    2790:	89 ad       	ldd	r24, Y+57	; 0x39
    2792:	86 95       	lsr	r24
    2794:	88 2f       	mov	r24, r24
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	81 70       	andi	r24, 0x01	; 1
    279a:	90 70       	andi	r25, 0x00	; 0
    279c:	88 23       	and	r24, r24
    279e:	31 f0       	breq	.+12     	; 0x27ac <HLCD_voidsendChar+0x2e0>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_HIGH);}
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	65 e0       	ldi	r22, 0x05	; 5
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    27aa:	05 c0       	rjmp	.+10     	; 0x27b6 <HLCD_voidsendChar+0x2ea>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN5, DIO_LOW);}
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	65 e0       	ldi	r22, 0x05	; 5
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 2))
    27b6:	89 ad       	ldd	r24, Y+57	; 0x39
    27b8:	86 95       	lsr	r24
    27ba:	86 95       	lsr	r24
    27bc:	88 2f       	mov	r24, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	81 70       	andi	r24, 0x01	; 1
    27c2:	90 70       	andi	r25, 0x00	; 0
    27c4:	88 23       	and	r24, r24
    27c6:	31 f0       	breq	.+12     	; 0x27d4 <HLCD_voidsendChar+0x308>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_HIGH);}
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	66 e0       	ldi	r22, 0x06	; 6
    27cc:	41 e0       	ldi	r20, 0x01	; 1
    27ce:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    27d2:	05 c0       	rjmp	.+10     	; 0x27de <HLCD_voidsendChar+0x312>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN6, DIO_LOW);}
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	66 e0       	ldi	r22, 0x06	; 6
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	if(GET_BIT(Copy_u8Data, 3))
    27de:	89 ad       	ldd	r24, Y+57	; 0x39
    27e0:	86 95       	lsr	r24
    27e2:	86 95       	lsr	r24
    27e4:	86 95       	lsr	r24
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	81 70       	andi	r24, 0x01	; 1
    27ec:	90 70       	andi	r25, 0x00	; 0
    27ee:	88 23       	and	r24, r24
    27f0:	31 f0       	breq	.+12     	; 0x27fe <HLCD_voidsendChar+0x332>
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_HIGH);}
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	67 e0       	ldi	r22, 0x07	; 7
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    27fc:	05 c0       	rjmp	.+10     	; 0x2808 <HLCD_voidsendChar+0x33c>
	else
	{MDIO_SetPinValue(LCD_PORT_DATA, PIN7, DIO_LOW);}
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	67 e0       	ldi	r22, 0x07	; 7
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
	/*set EN to make LCD Micro. read command*/
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_HIGH);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	62 e0       	ldi	r22, 0x02	; 2
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a0 e8       	ldi	r26, 0x80	; 128
    2818:	bf e3       	ldi	r27, 0x3F	; 63
    281a:	89 8f       	std	Y+25, r24	; 0x19
    281c:	9a 8f       	std	Y+26, r25	; 0x1a
    281e:	ab 8f       	std	Y+27, r26	; 0x1b
    2820:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2822:	69 8d       	ldd	r22, Y+25	; 0x19
    2824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	4a ef       	ldi	r20, 0xFA	; 250
    2830:	54 e4       	ldi	r21, 0x44	; 68
    2832:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	8d 8b       	std	Y+21, r24	; 0x15
    283c:	9e 8b       	std	Y+22, r25	; 0x16
    283e:	af 8b       	std	Y+23, r26	; 0x17
    2840:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2842:	6d 89       	ldd	r22, Y+21	; 0x15
    2844:	7e 89       	ldd	r23, Y+22	; 0x16
    2846:	8f 89       	ldd	r24, Y+23	; 0x17
    2848:	98 8d       	ldd	r25, Y+24	; 0x18
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	2c f4       	brge	.+10     	; 0x2864 <HLCD_voidsendChar+0x398>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9c 8b       	std	Y+20, r25	; 0x14
    2860:	8b 8b       	std	Y+19, r24	; 0x13
    2862:	3f c0       	rjmp	.+126    	; 0x28e2 <HLCD_voidsendChar+0x416>
	else if (__tmp > 65535)
    2864:	6d 89       	ldd	r22, Y+21	; 0x15
    2866:	7e 89       	ldd	r23, Y+22	; 0x16
    2868:	8f 89       	ldd	r24, Y+23	; 0x17
    286a:	98 8d       	ldd	r25, Y+24	; 0x18
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	3f ef       	ldi	r19, 0xFF	; 255
    2870:	4f e7       	ldi	r20, 0x7F	; 127
    2872:	57 e4       	ldi	r21, 0x47	; 71
    2874:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    2878:	18 16       	cp	r1, r24
    287a:	4c f5       	brge	.+82     	; 0x28ce <HLCD_voidsendChar+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287c:	69 8d       	ldd	r22, Y+25	; 0x19
    287e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	51 e4       	ldi	r21, 0x41	; 65
    288c:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	9c 8b       	std	Y+20, r25	; 0x14
    28a2:	8b 8b       	std	Y+19, r24	; 0x13
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <HLCD_voidsendChar+0x3f8>
    28a6:	88 ec       	ldi	r24, 0xC8	; 200
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9a 8b       	std	Y+18, r25	; 0x12
    28ac:	89 8b       	std	Y+17, r24	; 0x11
    28ae:	89 89       	ldd	r24, Y+17	; 0x11
    28b0:	9a 89       	ldd	r25, Y+18	; 0x12
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <HLCD_voidsendChar+0x3e6>
    28b6:	9a 8b       	std	Y+18, r25	; 0x12
    28b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	8b 89       	ldd	r24, Y+19	; 0x13
    28bc:	9c 89       	ldd	r25, Y+20	; 0x14
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	9c 8b       	std	Y+20, r25	; 0x14
    28c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	8b 89       	ldd	r24, Y+19	; 0x13
    28c6:	9c 89       	ldd	r25, Y+20	; 0x14
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	69 f7       	brne	.-38     	; 0x28a6 <HLCD_voidsendChar+0x3da>
    28cc:	14 c0       	rjmp	.+40     	; 0x28f6 <HLCD_voidsendChar+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ce:	6d 89       	ldd	r22, Y+21	; 0x15
    28d0:	7e 89       	ldd	r23, Y+22	; 0x16
    28d2:	8f 89       	ldd	r24, Y+23	; 0x17
    28d4:	98 8d       	ldd	r25, Y+24	; 0x18
    28d6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9c 8b       	std	Y+20, r25	; 0x14
    28e0:	8b 8b       	std	Y+19, r24	; 0x13
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	98 8b       	std	Y+16, r25	; 0x10
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
    28ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ec:	98 89       	ldd	r25, Y+16	; 0x10
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <HLCD_voidsendChar+0x422>
    28f2:	98 8b       	std	Y+16, r25	; 0x10
    28f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_SetPinValue(LCD_PORT_Control,LCD_EN,DIO_LOW);
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	62 e0       	ldi	r22, 0x02	; 2
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a0 e0       	ldi	r26, 0x00	; 0
    2906:	b0 e4       	ldi	r27, 0x40	; 64
    2908:	8b 87       	std	Y+11, r24	; 0x0b
    290a:	9c 87       	std	Y+12, r25	; 0x0c
    290c:	ad 87       	std	Y+13, r26	; 0x0d
    290e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2910:	6b 85       	ldd	r22, Y+11	; 0x0b
    2912:	7c 85       	ldd	r23, Y+12	; 0x0c
    2914:	8d 85       	ldd	r24, Y+13	; 0x0d
    2916:	9e 85       	ldd	r25, Y+14	; 0x0e
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	4a ef       	ldi	r20, 0xFA	; 250
    291e:	54 e4       	ldi	r21, 0x44	; 68
    2920:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	8f 83       	std	Y+7, r24	; 0x07
    292a:	98 87       	std	Y+8, r25	; 0x08
    292c:	a9 87       	std	Y+9, r26	; 0x09
    292e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2930:	6f 81       	ldd	r22, Y+7	; 0x07
    2932:	78 85       	ldd	r23, Y+8	; 0x08
    2934:	89 85       	ldd	r24, Y+9	; 0x09
    2936:	9a 85       	ldd	r25, Y+10	; 0x0a
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e8       	ldi	r20, 0x80	; 128
    293e:	5f e3       	ldi	r21, 0x3F	; 63
    2940:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    2944:	88 23       	and	r24, r24
    2946:	2c f4       	brge	.+10     	; 0x2952 <HLCD_voidsendChar+0x486>
		__ticks = 1;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
    2950:	3f c0       	rjmp	.+126    	; 0x29d0 <HLCD_voidsendChar+0x504>
	else if (__tmp > 65535)
    2952:	6f 81       	ldd	r22, Y+7	; 0x07
    2954:	78 85       	ldd	r23, Y+8	; 0x08
    2956:	89 85       	ldd	r24, Y+9	; 0x09
    2958:	9a 85       	ldd	r25, Y+10	; 0x0a
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	3f ef       	ldi	r19, 0xFF	; 255
    295e:	4f e7       	ldi	r20, 0x7F	; 127
    2960:	57 e4       	ldi	r21, 0x47	; 71
    2962:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    2966:	18 16       	cp	r1, r24
    2968:	4c f5       	brge	.+82     	; 0x29bc <HLCD_voidsendChar+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296a:	6b 85       	ldd	r22, Y+11	; 0x0b
    296c:	7c 85       	ldd	r23, Y+12	; 0x0c
    296e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2970:	9e 85       	ldd	r25, Y+14	; 0x0e
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
    2992:	0f c0       	rjmp	.+30     	; 0x29b2 <HLCD_voidsendChar+0x4e6>
    2994:	88 ec       	ldi	r24, 0xC8	; 200
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9c 83       	std	Y+4, r25	; 0x04
    299a:	8b 83       	std	Y+3, r24	; 0x03
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	9c 81       	ldd	r25, Y+4	; 0x04
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <HLCD_voidsendChar+0x4d4>
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	9e 81       	ldd	r25, Y+6	; 0x06
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	69 f7       	brne	.-38     	; 0x2994 <HLCD_voidsendChar+0x4c8>
    29ba:	14 c0       	rjmp	.+40     	; 0x29e4 <HLCD_voidsendChar+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29bc:	6f 81       	ldd	r22, Y+7	; 0x07
    29be:	78 85       	ldd	r23, Y+8	; 0x08
    29c0:	89 85       	ldd	r24, Y+9	; 0x09
    29c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9e 83       	std	Y+6, r25	; 0x06
    29ce:	8d 83       	std	Y+5, r24	; 0x05
    29d0:	8d 81       	ldd	r24, Y+5	; 0x05
    29d2:	9e 81       	ldd	r25, Y+6	; 0x06
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <HLCD_voidsendChar+0x510>
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    29e4:	e9 96       	adiw	r28, 0x39	; 57
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <HLCD_voidinit>:

void HLCD_voidinit()
{
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a0 e2       	ldi	r26, 0x20	; 32
    2a10:	b2 e4       	ldi	r27, 0x42	; 66
    2a12:	8b 87       	std	Y+11, r24	; 0x0b
    2a14:	9c 87       	std	Y+12, r25	; 0x0c
    2a16:	ad 87       	std	Y+13, r26	; 0x0d
    2a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	4a ef       	ldi	r20, 0xFA	; 250
    2a28:	54 e4       	ldi	r21, 0x44	; 68
    2a2a:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	8f 83       	std	Y+7, r24	; 0x07
    2a34:	98 87       	std	Y+8, r25	; 0x08
    2a36:	a9 87       	std	Y+9, r26	; 0x09
    2a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3c:	78 85       	ldd	r23, Y+8	; 0x08
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	5f e3       	ldi	r21, 0x3F	; 63
    2a4a:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    2a4e:	88 23       	and	r24, r24
    2a50:	2c f4       	brge	.+10     	; 0x2a5c <HLCD_voidinit+0x66>
		__ticks = 1;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	3f c0       	rjmp	.+126    	; 0x2ada <HLCD_voidinit+0xe4>
	else if (__tmp > 65535)
    2a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5e:	78 85       	ldd	r23, Y+8	; 0x08
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	4c f5       	brge	.+82     	; 0x2ac6 <HLCD_voidinit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e2       	ldi	r20, 0x20	; 32
    2a82:	51 e4       	ldi	r21, 0x41	; 65
    2a84:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	0f c0       	rjmp	.+30     	; 0x2abc <HLCD_voidinit+0xc6>
    2a9e:	88 ec       	ldi	r24, 0xC8	; 200
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <HLCD_voidinit+0xb4>
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	69 f7       	brne	.-38     	; 0x2a9e <HLCD_voidinit+0xa8>
    2ac4:	14 c0       	rjmp	.+40     	; 0x2aee <HLCD_voidinit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <HLCD_voidinit+0xf0>
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	HLCD_voidSendCommand(0x33);
    2aee:	83 e3       	ldi	r24, 0x33	; 51
    2af0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);			//send for 4 bit initialization of LCD
    2af4:	82 e3       	ldi	r24, 0x32	; 50
    2af6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);			//select 4 bit mode, 5*7 dots
    2afa:	88 e2       	ldi	r24, 0x28	; 40
    2afc:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x0F);			//display on, cursor blinking
    2b00:	8f e0       	ldi	r24, 0x0F	; 15
    2b02:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);			//entry mode increment cursor to right
    2b06:	86 e0       	ldi	r24, 0x06	; 6
    2b08:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);			//clear display
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
}
    2b12:	2e 96       	adiw	r28, 0x0e	; 14
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <HLCD_voidclear>:


#endif

void HLCD_voidclear(void)
{
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0x01);			//clear command
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x80);			//8 is for first line & 0 is for 0th position
    2b32:	80 e8       	ldi	r24, 0x80	; 128
    2b34:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
}
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <HLCD_voidsendNumber>:

void HLCD_voidsendNumber(u32 Number)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	68 97       	sbiw	r28, 0x18	; 24
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	6d 8b       	std	Y+21, r22	; 0x15
    2b54:	7e 8b       	std	Y+22, r23	; 0x16
    2b56:	8f 8b       	std	Y+23, r24	; 0x17
    2b58:	98 8f       	std	Y+24, r25	; 0x18
	char n[20];
	itoa(Number, n, 10);
    2b5a:	8d 89       	ldd	r24, Y+21	; 0x15
    2b5c:	9e 89       	ldd	r25, Y+22	; 0x16
    2b5e:	9e 01       	movw	r18, r28
    2b60:	2f 5f       	subi	r18, 0xFF	; 255
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	b9 01       	movw	r22, r18
    2b66:	4a e0       	ldi	r20, 0x0A	; 10
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	0e 94 65 09 	call	0x12ca	; 0x12ca <itoa>
	HLCD_voidsendString(n);
    2b6e:	ce 01       	movw	r24, r28
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidsendString>
}
    2b76:	68 96       	adiw	r28, 0x18	; 24
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	08 95       	ret

00002b88 <HLCD_voidsendFloat>:

void HLCD_voidsendFloat(float32 Number)
{
    2b88:	0f 93       	push	r16
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	68 97       	sbiw	r28, 0x18	; 24
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	6d 8b       	std	Y+21, r22	; 0x15
    2ba0:	7e 8b       	std	Y+22, r23	; 0x16
    2ba2:	8f 8b       	std	Y+23, r24	; 0x17
    2ba4:	98 8f       	std	Y+24, r25	; 0x18
	char n[20];
	dtostre(Number,n, 2, 2);				//convert 2 characters width & 2 decimal places
    2ba6:	8d 89       	ldd	r24, Y+21	; 0x15
    2ba8:	9e 89       	ldd	r25, Y+22	; 0x16
    2baa:	af 89       	ldd	r26, Y+23	; 0x17
    2bac:	b8 8d       	ldd	r27, Y+24	; 0x18
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	9e 01       	movw	r18, r28
    2bb4:	2f 5f       	subi	r18, 0xFF	; 255
    2bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb8:	a9 01       	movw	r20, r18
    2bba:	22 e0       	ldi	r18, 0x02	; 2
    2bbc:	02 e0       	ldi	r16, 0x02	; 2
    2bbe:	0e 94 00 08 	call	0x1000	; 0x1000 <dtostre>
	HLCD_voidsendString(n);
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	01 96       	adiw	r24, 0x01	; 1
    2bc6:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidsendString>
}
    2bca:	68 96       	adiw	r28, 0x18	; 24
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	0f 91       	pop	r16
    2bdc:	08 95       	ret

00002bde <HLCD_voidsendString>:

void HLCD_voidsendString(char *string)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <HLCD_voidsendString+0x6>
    2be4:	0f 92       	push	r0
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	9b 83       	std	Y+3, r25	; 0x03
    2bec:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0; string[i] != 0; i++)
    2bee:	19 82       	std	Y+1, r1	; 0x01
    2bf0:	0e c0       	rjmp	.+28     	; 0x2c0e <HLCD_voidsendString+0x30>
	{
		HLCD_voidsendChar(string[i]);
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	e2 0f       	add	r30, r18
    2c00:	f3 1f       	adc	r31, r19
    2c02:	80 81       	ld	r24, Z
    2c04:	0e 94 66 12 	call	0x24cc	; 0x24cc <HLCD_voidsendChar>
}

void HLCD_voidsendString(char *string)
{
	u8 i;
	for(i=0; string[i] != 0; i++)
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	8f 5f       	subi	r24, 0xFF	; 255
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	fc 01       	movw	r30, r24
    2c1a:	e2 0f       	add	r30, r18
    2c1c:	f3 1f       	adc	r31, r19
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	39 f7       	brne	.-50     	; 0x2bf2 <HLCD_voidsendString+0x14>
	{
		HLCD_voidsendChar(string[i]);
	}
}
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <HLCD_voidgotoXY>:

void HLCD_voidgotoXY(u8 x_pos, u8 y_pos)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <HLCD_voidgotoXY+0x6>
    2c36:	0f 92       	push	r0
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
    2c3e:	6b 83       	std	Y+3, r22	; 0x03
	u8 add = 0;
    2c40:	19 82       	std	Y+1, r1	; 0x01
	if(x_pos == 0)
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	88 23       	and	r24, r24
    2c46:	19 f4       	brne	.+6      	; 0x2c4e <HLCD_voidgotoXY+0x1e>
	{
		add = 0x80;
    2c48:	80 e8       	ldi	r24, 0x80	; 128
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <HLCD_voidgotoXY+0x28>
	}
	else if(x_pos == 1)
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	81 30       	cpi	r24, 0x01	; 1
    2c52:	11 f4       	brne	.+4      	; 0x2c58 <HLCD_voidgotoXY+0x28>
	{
		add = 0xc0;
    2c54:	80 ec       	ldi	r24, 0xC0	; 192
    2c56:	89 83       	std	Y+1, r24	; 0x01
	}
	else{}
	if(y_pos <16)
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	80 31       	cpi	r24, 0x10	; 16
    2c5c:	20 f4       	brcc	.+8      	; 0x2c66 <HLCD_voidgotoXY+0x36>
	{
		add += y_pos;
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9b 81       	ldd	r25, Y+3	; 0x03
    2c62:	89 0f       	add	r24, r25
    2c64:	89 83       	std	Y+1, r24	; 0x01
	}
	HLCD_voidSendCommand(add);
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <HLCD_voidSendCommand>
}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <Hkeypad_u8GetKey>:
#include "Hkeypad_interface.h"
#include "Hkeypad_private.h"
#include "Hkeypad_config.h"

u8 Hkeypad_u8GetKey(void)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	a2 97       	sbiw	r28, 0x22	; 34
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_KEY;																				//variable for pressed button
    2c8c:	1c 82       	std	Y+4, r1	; 0x04
	u8 flag = 0;
    2c8e:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8ColIterator = 0;
    2c90:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIterator = 0;
    2c92:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8KeyIsPressed = NOT_PRESSED;																		//check the button is pressed or not
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	8d 83       	std	Y+5, r24	; 0x05
	u8 Col_array[COL_SIZE] = {KEYPAD_C1, KEYPAD_C2, KEYPAD_C3, KEYPAD_C4};
    2c98:	84 e0       	ldi	r24, 0x04	; 4
    2c9a:	8e 83       	std	Y+6, r24	; 0x06
    2c9c:	85 e0       	ldi	r24, 0x05	; 5
    2c9e:	8f 83       	std	Y+7, r24	; 0x07
    2ca0:	86 e0       	ldi	r24, 0x06	; 6
    2ca2:	88 87       	std	Y+8, r24	; 0x08
    2ca4:	87 e0       	ldi	r24, 0x07	; 7
    2ca6:	89 87       	std	Y+9, r24	; 0x09
	u8 Row_array[ROW_SIZE] = {KEYPAD_R1, KEYPAD_R2, KEYPAD_R3, KEYPAD_R4};
    2ca8:	1a 86       	std	Y+10, r1	; 0x0a
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	8b 87       	std	Y+11, r24	; 0x0b
    2cae:	82 e0       	ldi	r24, 0x02	; 2
    2cb0:	8c 87       	std	Y+12, r24	; 0x0c
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KeyPad_Type;
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	0e 96       	adiw	r24, 0x0e	; 14
    2cba:	9f 8f       	std	Y+31, r25	; 0x1f
    2cbc:	8e 8f       	std	Y+30, r24	; 0x1e
    2cbe:	e9 e9       	ldi	r30, 0x99	; 153
    2cc0:	f1 e0       	ldi	r31, 0x01	; 1
    2cc2:	f9 a3       	std	Y+33, r31	; 0x21
    2cc4:	e8 a3       	std	Y+32, r30	; 0x20
    2cc6:	f0 e1       	ldi	r31, 0x10	; 16
    2cc8:	fa a3       	std	Y+34, r31	; 0x22
    2cca:	e8 a1       	ldd	r30, Y+32	; 0x20
    2ccc:	f9 a1       	ldd	r31, Y+33	; 0x21
    2cce:	00 80       	ld	r0, Z
    2cd0:	88 a1       	ldd	r24, Y+32	; 0x20
    2cd2:	99 a1       	ldd	r25, Y+33	; 0x21
    2cd4:	01 96       	adiw	r24, 0x01	; 1
    2cd6:	99 a3       	std	Y+33, r25	; 0x21
    2cd8:	88 a3       	std	Y+32, r24	; 0x20
    2cda:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2cdc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2cde:	00 82       	st	Z, r0
    2ce0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ce2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ce8:	8e 8f       	std	Y+30, r24	; 0x1e
    2cea:	9a a1       	ldd	r25, Y+34	; 0x22
    2cec:	91 50       	subi	r25, 0x01	; 1
    2cee:	9a a3       	std	Y+34, r25	; 0x22
    2cf0:	ea a1       	ldd	r30, Y+34	; 0x22
    2cf2:	ee 23       	and	r30, r30
    2cf4:	51 f7       	brne	.-44     	; 0x2cca <Hkeypad_u8GetKey+0x52>

	for(Local_u8ColIterator = 0; Local_u8ColIterator< COL_SIZE; Local_u8ColIterator++)							//loop for columns of keypad
    2cf6:	1a 82       	std	Y+2, r1	; 0x02
    2cf8:	6b c0       	rjmp	.+214    	; 0x2dd0 <Hkeypad_u8GetKey+0x158>
	{
		MDIO_SetPinValue(KEYPAD_PORT, Col_array[Local_u8ColIterator], DIO_LOW);									//set the keypad columns to be low
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	ce 01       	movw	r24, r28
    2d02:	06 96       	adiw	r24, 0x06	; 6
    2d04:	fc 01       	movw	r30, r24
    2d06:	e2 0f       	add	r30, r18
    2d08:	f3 1f       	adc	r31, r19
    2d0a:	90 81       	ld	r25, Z
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	69 2f       	mov	r22, r25
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
		for(Local_u8RowIterator = 0; Local_u8RowIterator < ROW_SIZE; Local_u8RowIterator++)
    2d16:	19 82       	std	Y+1, r1	; 0x01
    2d18:	43 c0       	rjmp	.+134    	; 0x2da0 <Hkeypad_u8GetKey+0x128>
		{
			MDIO_GetPinValue(KEYPAD_PORT, Row_array[Local_u8RowIterator], &Local_u8KeyIsPressed);				//get the keypad columns to be high
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	ce 01       	movw	r24, r28
    2d22:	0a 96       	adiw	r24, 0x0a	; 10
    2d24:	fc 01       	movw	r30, r24
    2d26:	e2 0f       	add	r30, r18
    2d28:	f3 1f       	adc	r31, r19
    2d2a:	90 81       	ld	r25, Z
    2d2c:	9e 01       	movw	r18, r28
    2d2e:	2b 5f       	subi	r18, 0xFB	; 251
    2d30:	3f 4f       	sbci	r19, 0xFF	; 255
    2d32:	82 e0       	ldi	r24, 0x02	; 2
    2d34:	69 2f       	mov	r22, r25
    2d36:	a9 01       	movw	r20, r18
    2d38:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <MDIO_GetPinValue>
			if(Local_u8KeyIsPressed == PRESSED)
    2d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3e:	88 23       	and	r24, r24
    2d40:	61 f5       	brne	.+88     	; 0x2d9a <Hkeypad_u8GetKey+0x122>
    2d42:	11 c0       	rjmp	.+34     	; 0x2d66 <Hkeypad_u8GetKey+0xee>
			{
				while(Local_u8KeyIsPressed == PRESSED)
				{
					MDIO_GetPinValue(KEYPAD_PORT, Row_array[Local_u8RowIterator], &Local_u8KeyIsPressed);				//get the keypad columns to be high
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	0a 96       	adiw	r24, 0x0a	; 10
    2d4e:	fc 01       	movw	r30, r24
    2d50:	e2 0f       	add	r30, r18
    2d52:	f3 1f       	adc	r31, r19
    2d54:	90 81       	ld	r25, Z
    2d56:	9e 01       	movw	r18, r28
    2d58:	2b 5f       	subi	r18, 0xFB	; 251
    2d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	69 2f       	mov	r22, r25
    2d60:	a9 01       	movw	r20, r18
    2d62:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <MDIO_GetPinValue>
		for(Local_u8RowIterator = 0; Local_u8RowIterator < ROW_SIZE; Local_u8RowIterator++)
		{
			MDIO_GetPinValue(KEYPAD_PORT, Row_array[Local_u8RowIterator], &Local_u8KeyIsPressed);				//get the keypad columns to be high
			if(Local_u8KeyIsPressed == PRESSED)
			{
				while(Local_u8KeyIsPressed == PRESSED)
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	88 23       	and	r24, r24
    2d6a:	61 f3       	breq	.-40     	; 0x2d44 <Hkeypad_u8GetKey+0xcc>
				{
					MDIO_GetPinValue(KEYPAD_PORT, Row_array[Local_u8RowIterator], &Local_u8KeyIsPressed);				//get the keypad columns to be high
				}
				Local_u8PressedKey = Keypad_arr[Local_u8RowIterator][Local_u8ColIterator];						//store the pressed button value
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	48 2f       	mov	r20, r24
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	22 0f       	add	r18, r18
    2d7a:	33 1f       	adc	r19, r19
    2d7c:	22 0f       	add	r18, r18
    2d7e:	33 1f       	adc	r19, r19
    2d80:	ce 01       	movw	r24, r28
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	82 0f       	add	r24, r18
    2d86:	93 1f       	adc	r25, r19
    2d88:	84 0f       	add	r24, r20
    2d8a:	95 1f       	adc	r25, r21
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	3d 96       	adiw	r30, 0x0d	; 13
    2d90:	80 81       	ld	r24, Z
    2d92:	8c 83       	std	Y+4, r24	; 0x04
				flag = 1;
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	8b 83       	std	Y+3, r24	; 0x03
    2d98:	07 c0       	rjmp	.+14     	; 0x2da8 <Hkeypad_u8GetKey+0x130>
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KeyPad_Type;

	for(Local_u8ColIterator = 0; Local_u8ColIterator< COL_SIZE; Local_u8ColIterator++)							//loop for columns of keypad
	{
		MDIO_SetPinValue(KEYPAD_PORT, Col_array[Local_u8ColIterator], DIO_LOW);									//set the keypad columns to be low
		for(Local_u8RowIterator = 0; Local_u8RowIterator < ROW_SIZE; Local_u8RowIterator++)
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	8f 5f       	subi	r24, 0xFF	; 255
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	84 30       	cpi	r24, 0x04	; 4
    2da4:	08 f4       	brcc	.+2      	; 0x2da8 <Hkeypad_u8GetKey+0x130>
    2da6:	b9 cf       	rjmp	.-142    	; 0x2d1a <Hkeypad_u8GetKey+0xa2>
				break;
			}
			else
			{}
		}
		MDIO_SetPinValue(KEYPAD_PORT, Col_array[Local_u8ColIterator], DIO_HIGH);									//set the keypad columns to be low
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	ce 01       	movw	r24, r28
    2db0:	06 96       	adiw	r24, 0x06	; 6
    2db2:	fc 01       	movw	r30, r24
    2db4:	e2 0f       	add	r30, r18
    2db6:	f3 1f       	adc	r31, r19
    2db8:	90 81       	ld	r25, Z
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	69 2f       	mov	r22, r25
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MDIO_SetPinValue>
		if(flag)
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	88 23       	and	r24, r24
    2dc8:	39 f4       	brne	.+14     	; 0x2dd8 <Hkeypad_u8GetKey+0x160>
	u8 Local_u8KeyIsPressed = NOT_PRESSED;																		//check the button is pressed or not
	u8 Col_array[COL_SIZE] = {KEYPAD_C1, KEYPAD_C2, KEYPAD_C3, KEYPAD_C4};
	u8 Row_array[ROW_SIZE] = {KEYPAD_R1, KEYPAD_R2, KEYPAD_R3, KEYPAD_R4};
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KeyPad_Type;

	for(Local_u8ColIterator = 0; Local_u8ColIterator< COL_SIZE; Local_u8ColIterator++)							//loop for columns of keypad
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	8a 83       	std	Y+2, r24	; 0x02
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	84 30       	cpi	r24, 0x04	; 4
    2dd4:	08 f4       	brcc	.+2      	; 0x2dd8 <Hkeypad_u8GetKey+0x160>
    2dd6:	91 cf       	rjmp	.-222    	; 0x2cfa <Hkeypad_u8GetKey+0x82>
			break;
		}
		else{}

	}
	return Local_u8PressedKey;
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2dda:	a2 96       	adiw	r28, 0x22	; 34
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <sum>:
#include "../STD_TYPES.h"
#include "../MACROS.h"
#include "main_Functions.h"

void sum(u8 x, u8 y, u16 *result)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <sum+0x6>
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <sum+0x8>
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	6a 83       	std	Y+2, r22	; 0x02
    2dfc:	5c 83       	std	Y+4, r21	; 0x04
    2dfe:	4b 83       	std	Y+3, r20	; 0x03
	*result = x + y;
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	88 2f       	mov	r24, r24
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	82 0f       	add	r24, r18
    2e0e:	93 1f       	adc	r25, r19
    2e10:	eb 81       	ldd	r30, Y+3	; 0x03
    2e12:	fc 81       	ldd	r31, Y+4	; 0x04
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
}
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <subtract>:

void subtract(u8 x, u8 y, u16 *result)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <subtract+0x6>
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <subtract+0x8>
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	89 83       	std	Y+1, r24	; 0x01
    2e34:	6a 83       	std	Y+2, r22	; 0x02
    2e36:	5c 83       	std	Y+4, r21	; 0x04
    2e38:	4b 83       	std	Y+3, r20	; 0x03
	*result = x - y;
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a9 01       	movw	r20, r18
    2e48:	48 1b       	sub	r20, r24
    2e4a:	59 0b       	sbc	r21, r25
    2e4c:	ca 01       	movw	r24, r20
    2e4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e50:	fc 81       	ldd	r31, Y+4	; 0x04
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	80 83       	st	Z, r24
}
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <multiply>:

void multiply(u8 x, u8 y, u16 *result)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <multiply+0x6>
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <multiply+0x8>
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	6a 83       	std	Y+2, r22	; 0x02
    2e74:	5c 83       	std	Y+4, r21	; 0x04
    2e76:	4b 83       	std	Y+3, r20	; 0x03
	*result = x * y;
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	88 2f       	mov	r24, r24
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	ac 01       	movw	r20, r24
    2e86:	24 9f       	mul	r18, r20
    2e88:	c0 01       	movw	r24, r0
    2e8a:	25 9f       	mul	r18, r21
    2e8c:	90 0d       	add	r25, r0
    2e8e:	34 9f       	mul	r19, r20
    2e90:	90 0d       	add	r25, r0
    2e92:	11 24       	eor	r1, r1
    2e94:	eb 81       	ldd	r30, Y+3	; 0x03
    2e96:	fc 81       	ldd	r31, Y+4	; 0x04
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
}
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <division>:

void division(u8 x, u8 y, float32 *r)
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <division+0x6>
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <division+0x8>
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	6a 83       	std	Y+2, r22	; 0x02
    2eba:	5c 83       	std	Y+4, r21	; 0x04
    2ebc:	4b 83       	std	Y+3, r20	; 0x03
	*r = x / y;
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	69 2f       	mov	r22, r25
    2ec4:	0e 94 4e 1a 	call	0x349c	; 0x349c <__udivmodqi4>
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	aa 27       	eor	r26, r26
    2ece:	97 fd       	sbrc	r25, 7
    2ed0:	a0 95       	com	r26
    2ed2:	ba 2f       	mov	r27, r26
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__floatsisf>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee4:	80 83       	st	Z, r24
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	a2 83       	std	Z+2, r26	; 0x02
    2eea:	b3 83       	std	Z+3, r27	; 0x03
}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <strToNumb>:

s32 strToNumb(char str[])
{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	27 97       	sbiw	r28, 0x07	; 7
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	9f 83       	std	Y+7, r25	; 0x07
    2f10:	8e 83       	std	Y+6, r24	; 0x06
	u8 i=0;
    2f12:	1d 82       	std	Y+5, r1	; 0x05
	s32 sum=0;
    2f14:	19 82       	std	Y+1, r1	; 0x01
    2f16:	1a 82       	std	Y+2, r1	; 0x02
    2f18:	1b 82       	std	Y+3, r1	; 0x03
    2f1a:	1c 82       	std	Y+4, r1	; 0x04
    2f1c:	3f c0       	rjmp	.+126    	; 0x2f9c <strToNumb+0xa2>
	while(str[i]!='\0')
	{
		if(str[i]<48 || str[i]>57)      //48-57 -> 0-9
    2f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f20:	28 2f       	mov	r18, r24
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	8e 81       	ldd	r24, Y+6	; 0x06
    2f26:	9f 81       	ldd	r25, Y+7	; 0x07
    2f28:	fc 01       	movw	r30, r24
    2f2a:	e2 0f       	add	r30, r18
    2f2c:	f3 1f       	adc	r31, r19
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 33       	cpi	r24, 0x30	; 48
    2f32:	a0 f1       	brcs	.+104    	; 0x2f9c <strToNumb+0xa2>
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f3e:	fc 01       	movw	r30, r24
    2f40:	e2 0f       	add	r30, r18
    2f42:	f3 1f       	adc	r31, r19
    2f44:	80 81       	ld	r24, Z
    2f46:	8a 33       	cpi	r24, 0x3A	; 58
    2f48:	48 f5       	brcc	.+82     	; 0x2f9c <strToNumb+0xa2>
		{
			//printf("unable to convert\n");
		}
		else
		{
			sum=sum*10+(str[i]-48);
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f50:	bc 81       	ldd	r27, Y+4	; 0x04
    2f52:	2a e0       	ldi	r18, 0x0A	; 10
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e0       	ldi	r20, 0x00	; 0
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 2f 1a 	call	0x345e	; 0x345e <__mulsi3>
    2f62:	ab 01       	movw	r20, r22
    2f64:	bc 01       	movw	r22, r24
    2f66:	8d 81       	ldd	r24, Y+5	; 0x05
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f6e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f70:	fc 01       	movw	r30, r24
    2f72:	e2 0f       	add	r30, r18
    2f74:	f3 1f       	adc	r31, r19
    2f76:	80 81       	ld	r24, Z
    2f78:	88 2f       	mov	r24, r24
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	c0 97       	sbiw	r24, 0x30	; 48
    2f7e:	aa 27       	eor	r26, r26
    2f80:	97 fd       	sbrc	r25, 7
    2f82:	a0 95       	com	r26
    2f84:	ba 2f       	mov	r27, r26
    2f86:	84 0f       	add	r24, r20
    2f88:	95 1f       	adc	r25, r21
    2f8a:	a6 1f       	adc	r26, r22
    2f8c:	b7 1f       	adc	r27, r23
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	ab 83       	std	Y+3, r26	; 0x03
    2f94:	bc 83       	std	Y+4, r27	; 0x04
			i++;
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	8f 5f       	subi	r24, 0xFF	; 255
    2f9a:	8d 83       	std	Y+5, r24	; 0x05

s32 strToNumb(char str[])
{
	u8 i=0;
	s32 sum=0;
	while(str[i]!='\0')
    2f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9e:	28 2f       	mov	r18, r24
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	e2 0f       	add	r30, r18
    2faa:	f3 1f       	adc	r31, r19
    2fac:	80 81       	ld	r24, Z
    2fae:	88 23       	and	r24, r24
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <strToNumb+0xba>
    2fb2:	b5 cf       	rjmp	.-150    	; 0x2f1e <strToNumb+0x24>
		{
			sum=sum*10+(str[i]-48);
			i++;
		}
	}
	return sum;
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	ab 81       	ldd	r26, Y+3	; 0x03
    2fba:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	cd 01       	movw	r24, r26
    2fc0:	27 96       	adiw	r28, 0x07	; 7
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	08 95       	ret

00002fd2 <main>:

u8 value, input[20] = "", iterator = 0;
float32 result;

int main()
{
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	6c 97       	sbiw	r28, 0x1c	; 28
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
	Port_VoidInit();															/*Initialize the ports*/
    2fe6:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Port_VoidInit>
	HLCD_voidinit();															/*Initialize the LCD*/
    2fea:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <HLCD_voidinit>
	HLCD_voidgotoXY(0, 5);														/*Set the cursor position on LCD at first row and column 5 */
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	65 e0       	ldi	r22, 0x05	; 5
    2ff2:	0e 94 18 16 	call	0x2c30	; 0x2c30 <HLCD_voidgotoXY>
	HLCD_voidsendString("Simple");												/*Print stirng on LCD*/
    2ff6:	80 e6       	ldi	r24, 0x60	; 96
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidsendString>
	HLCD_voidgotoXY(1, 3);														/*Set the cursor position on LCD at second row and column 3 */
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	63 e0       	ldi	r22, 0x03	; 3
    3002:	0e 94 18 16 	call	0x2c30	; 0x2c30 <HLCD_voidgotoXY>
	HLCD_voidsendString("Calculator");											/*Print stirng on LCD*/
    3006:	87 e6       	ldi	r24, 0x67	; 103
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <HLCD_voidsendString>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	aa e7       	ldi	r26, 0x7A	; 122
    3014:	b4 e4       	ldi	r27, 0x44	; 68
    3016:	89 8f       	std	Y+25, r24	; 0x19
    3018:	9a 8f       	std	Y+26, r25	; 0x1a
    301a:	ab 8f       	std	Y+27, r26	; 0x1b
    301c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	69 8d       	ldd	r22, Y+25	; 0x19
    3020:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a ef       	ldi	r20, 0xFA	; 250
    302c:	54 e4       	ldi	r21, 0x44	; 68
    302e:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	8d 8b       	std	Y+21, r24	; 0x15
    3038:	9e 8b       	std	Y+22, r25	; 0x16
    303a:	af 8b       	std	Y+23, r26	; 0x17
    303c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    303e:	6d 89       	ldd	r22, Y+21	; 0x15
    3040:	7e 89       	ldd	r23, Y+22	; 0x16
    3042:	8f 89       	ldd	r24, Y+23	; 0x17
    3044:	98 8d       	ldd	r25, Y+24	; 0x18
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <main+0x8e>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9c 8b       	std	Y+20, r25	; 0x14
    305c:	8b 8b       	std	Y+19, r24	; 0x13
    305e:	3f c0       	rjmp	.+126    	; 0x30de <main+0x10c>
	else if (__tmp > 65535)
    3060:	6d 89       	ldd	r22, Y+21	; 0x15
    3062:	7e 89       	ldd	r23, Y+22	; 0x16
    3064:	8f 89       	ldd	r24, Y+23	; 0x17
    3066:	98 8d       	ldd	r25, Y+24	; 0x18
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	4f e7       	ldi	r20, 0x7F	; 127
    306e:	57 e4       	ldi	r21, 0x47	; 71
    3070:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    3074:	18 16       	cp	r1, r24
    3076:	4c f5       	brge	.+82     	; 0x30ca <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3078:	69 8d       	ldd	r22, Y+25	; 0x19
    307a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    307c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9c 8b       	std	Y+20, r25	; 0x14
    309e:	8b 8b       	std	Y+19, r24	; 0x13
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <main+0xee>
    30a2:	88 ec       	ldi	r24, 0xC8	; 200
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9a 8b       	std	Y+18, r25	; 0x12
    30a8:	89 8b       	std	Y+17, r24	; 0x11
    30aa:	89 89       	ldd	r24, Y+17	; 0x11
    30ac:	9a 89       	ldd	r25, Y+18	; 0x12
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <main+0xdc>
    30b2:	9a 8b       	std	Y+18, r25	; 0x12
    30b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	8b 89       	ldd	r24, Y+19	; 0x13
    30b8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9c 8b       	std	Y+20, r25	; 0x14
    30be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	8b 89       	ldd	r24, Y+19	; 0x13
    30c2:	9c 89       	ldd	r25, Y+20	; 0x14
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	69 f7       	brne	.-38     	; 0x30a2 <main+0xd0>
    30c8:	14 c0       	rjmp	.+40     	; 0x30f2 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	6d 89       	ldd	r22, Y+21	; 0x15
    30cc:	7e 89       	ldd	r23, Y+22	; 0x16
    30ce:	8f 89       	ldd	r24, Y+23	; 0x17
    30d0:	98 8d       	ldd	r25, Y+24	; 0x18
    30d2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9c 8b       	std	Y+20, r25	; 0x14
    30dc:	8b 8b       	std	Y+19, r24	; 0x13
    30de:	8b 89       	ldd	r24, Y+19	; 0x13
    30e0:	9c 89       	ldd	r25, Y+20	; 0x14
    30e2:	98 8b       	std	Y+16, r25	; 0x10
    30e4:	8f 87       	std	Y+15, r24	; 0x0f
    30e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e8:	98 89       	ldd	r25, Y+16	; 0x10
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <main+0x118>
    30ee:	98 8b       	std	Y+16, r25	; 0x10
    30f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);															/*wait for 1sec*/
	HLCD_voidclear();															/*Clear the LCD*/
    30f2:	0e 94 92 15 	call	0x2b24	; 0x2b24 <HLCD_voidclear>

	while(1)																	/*Infinite loop*/
	{
		value = Hkeypad_u8GetKey();												/*Get the pressed key in keypad*/
    30f6:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <Hkeypad_u8GetKey>
    30fa:	80 93 af 01 	sts	0x01AF, r24

		if(value != NO_KEY)														/*check if there is a key is pressed*/
    30fe:	80 91 af 01 	lds	r24, 0x01AF
    3102:	88 23       	and	r24, r24
    3104:	c1 f3       	breq	.-16     	; 0x30f6 <main+0x124>
		{

			if(value == '=')
    3106:	80 91 af 01 	lds	r24, 0x01AF
    310a:	8d 33       	cpi	r24, 0x3D	; 61
    310c:	09 f0       	breq	.+2      	; 0x3110 <main+0x13e>
    310e:	a1 c0       	rjmp	.+322    	; 0x3252 <main+0x280>
			{
				input[iterator] = '\0';											//terminate the string
    3110:	80 91 aa 01 	lds	r24, 0x01AA
    3114:	88 2f       	mov	r24, r24
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	fc 01       	movw	r30, r24
    311a:	eb 57       	subi	r30, 0x7B	; 123
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	10 82       	st	Z, r1
				result = calculate(input);										//function to calculate the result
    3120:	85 e8       	ldi	r24, 0x85	; 133
    3122:	91 e0       	ldi	r25, 0x01	; 1
    3124:	0e 94 3c 19 	call	0x3278	; 0x3278 <calculate>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	80 93 ab 01 	sts	0x01AB, r24
    3130:	90 93 ac 01 	sts	0x01AC, r25
    3134:	a0 93 ad 01 	sts	0x01AD, r26
    3138:	b0 93 ae 01 	sts	0x01AE, r27
				HLCD_voidclear();
    313c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <HLCD_voidclear>
				HLCD_voidsendChar(input);
    3140:	85 e8       	ldi	r24, 0x85	; 133
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	0e 94 66 12 	call	0x24cc	; 0x24cc <HLCD_voidsendChar>
				HLCD_voidgotoXY(0, 0);
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <HLCD_voidgotoXY>
				HLCD_voidsendFloat(result);
    3150:	80 91 ab 01 	lds	r24, 0x01AB
    3154:	90 91 ac 01 	lds	r25, 0x01AC
    3158:	a0 91 ad 01 	lds	r26, 0x01AD
    315c:	b0 91 ae 01 	lds	r27, 0x01AE
    3160:	bc 01       	movw	r22, r24
    3162:	cd 01       	movw	r24, r26
    3164:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <HLCD_voidsendFloat>
				iterator = 0;													//reset the index
    3168:	10 92 aa 01 	sts	0x01AA, r1
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	aa ef       	ldi	r26, 0xFA	; 250
    3172:	b3 e4       	ldi	r27, 0x43	; 67
    3174:	8b 87       	std	Y+11, r24	; 0x0b
    3176:	9c 87       	std	Y+12, r25	; 0x0c
    3178:	ad 87       	std	Y+13, r26	; 0x0d
    317a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317c:	6b 85       	ldd	r22, Y+11	; 0x0b
    317e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3180:	8d 85       	ldd	r24, Y+13	; 0x0d
    3182:	9e 85       	ldd	r25, Y+14	; 0x0e
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4a ef       	ldi	r20, 0xFA	; 250
    318a:	54 e4       	ldi	r21, 0x44	; 68
    318c:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	8f 83       	std	Y+7, r24	; 0x07
    3196:	98 87       	std	Y+8, r25	; 0x08
    3198:	a9 87       	std	Y+9, r26	; 0x09
    319a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    319c:	6f 81       	ldd	r22, Y+7	; 0x07
    319e:	78 85       	ldd	r23, Y+8	; 0x08
    31a0:	89 85       	ldd	r24, Y+9	; 0x09
    31a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e8       	ldi	r20, 0x80	; 128
    31aa:	5f e3       	ldi	r21, 0x3F	; 63
    31ac:	0e 94 b0 04 	call	0x960	; 0x960 <__ltsf2>
    31b0:	88 23       	and	r24, r24
    31b2:	2c f4       	brge	.+10     	; 0x31be <main+0x1ec>
		__ticks = 1;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	3f c0       	rjmp	.+126    	; 0x323c <main+0x26a>
	else if (__tmp > 65535)
    31be:	6f 81       	ldd	r22, Y+7	; 0x07
    31c0:	78 85       	ldd	r23, Y+8	; 0x08
    31c2:	89 85       	ldd	r24, Y+9	; 0x09
    31c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	3f ef       	ldi	r19, 0xFF	; 255
    31ca:	4f e7       	ldi	r20, 0x7F	; 127
    31cc:	57 e4       	ldi	r21, 0x47	; 71
    31ce:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__gtsf2>
    31d2:	18 16       	cp	r1, r24
    31d4:	4c f5       	brge	.+82     	; 0x3228 <main+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31da:	8d 85       	ldd	r24, Y+13	; 0x0d
    31dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e2       	ldi	r20, 0x20	; 32
    31e4:	51 e4       	ldi	r21, 0x41	; 65
    31e6:	0e 94 aa 02 	call	0x554	; 0x554 <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <main+0x24c>
    3200:	88 ec       	ldi	r24, 0xC8	; 200
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9c 83       	std	Y+4, r25	; 0x04
    3206:	8b 83       	std	Y+3, r24	; 0x03
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	9c 81       	ldd	r25, Y+4	; 0x04
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <main+0x23a>
    3210:	9c 83       	std	Y+4, r25	; 0x04
    3212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	9e 83       	std	Y+6, r25	; 0x06
    321c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	69 f7       	brne	.-38     	; 0x3200 <main+0x22e>
    3226:	67 cf       	rjmp	.-306    	; 0x30f6 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3228:	6f 81       	ldd	r22, Y+7	; 0x07
    322a:	78 85       	ldd	r23, Y+8	; 0x08
    322c:	89 85       	ldd	r24, Y+9	; 0x09
    322e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3230:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9e 83       	std	Y+6, r25	; 0x06
    323a:	8d 83       	std	Y+5, r24	; 0x05
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	9a 81       	ldd	r25, Y+2	; 0x02
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <main+0x276>
    324c:	9a 83       	std	Y+2, r25	; 0x02
    324e:	89 83       	std	Y+1, r24	; 0x01
    3250:	52 cf       	rjmp	.-348    	; 0x30f6 <main+0x124>
				_delay_ms(500);													//wait for 500ms
			}
			else
			{
				input[iterator++] = value;
    3252:	30 91 aa 01 	lds	r19, 0x01AA
    3256:	83 2f       	mov	r24, r19
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	20 91 af 01 	lds	r18, 0x01AF
    325e:	fc 01       	movw	r30, r24
    3260:	eb 57       	subi	r30, 0x7B	; 123
    3262:	fe 4f       	sbci	r31, 0xFE	; 254
    3264:	20 83       	st	Z, r18
    3266:	83 2f       	mov	r24, r19
    3268:	8f 5f       	subi	r24, 0xFF	; 255
    326a:	80 93 aa 01 	sts	0x01AA, r24
				HLCD_voidsendChar(value);
    326e:	80 91 af 01 	lds	r24, 0x01AF
    3272:	0e 94 66 12 	call	0x24cc	; 0x24cc <HLCD_voidsendChar>
    3276:	3f cf       	rjmp	.-386    	; 0x30f6 <main+0x124>

00003278 <calculate>:
	}

}

float32 calculate(const u8 *input)
{
    3278:	ef 92       	push	r14
    327a:	ff 92       	push	r15
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	61 97       	sbiw	r28, 0x11	; 17
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	9b 87       	std	Y+11, r25	; 0x0b
    3296:	8a 87       	std	Y+10, r24	; 0x0a
	u32 n1, n2;
	u8 operator;

	if(sscanf(input, "%lu %c %lu", &n1, &operator, &n2) != 3)
    3298:	2d b7       	in	r18, 0x3d	; 61
    329a:	3e b7       	in	r19, 0x3e	; 62
    329c:	2a 50       	subi	r18, 0x0A	; 10
    329e:	30 40       	sbci	r19, 0x00	; 0
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	f8 94       	cli
    32a4:	3e bf       	out	0x3e, r19	; 62
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	2d bf       	out	0x3d, r18	; 61
    32aa:	ed b7       	in	r30, 0x3d	; 61
    32ac:	fe b7       	in	r31, 0x3e	; 62
    32ae:	31 96       	adiw	r30, 0x01	; 1
    32b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b4:	91 83       	std	Z+1, r25	; 0x01
    32b6:	80 83       	st	Z, r24
    32b8:	82 e7       	ldi	r24, 0x72	; 114
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	93 83       	std	Z+3, r25	; 0x03
    32be:	82 83       	std	Z+2, r24	; 0x02
    32c0:	ce 01       	movw	r24, r28
    32c2:	01 96       	adiw	r24, 0x01	; 1
    32c4:	95 83       	std	Z+5, r25	; 0x05
    32c6:	84 83       	std	Z+4, r24	; 0x04
    32c8:	ce 01       	movw	r24, r28
    32ca:	09 96       	adiw	r24, 0x09	; 9
    32cc:	97 83       	std	Z+7, r25	; 0x07
    32ce:	86 83       	std	Z+6, r24	; 0x06
    32d0:	ce 01       	movw	r24, r28
    32d2:	05 96       	adiw	r24, 0x05	; 5
    32d4:	91 87       	std	Z+9, r25	; 0x09
    32d6:	80 87       	std	Z+8, r24	; 0x08
    32d8:	0e 94 86 09 	call	0x130c	; 0x130c <sscanf>
    32dc:	ad b7       	in	r26, 0x3d	; 61
    32de:	be b7       	in	r27, 0x3e	; 62
    32e0:	1a 96       	adiw	r26, 0x0a	; 10
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	be bf       	out	0x3e, r27	; 62
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	ad bf       	out	0x3d, r26	; 61
    32ec:	83 30       	cpi	r24, 0x03	; 3
    32ee:	91 05       	cpc	r25, r1
    32f0:	49 f0       	breq	.+18     	; 0x3304 <calculate+0x8c>
	{
		//Invalid format
		return 0;
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	a0 e0       	ldi	r26, 0x00	; 0
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	8e 87       	std	Y+14, r24	; 0x0e
    32fc:	9f 87       	std	Y+15, r25	; 0x0f
    32fe:	a8 8b       	std	Y+16, r26	; 0x10
    3300:	b9 8b       	std	Y+17, r27	; 0x11
    3302:	9a c0       	rjmp	.+308    	; 0x3438 <calculate+0x1c0>
	}
	switch(operator)
    3304:	89 85       	ldd	r24, Y+9	; 0x09
    3306:	a8 2f       	mov	r26, r24
    3308:	b0 e0       	ldi	r27, 0x00	; 0
    330a:	bd 87       	std	Y+13, r27	; 0x0d
    330c:	ac 87       	std	Y+12, r26	; 0x0c
    330e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3310:	3d 85       	ldd	r19, Y+13	; 0x0d
    3312:	2f 32       	cpi	r18, 0x2F	; 47
    3314:	31 05       	cpc	r19, r1
    3316:	09 f4       	brne	.+2      	; 0x331a <calculate+0xa2>
    3318:	57 c0       	rjmp	.+174    	; 0x33c8 <calculate+0x150>
    331a:	8c 85       	ldd	r24, Y+12	; 0x0c
    331c:	9d 85       	ldd	r25, Y+13	; 0x0d
    331e:	80 33       	cpi	r24, 0x30	; 48
    3320:	91 05       	cpc	r25, r1
    3322:	5c f4       	brge	.+22     	; 0x333a <calculate+0xc2>
    3324:	ac 85       	ldd	r26, Y+12	; 0x0c
    3326:	bd 85       	ldd	r27, Y+13	; 0x0d
    3328:	ab 32       	cpi	r26, 0x2B	; 43
    332a:	b1 05       	cpc	r27, r1
    332c:	61 f0       	breq	.+24     	; 0x3346 <calculate+0xce>
    332e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3330:	3d 85       	ldd	r19, Y+13	; 0x0d
    3332:	2d 32       	cpi	r18, 0x2D	; 45
    3334:	31 05       	cpc	r19, r1
    3336:	e1 f0       	breq	.+56     	; 0x3370 <calculate+0xf8>
    3338:	77 c0       	rjmp	.+238    	; 0x3428 <calculate+0x1b0>
    333a:	8c 85       	ldd	r24, Y+12	; 0x0c
    333c:	9d 85       	ldd	r25, Y+13	; 0x0d
    333e:	88 35       	cpi	r24, 0x58	; 88
    3340:	91 05       	cpc	r25, r1
    3342:	59 f1       	breq	.+86     	; 0x339a <calculate+0x122>
    3344:	71 c0       	rjmp	.+226    	; 0x3428 <calculate+0x1b0>
	{
	case '+':
		return n1+n2;
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	9a 81       	ldd	r25, Y+2	; 0x02
    334a:	ab 81       	ldd	r26, Y+3	; 0x03
    334c:	bc 81       	ldd	r27, Y+4	; 0x04
    334e:	2d 81       	ldd	r18, Y+5	; 0x05
    3350:	3e 81       	ldd	r19, Y+6	; 0x06
    3352:	4f 81       	ldd	r20, Y+7	; 0x07
    3354:	58 85       	ldd	r21, Y+8	; 0x08
    3356:	82 0f       	add	r24, r18
    3358:	93 1f       	adc	r25, r19
    335a:	a4 1f       	adc	r26, r20
    335c:	b5 1f       	adc	r27, r21
    335e:	bc 01       	movw	r22, r24
    3360:	cd 01       	movw	r24, r26
    3362:	0e 94 92 05 	call	0xb24	; 0xb24 <__floatunsisf>
    3366:	6e 87       	std	Y+14, r22	; 0x0e
    3368:	7f 87       	std	Y+15, r23	; 0x0f
    336a:	88 8b       	std	Y+16, r24	; 0x10
    336c:	99 8b       	std	Y+17, r25	; 0x11
    336e:	64 c0       	rjmp	.+200    	; 0x3438 <calculate+0x1c0>
	case '-':
		return n1-n2;
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	ab 81       	ldd	r26, Y+3	; 0x03
    3376:	bc 81       	ldd	r27, Y+4	; 0x04
    3378:	2d 81       	ldd	r18, Y+5	; 0x05
    337a:	3e 81       	ldd	r19, Y+6	; 0x06
    337c:	4f 81       	ldd	r20, Y+7	; 0x07
    337e:	58 85       	ldd	r21, Y+8	; 0x08
    3380:	82 1b       	sub	r24, r18
    3382:	93 0b       	sbc	r25, r19
    3384:	a4 0b       	sbc	r26, r20
    3386:	b5 0b       	sbc	r27, r21
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	0e 94 92 05 	call	0xb24	; 0xb24 <__floatunsisf>
    3390:	6e 87       	std	Y+14, r22	; 0x0e
    3392:	7f 87       	std	Y+15, r23	; 0x0f
    3394:	88 8b       	std	Y+16, r24	; 0x10
    3396:	99 8b       	std	Y+17, r25	; 0x11
    3398:	4f c0       	rjmp	.+158    	; 0x3438 <calculate+0x1c0>
	case 'X':
		return n1*n2;
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	9a 81       	ldd	r25, Y+2	; 0x02
    339e:	ab 81       	ldd	r26, Y+3	; 0x03
    33a0:	bc 81       	ldd	r27, Y+4	; 0x04
    33a2:	2d 81       	ldd	r18, Y+5	; 0x05
    33a4:	3e 81       	ldd	r19, Y+6	; 0x06
    33a6:	4f 81       	ldd	r20, Y+7	; 0x07
    33a8:	58 85       	ldd	r21, Y+8	; 0x08
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 2f 1a 	call	0x345e	; 0x345e <__mulsi3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 92 05 	call	0xb24	; 0xb24 <__floatunsisf>
    33be:	6e 87       	std	Y+14, r22	; 0x0e
    33c0:	7f 87       	std	Y+15, r23	; 0x0f
    33c2:	88 8b       	std	Y+16, r24	; 0x10
    33c4:	99 8b       	std	Y+17, r25	; 0x11
    33c6:	38 c0       	rjmp	.+112    	; 0x3438 <calculate+0x1c0>
	case '/':
		if(n2 != 0)
    33c8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ca:	9e 81       	ldd	r25, Y+6	; 0x06
    33cc:	af 81       	ldd	r26, Y+7	; 0x07
    33ce:	b8 85       	ldd	r27, Y+8	; 0x08
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	a1 05       	cpc	r26, r1
    33d4:	b1 05       	cpc	r27, r1
    33d6:	f9 f0       	breq	.+62     	; 0x3416 <calculate+0x19e>
		{
			return ((float32)n1)/n2;
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	9a 81       	ldd	r25, Y+2	; 0x02
    33dc:	ab 81       	ldd	r26, Y+3	; 0x03
    33de:	bc 81       	ldd	r27, Y+4	; 0x04
    33e0:	bc 01       	movw	r22, r24
    33e2:	cd 01       	movw	r24, r26
    33e4:	0e 94 92 05 	call	0xb24	; 0xb24 <__floatunsisf>
    33e8:	7b 01       	movw	r14, r22
    33ea:	8c 01       	movw	r16, r24
    33ec:	8d 81       	ldd	r24, Y+5	; 0x05
    33ee:	9e 81       	ldd	r25, Y+6	; 0x06
    33f0:	af 81       	ldd	r26, Y+7	; 0x07
    33f2:	b8 85       	ldd	r27, Y+8	; 0x08
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 92 05 	call	0xb24	; 0xb24 <__floatunsisf>
    33fc:	9b 01       	movw	r18, r22
    33fe:	ac 01       	movw	r20, r24
    3400:	c8 01       	movw	r24, r16
    3402:	b7 01       	movw	r22, r14
    3404:	0e 94 a4 03 	call	0x748	; 0x748 <__divsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	8e 87       	std	Y+14, r24	; 0x0e
    340e:	9f 87       	std	Y+15, r25	; 0x0f
    3410:	a8 8b       	std	Y+16, r26	; 0x10
    3412:	b9 8b       	std	Y+17, r27	; 0x11
    3414:	11 c0       	rjmp	.+34     	; 0x3438 <calculate+0x1c0>
		}
		else
		{
			return 0;
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	a0 e0       	ldi	r26, 0x00	; 0
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	8e 87       	std	Y+14, r24	; 0x0e
    3420:	9f 87       	std	Y+15, r25	; 0x0f
    3422:	a8 8b       	std	Y+16, r26	; 0x10
    3424:	b9 8b       	std	Y+17, r27	; 0x11
    3426:	08 c0       	rjmp	.+16     	; 0x3438 <calculate+0x1c0>
		}
	default:
		return 0;
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	a0 e0       	ldi	r26, 0x00	; 0
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	8e 87       	std	Y+14, r24	; 0x0e
    3432:	9f 87       	std	Y+15, r25	; 0x0f
    3434:	a8 8b       	std	Y+16, r26	; 0x10
    3436:	b9 8b       	std	Y+17, r27	; 0x11
    3438:	8e 85       	ldd	r24, Y+14	; 0x0e
    343a:	9f 85       	ldd	r25, Y+15	; 0x0f
    343c:	a8 89       	ldd	r26, Y+16	; 0x10
    343e:	b9 89       	ldd	r27, Y+17	; 0x11
	}
}
    3440:	bc 01       	movw	r22, r24
    3442:	cd 01       	movw	r24, r26
    3444:	61 96       	adiw	r28, 0x11	; 17
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	f8 94       	cli
    344a:	de bf       	out	0x3e, r29	; 62
    344c:	0f be       	out	0x3f, r0	; 63
    344e:	cd bf       	out	0x3d, r28	; 61
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	1f 91       	pop	r17
    3456:	0f 91       	pop	r16
    3458:	ff 90       	pop	r15
    345a:	ef 90       	pop	r14
    345c:	08 95       	ret

0000345e <__mulsi3>:
    345e:	62 9f       	mul	r22, r18
    3460:	d0 01       	movw	r26, r0
    3462:	73 9f       	mul	r23, r19
    3464:	f0 01       	movw	r30, r0
    3466:	82 9f       	mul	r24, r18
    3468:	e0 0d       	add	r30, r0
    346a:	f1 1d       	adc	r31, r1
    346c:	64 9f       	mul	r22, r20
    346e:	e0 0d       	add	r30, r0
    3470:	f1 1d       	adc	r31, r1
    3472:	92 9f       	mul	r25, r18
    3474:	f0 0d       	add	r31, r0
    3476:	83 9f       	mul	r24, r19
    3478:	f0 0d       	add	r31, r0
    347a:	74 9f       	mul	r23, r20
    347c:	f0 0d       	add	r31, r0
    347e:	65 9f       	mul	r22, r21
    3480:	f0 0d       	add	r31, r0
    3482:	99 27       	eor	r25, r25
    3484:	72 9f       	mul	r23, r18
    3486:	b0 0d       	add	r27, r0
    3488:	e1 1d       	adc	r30, r1
    348a:	f9 1f       	adc	r31, r25
    348c:	63 9f       	mul	r22, r19
    348e:	b0 0d       	add	r27, r0
    3490:	e1 1d       	adc	r30, r1
    3492:	f9 1f       	adc	r31, r25
    3494:	bd 01       	movw	r22, r26
    3496:	cf 01       	movw	r24, r30
    3498:	11 24       	eor	r1, r1
    349a:	08 95       	ret

0000349c <__udivmodqi4>:
    349c:	99 1b       	sub	r25, r25
    349e:	79 e0       	ldi	r23, 0x09	; 9
    34a0:	04 c0       	rjmp	.+8      	; 0x34aa <__udivmodqi4_ep>

000034a2 <__udivmodqi4_loop>:
    34a2:	99 1f       	adc	r25, r25
    34a4:	96 17       	cp	r25, r22
    34a6:	08 f0       	brcs	.+2      	; 0x34aa <__udivmodqi4_ep>
    34a8:	96 1b       	sub	r25, r22

000034aa <__udivmodqi4_ep>:
    34aa:	88 1f       	adc	r24, r24
    34ac:	7a 95       	dec	r23
    34ae:	c9 f7       	brne	.-14     	; 0x34a2 <__udivmodqi4_loop>
    34b0:	80 95       	com	r24
    34b2:	08 95       	ret

000034b4 <__prologue_saves__>:
    34b4:	2f 92       	push	r2
    34b6:	3f 92       	push	r3
    34b8:	4f 92       	push	r4
    34ba:	5f 92       	push	r5
    34bc:	6f 92       	push	r6
    34be:	7f 92       	push	r7
    34c0:	8f 92       	push	r8
    34c2:	9f 92       	push	r9
    34c4:	af 92       	push	r10
    34c6:	bf 92       	push	r11
    34c8:	cf 92       	push	r12
    34ca:	df 92       	push	r13
    34cc:	ef 92       	push	r14
    34ce:	ff 92       	push	r15
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	ca 1b       	sub	r28, r26
    34de:	db 0b       	sbc	r29, r27
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	09 94       	ijmp

000034ec <__epilogue_restores__>:
    34ec:	2a 88       	ldd	r2, Y+18	; 0x12
    34ee:	39 88       	ldd	r3, Y+17	; 0x11
    34f0:	48 88       	ldd	r4, Y+16	; 0x10
    34f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    34f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    34f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    34f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    34fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    34fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    34fe:	b9 84       	ldd	r11, Y+9	; 0x09
    3500:	c8 84       	ldd	r12, Y+8	; 0x08
    3502:	df 80       	ldd	r13, Y+7	; 0x07
    3504:	ee 80       	ldd	r14, Y+6	; 0x06
    3506:	fd 80       	ldd	r15, Y+5	; 0x05
    3508:	0c 81       	ldd	r16, Y+4	; 0x04
    350a:	1b 81       	ldd	r17, Y+3	; 0x03
    350c:	aa 81       	ldd	r26, Y+2	; 0x02
    350e:	b9 81       	ldd	r27, Y+1	; 0x01
    3510:	ce 0f       	add	r28, r30
    3512:	d1 1d       	adc	r29, r1
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	ed 01       	movw	r28, r26
    3520:	08 95       	ret

00003522 <isspace>:
    3522:	91 11       	cpse	r25, r1
    3524:	06 c0       	rjmp	.+12     	; 0x3532 <__ctype_isfalse>
    3526:	80 32       	cpi	r24, 0x20	; 32
    3528:	19 f0       	breq	.+6      	; 0x3530 <isspace+0xe>
    352a:	89 50       	subi	r24, 0x09	; 9
    352c:	85 50       	subi	r24, 0x05	; 5
    352e:	d0 f7       	brcc	.-12     	; 0x3524 <isspace+0x2>
    3530:	08 95       	ret

00003532 <__ctype_isfalse>:
    3532:	99 27       	eor	r25, r25
    3534:	88 27       	eor	r24, r24

00003536 <__ctype_istrue>:
    3536:	08 95       	ret

00003538 <__udivmodhi4>:
    3538:	aa 1b       	sub	r26, r26
    353a:	bb 1b       	sub	r27, r27
    353c:	51 e1       	ldi	r21, 0x11	; 17
    353e:	07 c0       	rjmp	.+14     	; 0x354e <__udivmodhi4_ep>

00003540 <__udivmodhi4_loop>:
    3540:	aa 1f       	adc	r26, r26
    3542:	bb 1f       	adc	r27, r27
    3544:	a6 17       	cp	r26, r22
    3546:	b7 07       	cpc	r27, r23
    3548:	10 f0       	brcs	.+4      	; 0x354e <__udivmodhi4_ep>
    354a:	a6 1b       	sub	r26, r22
    354c:	b7 0b       	sbc	r27, r23

0000354e <__udivmodhi4_ep>:
    354e:	88 1f       	adc	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	5a 95       	dec	r21
    3554:	a9 f7       	brne	.-22     	; 0x3540 <__udivmodhi4_loop>
    3556:	80 95       	com	r24
    3558:	90 95       	com	r25
    355a:	bc 01       	movw	r22, r24
    355c:	cd 01       	movw	r24, r26
    355e:	08 95       	ret

00003560 <_exit>:
    3560:	f8 94       	cli

00003562 <__stop_program>:
    3562:	ff cf       	rjmp	.-2      	; 0x3562 <__stop_program>
